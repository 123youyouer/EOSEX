// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_error_message_2eproto;
namespace action_message {
class errorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<error> _instance;
} _error_default_instance_;
class metaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<meta> _instance;
} _meta_default_instance_;
class db_store_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_store_i64> _instance;
} _db_store_i64_default_instance_;
class db_update_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_update_i64> _instance;
} _db_update_i64_default_instance_;
class db_remove_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_remove_i64> _instance;
} _db_remove_i64_default_instance_;
class db_get_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_get_i64> _instance;
} _db_get_i64_default_instance_;
class db_next_64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_next_64> _instance;
} _db_next_64_default_instance_;
class db_previous_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_previous_i64> _instance;
} _db_previous_i64_default_instance_;
class db_find_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_find_i64> _instance;
} _db_find_i64_default_instance_;
class db_lowerbound_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_lowerbound_i64> _instance;
} _db_lowerbound_i64_default_instance_;
class db_upperbound_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_upperbound_i64> _instance;
} _db_upperbound_i64_default_instance_;
class db_end_i64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_end_i64> _instance;
} _db_end_i64_default_instance_;
class db_idx64_storeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_store> _instance;
} _db_idx64_store_default_instance_;
class db_idx64_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_update> _instance;
} _db_idx64_update_default_instance_;
class db_idx64_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_remove> _instance;
} _db_idx64_remove_default_instance_;
class db_idx64_find_secondaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_find_secondary> _instance;
} _db_idx64_find_secondary_default_instance_;
class db_idx64_find_primaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_find_primary> _instance;
} _db_idx64_find_primary_default_instance_;
class db_idx64_lowerboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_lowerbound> _instance;
} _db_idx64_lowerbound_default_instance_;
class db_idx64_upperboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_upperbound> _instance;
} _db_idx64_upperbound_default_instance_;
class db_idx64_endDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_end> _instance;
} _db_idx64_end_default_instance_;
class db_idx64_nextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_next> _instance;
} _db_idx64_next_default_instance_;
class db_idx64_previousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx64_previous> _instance;
} _db_idx64_previous_default_instance_;
class db_idx128_storeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_store> _instance;
} _db_idx128_store_default_instance_;
class db_idx128_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_update> _instance;
} _db_idx128_update_default_instance_;
class db_idx128_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_remove> _instance;
} _db_idx128_remove_default_instance_;
class db_idx128_find_secondaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_find_secondary> _instance;
} _db_idx128_find_secondary_default_instance_;
class db_idx128_find_primaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_find_primary> _instance;
} _db_idx128_find_primary_default_instance_;
class db_idx128_lowerboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_lowerbound> _instance;
} _db_idx128_lowerbound_default_instance_;
class db_idx128_upperboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_upperbound> _instance;
} _db_idx128_upperbound_default_instance_;
class db_idx128_endDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_end> _instance;
} _db_idx128_end_default_instance_;
class db_idx128_nextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_next> _instance;
} _db_idx128_next_default_instance_;
class db_idx128_previousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx128_previous> _instance;
} _db_idx128_previous_default_instance_;
class db_idx256_storeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_store> _instance;
} _db_idx256_store_default_instance_;
class db_idx256_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_update> _instance;
} _db_idx256_update_default_instance_;
class db_idx256_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_remove> _instance;
} _db_idx256_remove_default_instance_;
class db_idx256_find_secondaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_find_secondary> _instance;
} _db_idx256_find_secondary_default_instance_;
class db_idx256_find_primaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_find_primary> _instance;
} _db_idx256_find_primary_default_instance_;
class db_idx256_lowerboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_lowerbound> _instance;
} _db_idx256_lowerbound_default_instance_;
class db_idx256_upperboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_upperbound> _instance;
} _db_idx256_upperbound_default_instance_;
class db_idx256_endDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_end> _instance;
} _db_idx256_end_default_instance_;
class db_idx256_nextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_next> _instance;
} _db_idx256_next_default_instance_;
class db_idx256_previousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx256_previous> _instance;
} _db_idx256_previous_default_instance_;
class db_idx_double_storeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_store> _instance;
} _db_idx_double_store_default_instance_;
class db_idx_double_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_update> _instance;
} _db_idx_double_update_default_instance_;
class db_idx_double_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_remove> _instance;
} _db_idx_double_remove_default_instance_;
class db_idx_double_find_secondaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_find_secondary> _instance;
} _db_idx_double_find_secondary_default_instance_;
class db_idx_double_find_primaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_find_primary> _instance;
} _db_idx_double_find_primary_default_instance_;
class db_idx_double_lowerboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_lowerbound> _instance;
} _db_idx_double_lowerbound_default_instance_;
class db_idx_double_upperboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_upperbound> _instance;
} _db_idx_double_upperbound_default_instance_;
class db_idx_double_endDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_end> _instance;
} _db_idx_double_end_default_instance_;
class db_idx_double_nextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_next> _instance;
} _db_idx_double_next_default_instance_;
class db_idx_double_previousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_double_previous> _instance;
} _db_idx_double_previous_default_instance_;
class db_idx_long_double_storeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_store> _instance;
} _db_idx_long_double_store_default_instance_;
class db_idx_long_double_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_update> _instance;
} _db_idx_long_double_update_default_instance_;
class db_idx_long_double_removeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_remove> _instance;
} _db_idx_long_double_remove_default_instance_;
class db_idx_long_double_find_secondaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_find_secondary> _instance;
} _db_idx_long_double_find_secondary_default_instance_;
class db_idx_long_double_find_primaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_find_primary> _instance;
} _db_idx_long_double_find_primary_default_instance_;
class db_idx_long_double_lowerboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_lowerbound> _instance;
} _db_idx_long_double_lowerbound_default_instance_;
class db_idx_long_double_upperboundDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_upperbound> _instance;
} _db_idx_long_double_upperbound_default_instance_;
class db_idx_long_double_endDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_end> _instance;
} _db_idx_long_double_end_default_instance_;
class db_idx_long_double_nextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_next> _instance;
} _db_idx_long_double_next_default_instance_;
class db_idx_long_double_previousDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<db_idx_long_double_previous> _instance;
} _db_idx_long_double_previous_default_instance_;
class check_transaction_authorizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<check_transaction_authorization> _instance;
} _check_transaction_authorization_default_instance_;
class check_permission_authorizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<check_permission_authorization> _instance;
} _check_permission_authorization_default_instance_;
class get_permission_last_usedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<get_permission_last_used> _instance;
} _get_permission_last_used_default_instance_;
class get_account_creation_timeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<get_account_creation_time> _instance;
} _get_account_creation_time_default_instance_;
class rpc_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rpc_request> _instance;
} _rpc_request_default_instance_;
class rpc_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rpc_response> _instance;
} _rpc_response_default_instance_;
}  // namespace action_message
static void InitDefaultserror_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_error_default_instance_;
    new (ptr) ::action_message::error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_error_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultserror_message_2eproto}, {}};

static void InitDefaultsmeta_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_meta_default_instance_;
    new (ptr) ::action_message::meta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::meta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_meta_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmeta_message_2eproto}, {}};

static void InitDefaultsdb_store_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_store_i64_default_instance_;
    new (ptr) ::action_message::db_store_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_store_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_store_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_store_i64_message_2eproto}, {}};

static void InitDefaultsdb_update_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_update_i64_default_instance_;
    new (ptr) ::action_message::db_update_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_update_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_update_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_update_i64_message_2eproto}, {}};

static void InitDefaultsdb_remove_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_remove_i64_default_instance_;
    new (ptr) ::action_message::db_remove_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_remove_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_remove_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_remove_i64_message_2eproto}, {}};

static void InitDefaultsdb_get_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_get_i64_default_instance_;
    new (ptr) ::action_message::db_get_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_get_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_get_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_get_i64_message_2eproto}, {}};

static void InitDefaultsdb_next_64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_next_64_default_instance_;
    new (ptr) ::action_message::db_next_64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_next_64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_next_64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_next_64_message_2eproto}, {}};

static void InitDefaultsdb_previous_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_previous_i64_default_instance_;
    new (ptr) ::action_message::db_previous_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_previous_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_previous_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_previous_i64_message_2eproto}, {}};

static void InitDefaultsdb_find_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_find_i64_default_instance_;
    new (ptr) ::action_message::db_find_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_find_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_find_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_find_i64_message_2eproto}, {}};

static void InitDefaultsdb_lowerbound_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_lowerbound_i64_default_instance_;
    new (ptr) ::action_message::db_lowerbound_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_lowerbound_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_lowerbound_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_lowerbound_i64_message_2eproto}, {}};

static void InitDefaultsdb_upperbound_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_upperbound_i64_default_instance_;
    new (ptr) ::action_message::db_upperbound_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_upperbound_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_upperbound_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_upperbound_i64_message_2eproto}, {}};

static void InitDefaultsdb_end_i64_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_end_i64_default_instance_;
    new (ptr) ::action_message::db_end_i64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_end_i64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_end_i64_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_end_i64_message_2eproto}, {}};

static void InitDefaultsdb_idx64_store_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_store_default_instance_;
    new (ptr) ::action_message::db_idx64_store();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_store::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_store_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_store_message_2eproto}, {}};

static void InitDefaultsdb_idx64_update_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_update_default_instance_;
    new (ptr) ::action_message::db_idx64_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_update_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_update_message_2eproto}, {}};

static void InitDefaultsdb_idx64_remove_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_remove_default_instance_;
    new (ptr) ::action_message::db_idx64_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_remove_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_remove_message_2eproto}, {}};

static void InitDefaultsdb_idx64_find_secondary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_find_secondary_default_instance_;
    new (ptr) ::action_message::db_idx64_find_secondary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_find_secondary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_find_secondary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_find_secondary_message_2eproto}, {}};

static void InitDefaultsdb_idx64_find_primary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_find_primary_default_instance_;
    new (ptr) ::action_message::db_idx64_find_primary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_find_primary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_find_primary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_find_primary_message_2eproto}, {}};

static void InitDefaultsdb_idx64_lowerbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_lowerbound_default_instance_;
    new (ptr) ::action_message::db_idx64_lowerbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_lowerbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_lowerbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_lowerbound_message_2eproto}, {}};

static void InitDefaultsdb_idx64_upperbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_upperbound_default_instance_;
    new (ptr) ::action_message::db_idx64_upperbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_upperbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_upperbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_upperbound_message_2eproto}, {}};

static void InitDefaultsdb_idx64_end_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_end_default_instance_;
    new (ptr) ::action_message::db_idx64_end();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_end::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_end_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_end_message_2eproto}, {}};

static void InitDefaultsdb_idx64_next_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_next_default_instance_;
    new (ptr) ::action_message::db_idx64_next();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_next::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_next_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_next_message_2eproto}, {}};

static void InitDefaultsdb_idx64_previous_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx64_previous_default_instance_;
    new (ptr) ::action_message::db_idx64_previous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx64_previous::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx64_previous_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx64_previous_message_2eproto}, {}};

static void InitDefaultsdb_idx128_store_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_store_default_instance_;
    new (ptr) ::action_message::db_idx128_store();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_store::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_store_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_store_message_2eproto}, {}};

static void InitDefaultsdb_idx128_update_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_update_default_instance_;
    new (ptr) ::action_message::db_idx128_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_update_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_update_message_2eproto}, {}};

static void InitDefaultsdb_idx128_remove_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_remove_default_instance_;
    new (ptr) ::action_message::db_idx128_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_remove_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_remove_message_2eproto}, {}};

static void InitDefaultsdb_idx128_find_secondary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_find_secondary_default_instance_;
    new (ptr) ::action_message::db_idx128_find_secondary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_find_secondary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_find_secondary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_find_secondary_message_2eproto}, {}};

static void InitDefaultsdb_idx128_find_primary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_find_primary_default_instance_;
    new (ptr) ::action_message::db_idx128_find_primary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_find_primary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_find_primary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_find_primary_message_2eproto}, {}};

static void InitDefaultsdb_idx128_lowerbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_lowerbound_default_instance_;
    new (ptr) ::action_message::db_idx128_lowerbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_lowerbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_lowerbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_lowerbound_message_2eproto}, {}};

static void InitDefaultsdb_idx128_upperbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_upperbound_default_instance_;
    new (ptr) ::action_message::db_idx128_upperbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_upperbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_upperbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_upperbound_message_2eproto}, {}};

static void InitDefaultsdb_idx128_end_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_end_default_instance_;
    new (ptr) ::action_message::db_idx128_end();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_end::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_end_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_end_message_2eproto}, {}};

static void InitDefaultsdb_idx128_next_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_next_default_instance_;
    new (ptr) ::action_message::db_idx128_next();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_next::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_next_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_next_message_2eproto}, {}};

static void InitDefaultsdb_idx128_previous_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx128_previous_default_instance_;
    new (ptr) ::action_message::db_idx128_previous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx128_previous::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx128_previous_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx128_previous_message_2eproto}, {}};

static void InitDefaultsdb_idx256_store_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_store_default_instance_;
    new (ptr) ::action_message::db_idx256_store();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_store::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_store_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_store_message_2eproto}, {}};

static void InitDefaultsdb_idx256_update_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_update_default_instance_;
    new (ptr) ::action_message::db_idx256_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_update_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_update_message_2eproto}, {}};

static void InitDefaultsdb_idx256_remove_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_remove_default_instance_;
    new (ptr) ::action_message::db_idx256_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_remove_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_remove_message_2eproto}, {}};

static void InitDefaultsdb_idx256_find_secondary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_find_secondary_default_instance_;
    new (ptr) ::action_message::db_idx256_find_secondary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_find_secondary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_find_secondary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_find_secondary_message_2eproto}, {}};

static void InitDefaultsdb_idx256_find_primary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_find_primary_default_instance_;
    new (ptr) ::action_message::db_idx256_find_primary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_find_primary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_find_primary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_find_primary_message_2eproto}, {}};

static void InitDefaultsdb_idx256_lowerbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_lowerbound_default_instance_;
    new (ptr) ::action_message::db_idx256_lowerbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_lowerbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_lowerbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_lowerbound_message_2eproto}, {}};

static void InitDefaultsdb_idx256_upperbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_upperbound_default_instance_;
    new (ptr) ::action_message::db_idx256_upperbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_upperbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_upperbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_upperbound_message_2eproto}, {}};

static void InitDefaultsdb_idx256_end_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_end_default_instance_;
    new (ptr) ::action_message::db_idx256_end();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_end::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_end_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_end_message_2eproto}, {}};

static void InitDefaultsdb_idx256_next_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_next_default_instance_;
    new (ptr) ::action_message::db_idx256_next();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_next::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_next_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_next_message_2eproto}, {}};

static void InitDefaultsdb_idx256_previous_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx256_previous_default_instance_;
    new (ptr) ::action_message::db_idx256_previous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx256_previous::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx256_previous_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx256_previous_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_store_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_store_default_instance_;
    new (ptr) ::action_message::db_idx_double_store();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_store::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_store_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_store_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_update_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_update_default_instance_;
    new (ptr) ::action_message::db_idx_double_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_update_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_update_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_remove_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_remove_default_instance_;
    new (ptr) ::action_message::db_idx_double_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_remove_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_remove_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_find_secondary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_find_secondary_default_instance_;
    new (ptr) ::action_message::db_idx_double_find_secondary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_find_secondary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_find_secondary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_find_secondary_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_find_primary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_find_primary_default_instance_;
    new (ptr) ::action_message::db_idx_double_find_primary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_find_primary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_find_primary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_find_primary_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_lowerbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_lowerbound_default_instance_;
    new (ptr) ::action_message::db_idx_double_lowerbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_lowerbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_lowerbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_lowerbound_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_upperbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_upperbound_default_instance_;
    new (ptr) ::action_message::db_idx_double_upperbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_upperbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_upperbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_upperbound_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_end_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_end_default_instance_;
    new (ptr) ::action_message::db_idx_double_end();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_end::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_end_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_end_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_next_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_next_default_instance_;
    new (ptr) ::action_message::db_idx_double_next();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_next::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_next_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_next_message_2eproto}, {}};

static void InitDefaultsdb_idx_double_previous_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_double_previous_default_instance_;
    new (ptr) ::action_message::db_idx_double_previous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_double_previous::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_double_previous_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_double_previous_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_store_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_store_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_store();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_store::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_store_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_store_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_update_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_update_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_update_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_update_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_remove_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_remove_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_remove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_remove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_remove_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_remove_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_find_secondary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_find_secondary_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_find_secondary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_find_secondary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_find_secondary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_find_secondary_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_find_primary_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_find_primary_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_find_primary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_find_primary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_find_primary_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_find_primary_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_lowerbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_lowerbound_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_lowerbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_lowerbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_lowerbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_lowerbound_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_upperbound_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_upperbound_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_upperbound();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_upperbound::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_upperbound_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_upperbound_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_end_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_end_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_end();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_end::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_end_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_end_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_next_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_next_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_next();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_next::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_next_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_next_message_2eproto}, {}};

static void InitDefaultsdb_idx_long_double_previous_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_db_idx_long_double_previous_default_instance_;
    new (ptr) ::action_message::db_idx_long_double_previous();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::db_idx_long_double_previous::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_db_idx_long_double_previous_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsdb_idx_long_double_previous_message_2eproto}, {}};

static void InitDefaultscheck_transaction_authorization_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_check_transaction_authorization_default_instance_;
    new (ptr) ::action_message::check_transaction_authorization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::check_transaction_authorization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_check_transaction_authorization_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscheck_transaction_authorization_message_2eproto}, {}};

static void InitDefaultscheck_permission_authorization_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_check_permission_authorization_default_instance_;
    new (ptr) ::action_message::check_permission_authorization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::check_permission_authorization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_check_permission_authorization_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultscheck_permission_authorization_message_2eproto}, {}};

static void InitDefaultsget_permission_last_used_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_get_permission_last_used_default_instance_;
    new (ptr) ::action_message::get_permission_last_used();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::get_permission_last_used::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_get_permission_last_used_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsget_permission_last_used_message_2eproto}, {}};

static void InitDefaultsget_account_creation_time_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_get_account_creation_time_default_instance_;
    new (ptr) ::action_message::get_account_creation_time();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::get_account_creation_time::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_get_account_creation_time_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsget_account_creation_time_message_2eproto}, {}};

static void InitDefaultsrpc_request_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_rpc_request_default_instance_;
    new (ptr) ::action_message::rpc_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::rpc_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_rpc_request_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsrpc_request_message_2eproto}, {}};

static void InitDefaultsrpc_response_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_rpc_response_default_instance_;
    new (ptr) ::action_message::rpc_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::rpc_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rpc_response_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrpc_response_message_2eproto}, {
      &scc_info_error_message_2eproto.base,}};

void InitDefaults_message_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_error_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_meta_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_store_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_update_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_remove_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_get_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_next_64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_previous_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_find_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_lowerbound_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_upperbound_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_end_i64_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_store_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_update_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_remove_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_find_secondary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_find_primary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_lowerbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_upperbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_end_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_next_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx64_previous_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_store_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_update_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_remove_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_find_secondary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_find_primary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_lowerbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_upperbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_end_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_next_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx128_previous_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_store_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_update_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_remove_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_find_secondary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_find_primary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_lowerbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_upperbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_end_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_next_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx256_previous_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_store_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_update_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_remove_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_find_secondary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_find_primary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_lowerbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_upperbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_end_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_next_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_double_previous_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_store_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_update_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_remove_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_find_secondary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_find_primary_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_lowerbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_upperbound_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_end_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_next_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_db_idx_long_double_previous_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_check_transaction_authorization_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_check_permission_authorization_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_get_permission_last_used_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_get_account_creation_time_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rpc_request_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rpc_response_message_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_message_2eproto[68];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_message_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::action_message::error, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::error, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::error, msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::meta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::meta, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::meta, service_id_),
  PROTOBUF_FIELD_OFFSET(::action_message::meta, method_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, buffer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_store_i64, buffer_size_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::action_message::db_update_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_update_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_update_i64, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_update_i64, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_update_i64, buffer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_update_i64, buffer_size_),
  3,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_remove_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_remove_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_remove_i64, itr_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_get_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_get_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_get_i64, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_get_i64, buffer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_get_i64, buffer_size_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::action_message::db_next_64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_next_64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_next_64, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_next_64, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_previous_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_previous_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_previous_i64, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_previous_i64, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_find_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_find_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_find_i64, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_find_i64, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_find_i64, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_find_i64, id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::action_message::db_lowerbound_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_lowerbound_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_lowerbound_i64, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_lowerbound_i64, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_lowerbound_i64, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_lowerbound_i64, id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::action_message::db_upperbound_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_upperbound_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_upperbound_i64, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_upperbound_i64, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_upperbound_i64, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_upperbound_i64, id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::action_message::db_end_i64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_end_i64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_end_i64, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_end_i64, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_end_i64, scope_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_store, secondary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_update, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_update, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_update, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_update, secondary_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_remove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_remove, itr_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_secondary, primary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_find_primary, primary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_lowerbound, primary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_upperbound, primary_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_end, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_end, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_end, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_end, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_end, table_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_next, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_next, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_next, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_next, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_previous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_previous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_previous, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx64_previous, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_store, secondary_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_update, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_update, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_update, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_update, secondary_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_remove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_remove, itr_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_secondary, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_find_primary, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_lowerbound, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_upperbound, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_end, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_end, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_end, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_end, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_end, table_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_next, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_next, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_next, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_next, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_previous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_previous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_previous, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx128_previous, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, data_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_store, data_len_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_update, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_update, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_update, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_update, data_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_update, data_len_),
  3,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_remove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_remove, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, data_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, data_len_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_secondary, primary_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, data_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, data_len_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_find_primary, primary_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, data_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, data_len_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_lowerbound, primary_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, data_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, data_len_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_upperbound, primary_),
  1,
  2,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_end, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_end, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_end, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_end, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_end, table_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_next, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_next, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_next, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_next, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_previous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_previous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_previous, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx256_previous, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_store, secondary_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_update, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_update, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_update, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_update, secondary_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_remove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_remove, itr_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_secondary, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_find_primary, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_lowerbound, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_upperbound, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_end, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_end, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_end, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_end, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_end, table_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_next, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_next, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_next, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_next, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_previous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_previous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_previous, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_double_previous, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_store, secondary_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_update, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_update, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_update, payer_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_update, secondary_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_remove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_remove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_remove, itr_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_secondary, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_find_primary, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_lowerbound, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, table_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, secondary_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_upperbound, primary_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_end, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_end, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_end, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_end, scope_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_end, table_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_next, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_next, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_next, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_next, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_previous, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_previous, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_previous, itr_),
  PROTOBUF_FIELD_OFFSET(::action_message::db_idx_long_double_previous, primary_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::check_transaction_authorization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_transaction_authorization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::check_transaction_authorization, trx_data_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_transaction_authorization, pubkeys_data_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_transaction_authorization, perms_data_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, account_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, permission_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, pubkeys_data_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, perms_data_),
  PROTOBUF_FIELD_OFFSET(::action_message::check_permission_authorization, delay_us_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::action_message::get_permission_last_used, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::get_permission_last_used, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::get_permission_last_used, account_),
  PROTOBUF_FIELD_OFFSET(::action_message::get_permission_last_used, permission_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::action_message::get_account_creation_time, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::get_account_creation_time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::get_account_creation_time, account_),
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, msg_id_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, msg_id_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, err_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, data_),
  2,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::action_message::error)},
  { 9, 17, sizeof(::action_message::meta)},
  { 20, 31, sizeof(::action_message::db_store_i64)},
  { 37, 46, sizeof(::action_message::db_update_i64)},
  { 50, 56, sizeof(::action_message::db_remove_i64)},
  { 57, 65, sizeof(::action_message::db_get_i64)},
  { 68, 75, sizeof(::action_message::db_next_64)},
  { 77, 84, sizeof(::action_message::db_previous_i64)},
  { 86, 95, sizeof(::action_message::db_find_i64)},
  { 99, 108, sizeof(::action_message::db_lowerbound_i64)},
  { 112, 121, sizeof(::action_message::db_upperbound_i64)},
  { 125, 133, sizeof(::action_message::db_end_i64)},
  { 136, 146, sizeof(::action_message::db_idx64_store)},
  { 151, 159, sizeof(::action_message::db_idx64_update)},
  { 162, 168, sizeof(::action_message::db_idx64_remove)},
  { 169, 179, sizeof(::action_message::db_idx64_find_secondary)},
  { 184, 194, sizeof(::action_message::db_idx64_find_primary)},
  { 199, 209, sizeof(::action_message::db_idx64_lowerbound)},
  { 214, 224, sizeof(::action_message::db_idx64_upperbound)},
  { 229, 237, sizeof(::action_message::db_idx64_end)},
  { 240, 247, sizeof(::action_message::db_idx64_next)},
  { 249, 256, sizeof(::action_message::db_idx64_previous)},
  { 258, 268, sizeof(::action_message::db_idx128_store)},
  { 273, 281, sizeof(::action_message::db_idx128_update)},
  { 284, 290, sizeof(::action_message::db_idx128_remove)},
  { 291, 301, sizeof(::action_message::db_idx128_find_secondary)},
  { 306, 316, sizeof(::action_message::db_idx128_find_primary)},
  { 321, 331, sizeof(::action_message::db_idx128_lowerbound)},
  { 336, 346, sizeof(::action_message::db_idx128_upperbound)},
  { 351, 359, sizeof(::action_message::db_idx128_end)},
  { 362, 369, sizeof(::action_message::db_idx128_next)},
  { 371, 378, sizeof(::action_message::db_idx128_previous)},
  { 380, 391, sizeof(::action_message::db_idx256_store)},
  { 397, 406, sizeof(::action_message::db_idx256_update)},
  { 410, 416, sizeof(::action_message::db_idx256_remove)},
  { 417, 428, sizeof(::action_message::db_idx256_find_secondary)},
  { 434, 445, sizeof(::action_message::db_idx256_find_primary)},
  { 451, 462, sizeof(::action_message::db_idx256_lowerbound)},
  { 468, 479, sizeof(::action_message::db_idx256_upperbound)},
  { 485, 493, sizeof(::action_message::db_idx256_end)},
  { 496, 503, sizeof(::action_message::db_idx256_next)},
  { 505, 512, sizeof(::action_message::db_idx256_previous)},
  { 514, 524, sizeof(::action_message::db_idx_double_store)},
  { 529, 537, sizeof(::action_message::db_idx_double_update)},
  { 540, 546, sizeof(::action_message::db_idx_double_remove)},
  { 547, 557, sizeof(::action_message::db_idx_double_find_secondary)},
  { 562, 572, sizeof(::action_message::db_idx_double_find_primary)},
  { 577, 587, sizeof(::action_message::db_idx_double_lowerbound)},
  { 592, 602, sizeof(::action_message::db_idx_double_upperbound)},
  { 607, 615, sizeof(::action_message::db_idx_double_end)},
  { 618, 625, sizeof(::action_message::db_idx_double_next)},
  { 627, 634, sizeof(::action_message::db_idx_double_previous)},
  { 636, 646, sizeof(::action_message::db_idx_long_double_store)},
  { 651, 659, sizeof(::action_message::db_idx_long_double_update)},
  { 662, 668, sizeof(::action_message::db_idx_long_double_remove)},
  { 669, 679, sizeof(::action_message::db_idx_long_double_find_secondary)},
  { 684, 694, sizeof(::action_message::db_idx_long_double_find_primary)},
  { 699, 709, sizeof(::action_message::db_idx_long_double_lowerbound)},
  { 714, 724, sizeof(::action_message::db_idx_long_double_upperbound)},
  { 729, 737, sizeof(::action_message::db_idx_long_double_end)},
  { 740, 747, sizeof(::action_message::db_idx_long_double_next)},
  { 749, 756, sizeof(::action_message::db_idx_long_double_previous)},
  { 758, 766, sizeof(::action_message::check_transaction_authorization)},
  { 769, 779, sizeof(::action_message::check_permission_authorization)},
  { 784, 791, sizeof(::action_message::get_permission_last_used)},
  { 793, 799, sizeof(::action_message::get_account_creation_time)},
  { 800, 807, sizeof(::action_message::rpc_request)},
  { 809, 817, sizeof(::action_message::rpc_response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_meta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_store_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_update_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_remove_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_get_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_next_64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_previous_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_find_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_lowerbound_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_upperbound_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_end_i64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_find_secondary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_find_primary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_lowerbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_upperbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_end_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_next_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx64_previous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_find_secondary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_find_primary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_lowerbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_upperbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_end_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_next_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx128_previous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_find_secondary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_find_primary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_lowerbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_upperbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_end_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_next_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx256_previous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_find_secondary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_find_primary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_lowerbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_upperbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_end_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_next_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_double_previous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_store_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_remove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_find_secondary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_find_primary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_lowerbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_upperbound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_end_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_next_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_db_idx_long_double_previous_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_check_transaction_authorization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_check_permission_authorization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_get_permission_last_used_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_get_account_creation_time_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_rpc_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_rpc_response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_message_2eproto = {
  {}, AddDescriptors_message_2eproto, "message.proto", schemas,
  file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 68, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, InitDefaults_message_2eproto, 
  "\n\rmessage.proto\022\016action_message\"\"\n\005error"
  "\022\014\n\004code\030\001 \001(\r\022\013\n\003msg\030\002 \001(\t\"9\n\004meta\022\n\n\002i"
  "d\030\001 \001(\r\022\022\n\nservice_id\030\002 \001(\r\022\021\n\tmethod_id"
  "\030\003 \001(\r\"l\n\014db_store_i64\022\r\n\005scope\030\001 \001(\004\022\r\n"
  "\005table\030\002 \001(\004\022\r\n\005payer\030\003 \001(\004\022\n\n\002id\030\004 \001(\004\022"
  "\016\n\006buffer\030\005 \001(\014\022\023\n\013buffer_size\030\006 \001(\004\"P\n\r"
  "db_update_i64\022\013\n\003itr\030\001 \001(\r\022\r\n\005payer\030\002 \001("
  "\004\022\016\n\006buffer\030\003 \001(\014\022\023\n\013buffer_size\030\004 \001(\004\"\034"
  "\n\rdb_remove_i64\022\013\n\003itr\030\001 \001(\r\">\n\ndb_get_i"
  "64\022\013\n\003itr\030\001 \001(\r\022\016\n\006buffer\030\002 \001(\014\022\023\n\013buffe"
  "r_size\030\003 \001(\004\"*\n\ndb_next_64\022\013\n\003itr\030\001 \001(\r\022"
  "\017\n\007primary\030\002 \001(\004\"/\n\017db_previous_i64\022\013\n\003i"
  "tr\030\001 \001(\r\022\017\n\007primary\030\002 \001(\004\"E\n\013db_find_i64"
  "\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003"
  " \001(\004\022\n\n\002id\030\004 \001(\004\"K\n\021db_lowerbound_i64\022\014\n"
  "\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001("
  "\004\022\n\n\002id\030\004 \001(\004\"K\n\021db_upperbound_i64\022\014\n\004co"
  "de\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\n"
  "\n\002id\030\004 \001(\004\"8\n\ndb_end_i64\022\014\n\004code\030\001 \001(\004\022\r"
  "\n\005table\030\002 \001(\004\022\r\n\005scope\030\003 \001(\004\"\\\n\016db_idx64"
  "_store\022\r\n\005scope\030\001 \001(\004\022\r\n\005table\030\002 \001(\004\022\r\n\005"
  "payer\030\003 \001(\004\022\n\n\002id\030\004 \001(\004\022\021\n\tsecondary\030\005 \001"
  "(\004\"@\n\017db_idx64_update\022\013\n\003itr\030\001 \001(\r\022\r\n\005pa"
  "yer\030\002 \001(\004\022\021\n\tsecondary\030\003 \001(\004\"\036\n\017db_idx64"
  "_remove\022\013\n\003itr\030\001 \001(\r\"i\n\027db_idx64_find_se"
  "condary\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005"
  "table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\004\022\017\n\007primar"
  "y\030\005 \001(\004\"g\n\025db_idx64_find_primary\022\014\n\004code"
  "\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\t"
  "secondary\030\004 \001(\004\022\017\n\007primary\030\005 \001(\004\"e\n\023db_i"
  "dx64_lowerbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002"
  " \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\004\022\017"
  "\n\007primary\030\005 \001(\004\"e\n\023db_idx64_upperbound\022\014"
  "\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001"
  "(\004\022\021\n\tsecondary\030\004 \001(\004\022\017\n\007primary\030\005 \001(\004\":"
  "\n\014db_idx64_end\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 "
  "\001(\004\022\r\n\005table\030\003 \001(\004\"-\n\rdb_idx64_next\022\013\n\003i"
  "tr\030\001 \001(\r\022\017\n\007primary\030\002 \001(\004\"1\n\021db_idx64_pr"
  "evious\022\013\n\003itr\030\001 \001(\r\022\017\n\007primary\030\002 \001(\004\"]\n\017"
  "db_idx128_store\022\r\n\005scope\030\001 \001(\004\022\r\n\005table\030"
  "\002 \001(\004\022\r\n\005payer\030\003 \001(\004\022\n\n\002id\030\004 \001(\004\022\021\n\tseco"
  "ndary\030\005 \001(\014\"A\n\020db_idx128_update\022\013\n\003itr\030\001"
  " \001(\r\022\r\n\005payer\030\002 \001(\004\022\021\n\tsecondary\030\003 \001(\014\"\037"
  "\n\020db_idx128_remove\022\013\n\003itr\030\001 \001(\r\"j\n\030db_id"
  "x128_find_secondary\022\014\n\004code\030\001 \001(\004\022\r\n\005sco"
  "pe\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001"
  "(\014\022\017\n\007primary\030\005 \001(\004\"h\n\026db_idx128_find_pr"
  "imary\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005ta"
  "ble\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\014\022\017\n\007primary\030"
  "\005 \001(\004\"f\n\024db_idx128_lowerbound\022\014\n\004code\030\001 "
  "\001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsec"
  "ondary\030\004 \001(\014\022\017\n\007primary\030\005 \001(\004\"f\n\024db_idx1"
  "28_upperbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001"
  "(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\014\022\017\n\007"
  "primary\030\005 \001(\004\";\n\rdb_idx128_end\022\014\n\004code\030\001"
  " \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\".\n\016db"
  "_idx128_next\022\013\n\003itr\030\001 \001(\r\022\017\n\007primary\030\002 \001"
  "(\004\"2\n\022db_idx128_previous\022\013\n\003itr\030\001 \001(\r\022\017\n"
  "\007primary\030\002 \001(\004\"j\n\017db_idx256_store\022\r\n\005sco"
  "pe\030\001 \001(\004\022\r\n\005table\030\002 \001(\004\022\r\n\005payer\030\003 \001(\004\022\n"
  "\n\002id\030\004 \001(\004\022\014\n\004data\030\005 \001(\014\022\020\n\010data_len\030\006 \001"
  "(\004\"N\n\020db_idx256_update\022\013\n\003itr\030\001 \001(\r\022\r\n\005p"
  "ayer\030\002 \001(\004\022\014\n\004data\030\003 \001(\014\022\020\n\010data_len\030\004 \001"
  "(\004\"\036\n\020db_idx256_remove\022\n\n\002id\030\001 \001(\r\"w\n\030db"
  "_idx256_find_secondary\022\014\n\004code\030\001 \001(\004\022\r\n\005"
  "scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\014\n\004data\030\004 \001(\014"
  "\022\020\n\010data_len\030\005 \001(\004\022\017\n\007primary\030\006 \001(\004\"u\n\026d"
  "b_idx256_find_primary\022\014\n\004code\030\001 \001(\004\022\r\n\005s"
  "cope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022"
  "\020\n\010data_len\030\005 \001(\004\022\017\n\007primary\030\006 \001(\004\"s\n\024db"
  "_idx256_lowerbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scop"
  "e\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\020\n\010"
  "data_len\030\005 \001(\004\022\017\n\007primary\030\006 \001(\004\"s\n\024db_id"
  "x256_upperbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002"
  " \001(\004\022\r\n\005table\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\020\n\010dat"
  "a_len\030\005 \001(\004\022\017\n\007primary\030\006 \001(\004\";\n\rdb_idx25"
  "6_end\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005ta"
  "ble\030\003 \001(\004\".\n\016db_idx256_next\022\013\n\003itr\030\001 \001(\r"
  "\022\017\n\007primary\030\002 \001(\004\"2\n\022db_idx256_previous\022"
  "\013\n\003itr\030\001 \001(\r\022\017\n\007primary\030\002 \001(\004\"a\n\023db_idx_"
  "double_store\022\r\n\005scope\030\001 \001(\004\022\r\n\005table\030\002 \001"
  "(\004\022\r\n\005payer\030\003 \001(\004\022\n\n\002id\030\004 \001(\004\022\021\n\tseconda"
  "ry\030\005 \001(\014\"E\n\024db_idx_double_update\022\013\n\003itr\030"
  "\001 \001(\r\022\r\n\005payer\030\002 \001(\004\022\021\n\tsecondary\030\003 \001(\014\""
  "#\n\024db_idx_double_remove\022\013\n\003itr\030\001 \001(\r\"n\n\034"
  "db_idx_double_find_secondary\022\014\n\004code\030\001 \001"
  "(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tseco"
  "ndary\030\004 \001(\014\022\017\n\007primary\030\005 \001(\004\"l\n\032db_idx_d"
  "ouble_find_primary\022\014\n\004code\030\001 \001(\004\022\r\n\005scop"
  "e\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001("
  "\014\022\017\n\007primary\030\005 \001(\004\"j\n\030db_idx_double_lowe"
  "rbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005t"
  "able\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\014\022\017\n\007primary"
  "\030\005 \001(\004\"j\n\030db_idx_double_upperbound\022\014\n\004co"
  "de\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021"
  "\n\tsecondary\030\004 \001(\014\022\017\n\007primary\030\005 \001(\004\"\?\n\021db"
  "_idx_double_end\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002"
  " \001(\004\022\r\n\005table\030\003 \001(\004\"2\n\022db_idx_double_nex"
  "t\022\013\n\003itr\030\001 \001(\r\022\017\n\007primary\030\002 \001(\004\"6\n\026db_id"
  "x_double_previous\022\013\n\003itr\030\001 \001(\r\022\017\n\007primar"
  "y\030\002 \001(\004\"f\n\030db_idx_long_double_store\022\r\n\005s"
  "cope\030\001 \001(\004\022\r\n\005table\030\002 \001(\004\022\r\n\005payer\030\003 \001(\004"
  "\022\n\n\002id\030\004 \001(\004\022\021\n\tsecondary\030\005 \001(\014\"J\n\031db_id"
  "x_long_double_update\022\013\n\003itr\030\001 \001(\r\022\r\n\005pay"
  "er\030\002 \001(\004\022\021\n\tsecondary\030\003 \001(\014\"(\n\031db_idx_lo"
  "ng_double_remove\022\013\n\003itr\030\001 \001(\r\"s\n!db_idx_"
  "long_double_find_secondary\022\014\n\004code\030\001 \001(\004"
  "\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecond"
  "ary\030\004 \001(\014\022\017\n\007primary\030\005 \001(\004\"q\n\037db_idx_lon"
  "g_double_find_primary\022\014\n\004code\030\001 \001(\004\022\r\n\005s"
  "cope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecondary\030\004"
  " \001(\014\022\017\n\007primary\030\005 \001(\004\"o\n\035db_idx_long_dou"
  "ble_lowerbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 "
  "\001(\004\022\r\n\005table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\014\022\017\n"
  "\007primary\030\005 \001(\004\"o\n\035db_idx_long_double_upp"
  "erbound\022\014\n\004code\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005"
  "table\030\003 \001(\004\022\021\n\tsecondary\030\004 \001(\014\022\017\n\007primar"
  "y\030\005 \001(\004\"D\n\026db_idx_long_double_end\022\014\n\004cod"
  "e\030\001 \001(\004\022\r\n\005scope\030\002 \001(\004\022\r\n\005table\030\003 \001(\004\"7\n"
  "\027db_idx_long_double_next\022\013\n\003itr\030\001 \001(\r\022\017\n"
  "\007primary\030\002 \001(\004\";\n\033db_idx_long_double_pre"
  "vious\022\013\n\003itr\030\001 \001(\r\022\017\n\007primary\030\002 \001(\004\"]\n\037c"
  "heck_transaction_authorization\022\020\n\010trx_da"
  "ta\030\001 \001(\014\022\024\n\014pubkeys_data\030\002 \001(\014\022\022\n\nperms_"
  "data\030\003 \001(\014\"\201\001\n\036check_permission_authoriz"
  "ation\022\017\n\007account\030\001 \001(\014\022\022\n\npermission\030\002 \001"
  "(\014\022\024\n\014pubkeys_data\030\003 \001(\014\022\022\n\nperms_data\030\004"
  " \001(\014\022\020\n\010delay_us\030\005 \001(\004\"\?\n\030get_permission"
  "_last_used\022\017\n\007account\030\001 \001(\014\022\022\n\npermissio"
  "n\030\002 \001(\014\",\n\031get_account_creation_time\022\017\n\007"
  "account\030\001 \001(\014\"G\n\013rpc_request\022*\n\006msg_id\030\001"
  " \001(\0162\032.action_message.message_id\022\014\n\004data"
  "\030\002 \001(\014\"l\n\014rpc_response\022*\n\006msg_id\030\001 \001(\0162\032"
  ".action_message.message_id\022\"\n\003err\030\002 \001(\0132"
  "\025.action_message.error\022\014\n\004data\030\003 \001(\014*\317\n\n"
  "\013object_type\022\024\n\020null_object_type\020\000\022\027\n\023ac"
  "count_object_type\020\001\022 \n\034account_sequence_"
  "object_type\020\002\022\032\n\026permission_object_type\020"
  "\003\022 \n\034permission_usage_object_type\020\004\022\037\n\033p"
  "ermission_link_object_type\020\005\022\"\n\036UNUSED_a"
  "ction_code_object_type\020\006\022\031\n\025key_value_ob"
  "ject_type\020\007\022\027\n\023index64_object_type\020\010\022\030\n\024"
  "index128_object_type\020\t\022\030\n\024index256_objec"
  "t_type\020\n\022\034\n\030index_double_object_type\020\013\022!"
  "\n\035index_long_double_object_type\020\014\022\037\n\033glo"
  "bal_property_object_type\020\r\022\'\n#dynamic_gl"
  "obal_property_object_type\020\016\022\035\n\031block_sum"
  "mary_object_type\020\017\022\033\n\027transaction_object"
  "_type\020\020\022%\n!generated_transaction_object_"
  "type\020\021\022\030\n\024producer_object_type\020\022\022%\n!UNUS"
  "ED_chain_property_object_type\020\023\022\'\n#accou"
  "nt_control_history_object_type\020\024\0222\n.UNUS"
  "ED_account_transaction_history_object_ty"
  "pe\020\025\022*\n&UNUSED_transaction_history_objec"
  "t_type\020\026\022\"\n\036public_key_history_object_ty"
  "pe\020\027\022\036\n\032UNUSED_balance_object_type\020\030\022%\n!"
  "UNUSED_staked_balance_object_type\020\031\022%\n!U"
  "NUSED_producer_votes_object_type\020\032\022(\n$UN"
  "USED_producer_schedule_object_type\020\033\022!\n\035"
  "UNUSED_proxy_vote_object_type\020\034\022%\n!UNUSE"
  "D_scope_sequence_object_type\020\035\022\030\n\024table_"
  "id_object_type\020\036\022\037\n\033resource_limits_obje"
  "ct_type\020\037\022\036\n\032resource_usage_object_type\020"
  " \022%\n!resource_limits_state_object_type\020!"
  "\022&\n\"resource_limits_config_object_type\020\""
  "\022\037\n\033account_history_object_type\020#\022\036\n\032act"
  "ion_history_object_type\020$\022 \n\034reversible_"
  "block_object_type\020%\022\034\n\030signed_block_obje"
  "ct_type\020(\022\033\n\027block_state_object_type\020)*\217"
  "a\n\nmessage_id\022\033\n\026account_create_request\020"
  "\350\007\022\034\n\027account_create_response\020\351\007\022\032\n\025acco"
  "unt_guery_request\020\352\007\022\033\n\026account_query_re"
  "sponse\020\353\007\022\033\n\026account_update_request\020\354\007\022\034"
  "\n\027account_update_response\020\355\007\022\033\n\026account_"
  "remove_request\020\356\007\022\034\n\027account_remove_resp"
  "onse\020\357\007\022$\n\037account_sequence_create_reque"
  "st\020\360\007\022%\n account_sequence_create_respons"
  "e\020\361\007\022#\n\036account_sequence_query_request\020\362"
  "\007\022$\n\037account_sequence_query_response\020\363\007\022"
  "$\n\037account_sequence_update_request\020\364\007\022%\n"
  " account_sequence_update_response\020\365\007\022$\n\037"
  "account_sequence_remove_request\020\366\007\022%\n ac"
  "count_sequence_remove_response\020\367\007\022\036\n\031per"
  "mission_create_request\020\370\007\022\037\n\032permission_"
  "create_response\020\371\007\022\035\n\030permission_query_r"
  "equest\020\372\007\022\036\n\031permission_query_response\020\373"
  "\007\022\036\n\031permission_update_request\020\374\007\022\037\n\032per"
  "mission_update_response\020\375\007\022\036\n\031permission"
  "_remove_request\020\376\007\022\037\n\032permission_remove_"
  "response\020\377\007\022$\n\037permission_usage_create_r"
  "equest\020\200\010\022%\n permission_usage_create_res"
  "ponse\020\201\010\022#\n\036permission_usage_query_reque"
  "st\020\202\010\022$\n\037permission_usage_query_response"
  "\020\203\010\022$\n\037permission_usage_update_request\020\204"
  "\010\022%\n permission_usage_update_response\020\205\010"
  "\022$\n\037permission_usage_remove_request\020\206\010\022%"
  "\n permission_usage_remove_response\020\207\010\022#\n"
  "\036permission_link_create_request\020\210\010\022$\n\037pe"
  "rmission_link_create_response\020\211\010\022\"\n\035perm"
  "ission_link_query_request\020\212\010\022#\n\036permissi"
  "on_link_query_response\020\213\010\022#\n\036permission_"
  "link_update_request\020\214\010\022$\n\037permission_lin"
  "k_update_response\020\215\010\022#\n\036permission_link_"
  "remove_request\020\216\010\022$\n\037permission_link_rem"
  "ove_response\020\220\010\022\035\n\030key_value_create_requ"
  "est\020\221\010\022\036\n\031key_value_create_response\020\222\010\022\034"
  "\n\027key_value_query_request\020\223\010\022\035\n\030key_valu"
  "e_query_response\020\224\010\022\035\n\030key_value_update_"
  "request\020\225\010\022\036\n\031key_value_update_response\020"
  "\226\010\022\035\n\030key_value_remove_request\020\227\010\022\036\n\031key"
  "_value_remove_response\020\230\010\022\033\n\026index64_cre"
  "ate_request\020\231\010\022\034\n\027index64_create_respons"
  "e\020\232\010\022\032\n\025index64_query_request\020\233\010\022\033\n\026inde"
  "x64_query_response\020\234\010\022\033\n\026index64_update_"
  "request\020\235\010\022\034\n\027index64_update_response\020\236\010"
  "\022\033\n\026index64_remove_request\020\237\010\022\034\n\027index64"
  "_remove_response\020\240\010\022\034\n\027index128_create_r"
  "equest\020\241\010\022\035\n\030index128_create_response\020\242\010"
  "\022\033\n\026index128_query_request\020\244\010\022\034\n\027index12"
  "8_query_response\020\245\010\022\034\n\027index128_update_r"
  "equest\020\246\010\022\035\n\030index128_update_response\020\247\010"
  "\022\034\n\027index128_remove_request\020\250\010\022\035\n\030index1"
  "28_remove_response\020\251\010\022\034\n\027index256_create"
  "_request\020\252\010\022\035\n\030index256_create_response\020"
  "\253\010\022\033\n\026index256_query_request\020\254\010\022\034\n\027index"
  "256_query_response\020\255\010\022\034\n\027index256_update"
  "_request\020\256\010\022\035\n\030index256_update_response\020"
  "\257\010\022\034\n\027index256_remove_request\020\260\010\022\035\n\030inde"
  "x256_remove_response\020\261\010\022 \n\033index_double_"
  "create_request\020\262\010\022!\n\034index_double_create"
  "_response\020\263\010\022\037\n\032index_double_query_reque"
  "st\020\264\010\022 \n\033index_double_query_response\020\265\010\022"
  " \n\033index_double_update_request\020\266\010\022!\n\034ind"
  "ex_double_update_response\020\267\010\022 \n\033index_do"
  "uble_remove_request\020\270\010\022!\n\034index_double_r"
  "emove_response\020\271\010\022%\n index_long_double_c"
  "reate_request\020\272\010\022&\n!index_long_double_cr"
  "eate_response\020\273\010\022$\n\037index_long_double_qu"
  "ery_request\020\274\010\022%\n index_long_double_quer"
  "y_response\020\275\010\022%\n index_long_double_updat"
  "e_request\020\276\010\022&\n!index_long_double_update"
  "_response\020\277\010\022%\n index_long_double_remove"
  "_request\020\300\010\022&\n!index_long_double_remove_"
  "response\020\301\010\022#\n\036global_property_create_re"
  "quest\020\302\010\022$\n\037global_property_create_respo"
  "nse\020\303\010\022\"\n\035global_property_query_request\020"
  "\304\010\022#\n\036global_property_query_response\020\305\010\022"
  "#\n\036global_property_update_request\020\306\010\022$\n\037"
  "global_property_update_response\020\307\010\022#\n\036gl"
  "obal_property_remove_request\020\310\010\022$\n\037globa"
  "l_property_remove_response\020\311\010\022+\n&dynamic"
  "_global_property_create_request\020\312\010\022,\n\'dy"
  "namic_global_property_create_response\020\313\010"
  "\022*\n%dynamic_global_property_query_reques"
  "t\020\314\010\022+\n&dynamic_global_property_query_re"
  "sponse\020\315\010\022+\n&dynamic_global_property_upd"
  "ate_request\020\316\010\022,\n\'dynamic_global_propert"
  "y_update_response\020\317\010\022+\n&dynamic_global_p"
  "roperty_remove_request\020\320\010\022,\n\'dynamic_glo"
  "bal_property_remove_response\020\321\010\022!\n\034block"
  "_summary_create_request\020\322\010\022\"\n\035block_summ"
  "ary_create_response\020\323\010\022 \n\033block_summary_"
  "query_request\020\324\010\022!\n\034block_summary_query_"
  "response\020\325\010\022!\n\034block_summary_update_requ"
  "est\020\326\010\022\"\n\035block_summary_update_response\020"
  "\327\010\022!\n\034block_summary_remove_request\020\330\010\022\"\n"
  "\035block_summary_remove_response\020\331\010\022\037\n\032tra"
  "nsaction_create_request\020\332\010\022 \n\033transactio"
  "n_create_response\020\333\010\022\036\n\031transaction_quer"
  "y_request\020\334\010\022\037\n\032transaction_query_respon"
  "se\020\335\010\022\037\n\032transaction_update_request\020\336\010\022 "
  "\n\033transaction_update_response\020\337\010\022\037\n\032tran"
  "saction_remove_request\020\340\010\022 \n\033transaction"
  "_remove_response\020\341\010\022)\n$generated_transac"
  "tion_create_request\020\342\010\022*\n%generated_tran"
  "saction_create_response\020\343\010\022(\n#generated_"
  "transaction_query_request\020\344\010\022)\n$generate"
  "d_transaction_query_response\020\345\010\022)\n$gener"
  "ated_transaction_update_request\020\346\010\022*\n%ge"
  "nerated_transaction_update_response\020\347\010\022)"
  "\n$generated_transaction_remove_request\020\350"
  "\010\022*\n%generated_transaction_remove_respon"
  "se\020\351\010\022\034\n\027producer_create_request\020\352\010\022\035\n\030p"
  "roducer_create_response\020\353\010\022\033\n\026producer_q"
  "uery_request\020\354\010\022\034\n\027producer_query_respon"
  "se\020\355\010\022\034\n\027producer_update_request\020\356\010\022\035\n\030p"
  "roducer_update_response\020\357\010\022\034\n\027producer_r"
  "emove_request\020\360\010\022\035\n\030producer_remove_resp"
  "onse\020\361\010\022+\n&account_control_history_creat"
  "e_request\020\362\010\022,\n\'account_control_history_"
  "create_response\020\363\010\022*\n%account_control_hi"
  "story_query_request\020\364\010\022+\n&account_contro"
  "l_history_query_response\020\365\010\022+\n&account_c"
  "ontrol_history_update_request\020\366\010\022,\n\'acco"
  "unt_control_history_update_response\020\367\010\022+"
  "\n&account_control_history_remove_request"
  "\020\370\010\022,\n\'account_control_history_remove_re"
  "sponse\020\371\010\022&\n!public_key_history_create_r"
  "equest\020\372\010\022\'\n\"public_key_history_create_r"
  "esponse\020\373\010\022%\n public_key_history_query_r"
  "equest\020\374\010\022&\n!public_key_history_query_re"
  "sponse\020\375\010\022&\n!public_key_history_update_r"
  "equest\020\376\010\022\'\n\"public_key_history_update_r"
  "esponse\020\377\010\022&\n!public_key_history_remove_"
  "request\020\200\t\022\'\n\"public_key_history_remove_"
  "response\020\201\t\022\034\n\027table_id_create_request\020\202"
  "\t\022\035\n\030table_id_create_response\020\203\t\022\033\n\026tabl"
  "e_id_query_request\020\204\t\022\034\n\027table_id_query_"
  "response\020\205\t\022\034\n\027table_id_update_request\020\206"
  "\t\022\035\n\030table_id_update_response\020\207\t\022\034\n\027tabl"
  "e_id_remove_request\020\210\t\022\035\n\030table_id_remov"
  "e_response\020\211\t\022#\n\036resource_limits_create_"
  "request\020\212\t\022$\n\037resource_limits_create_res"
  "ponse\020\213\t\022\"\n\035resource_limits_query_reques"
  "t\020\214\t\022#\n\036resource_limits_query_response\020\215"
  "\t\022#\n\036resource_limits_update_request\020\216\t\022$"
  "\n\037resource_limits_update_response\020\217\t\022#\n\036"
  "resource_limits_remove_request\020\220\t\022$\n\037res"
  "ource_limits_remove_response\020\221\t\022\"\n\035resou"
  "rce_usage_create_request\020\222\t\022#\n\036resource_"
  "usage_create_response\020\223\t\022!\n\034resource_usa"
  "ge_query_request\020\224\t\022\"\n\035resource_usage_qu"
  "ery_response\020\225\t\022\"\n\035resource_usage_update"
  "_request\020\226\t\022#\n\036resource_usage_update_res"
  "ponse\020\227\t\022\"\n\035resource_usage_remove_reques"
  "t\020\230\t\022#\n\036resource_usage_remove_response\020\231"
  "\t\022)\n$resource_limits_state_create_reques"
  "t\020\232\t\022*\n%resource_limits_state_create_res"
  "ponse\020\233\t\022(\n#resource_limits_state_query_"
  "request\020\234\t\022)\n$resource_limits_state_quer"
  "y_response\020\235\t\022)\n$resource_limits_state_u"
  "pdate_request\020\236\t\022*\n%resource_limits_stat"
  "e_update_response\020\237\t\022)\n$resource_limits_"
  "state_remove_request\020\240\t\022*\n%resource_limi"
  "ts_state_remove_response\020\241\t\022*\n%resource_"
  "limits_config_create_request\020\242\t\022+\n&resou"
  "rce_limits_config_create_response\020\243\t\022)\n$"
  "resource_limits_config_query_request\020\244\t\022"
  "*\n%resource_limits_config_query_response"
  "\020\245\t\022*\n%resource_limits_config_update_req"
  "uest\020\246\t\022+\n&resource_limits_config_update"
  "_response\020\247\t\022*\n%resource_limits_config_r"
  "emove_request\020\250\t\022+\n&resource_limits_conf"
  "ig_remove_response\020\251\t\022#\n\036account_history"
  "_create_request\020\252\t\022$\n\037account_history_cr"
  "eate_response\020\253\t\022\"\n\035account_history_quer"
  "y_request\020\254\t\022#\n\036account_history_query_re"
  "sponse\020\255\t\022#\n\036account_history_update_requ"
  "est\020\256\t\022$\n\037account_history_update_respons"
  "e\020\257\t\022#\n\036account_history_remove_request\020\260"
  "\t\022$\n\037account_history_remove_response\020\261\t\022"
  "\"\n\035action_history_create_request\020\262\t\022#\n\036a"
  "ction_history_create_response\020\263\t\022!\n\034acti"
  "on_history_query_request\020\264\t\022\"\n\035action_hi"
  "story_query_response\020\265\t\022\"\n\035action_histor"
  "y_update_request\020\266\t\022#\n\036action_history_up"
  "date_response\020\267\t\022\"\n\035action_history_remov"
  "e_request\020\270\t\022#\n\036action_history_remove_re"
  "sponse\020\271\t\022$\n\037reversible_block_create_req"
  "uest\020\272\t\022%\n reversible_block_create_respo"
  "nse\020\273\t\022#\n\036reversible_block_query_request"
  "\020\274\t\022$\n\037reversible_block_query_response\020\275"
  "\t\022$\n\037reversible_block_update_request\020\276\t\022"
  "%\n reversible_block_update_response\020\277\t\022$"
  "\n\037reversible_block_remove_request\020\300\t\022%\n "
  "reversible_block_remove_response\020\301\t\022\031\n\024d"
  "b_store_i64_request\020\320\017\022\032\n\025db_store_i64_r"
  "esponse\020\321\017\022\032\n\025db_update_i64_request\020\322\017\022\033"
  "\n\026db_update_i64_response\020\323\017\022\032\n\025db_remove"
  "_i64_request\020\324\017\022\033\n\026db_remove_i64_respons"
  "e\020\325\017\022\027\n\022db_get_i64_request\020\326\017\022\030\n\023db_get_"
  "i64_response\020\327\017\022\030\n\023db_next_i64_request\020\330"
  "\017\022\031\n\024db_next_i64_response\020\331\017\022\034\n\027db_previ"
  "ous_i64_request\020\332\017\022\035\n\030db_previous_i64_re"
  "sponse\020\333\017\022\030\n\023db_find_i64_request\020\334\017\022\031\n\024d"
  "b_find_i64_response\020\335\017\022\036\n\031db_lowerbound_"
  "i64_request\020\336\017\022\037\n\032db_lowerbound_i64_resp"
  "onse\020\337\017\022\036\n\031db_upperbound_i64_request\020\340\017\022"
  "\037\n\032db_upperbound_i64_response\020\341\017\022\027\n\022db_e"
  "nd_i64_request\020\342\017\022\030\n\023db_end_i64_response"
  "\020\343\017\022\033\n\026db_idx64_store_request\020\344\017\022\034\n\027db_i"
  "dx64_store_response\020\345\017\022\034\n\027db_idx64_updat"
  "e_request\020\346\017\022\035\n\030db_idx64_update_response"
  "\020\347\017\022\034\n\027db_idx64_remove_request\020\350\017\022\035\n\030db_"
  "idx64_remove_response\020\351\017\022$\n\037db_idx64_fin"
  "d_secondary_request\020\352\017\022%\n db_idx64_find_"
  "secondary_response\020\353\017\022\"\n\035db_idx64_find_p"
  "rimary_request\020\354\017\022#\n\036db_idx64_find_prima"
  "ry_response\020\355\017\022 \n\033db_idx64_lowerbound_re"
  "quest\020\356\017\022!\n\034db_idx64_lowerbound_response"
  "\020\357\017\022 \n\033db_idx64_upperbound_request\020\360\017\022!\n"
  "\034db_idx64_upperbound_response\020\361\017\022\031\n\024db_i"
  "dx64_end_request\020\362\017\022\032\n\025db_idx64_end_resp"
  "onse\020\363\017\022\032\n\025db_idx64_next_request\020\364\017\022\033\n\026d"
  "b_idx64_next_response\020\365\017\022\036\n\031db_idx64_pre"
  "vious_request\020\366\017\022\037\n\032db_idx64_previous_re"
  "sponse\020\367\017\022\034\n\027db_idx128_store_request\020\370\017\022"
  "\035\n\030db_idx128_store_response\020\371\017\022\035\n\030db_idx"
  "128_update_request\020\372\017\022\036\n\031db_idx128_updat"
  "e_response\020\373\017\022\035\n\030db_idx128_remove_reques"
  "t\020\374\017\022\036\n\031db_idx128_remove_response\020\375\017\022%\n "
  "db_idx128_find_secondary_request\020\376\017\022&\n!d"
  "b_idx128_find_secondary_response\020\377\017\022#\n\036d"
  "b_idx128_find_primary_request\020\200\020\022$\n\037db_i"
  "dx128_find_primary_response\020\201\020\022!\n\034db_idx"
  "128_lowerbound_request\020\202\020\022\"\n\035db_idx128_l"
  "owerbound_response\020\203\020\022!\n\034db_idx128_upper"
  "bound_request\020\204\020\022\"\n\035db_idx128_upperbound"
  "_response\020\205\020\022\032\n\025db_idx128_end_request\020\206\020"
  "\022\033\n\026db_idx128_end_response\020\207\020\022\033\n\026db_idx1"
  "28_next_request\020\210\020\022\034\n\027db_idx128_next_res"
  "ponse\020\211\020\022\037\n\032db_idx128_previous_request\020\212"
  "\020\022 \n\033db_idx128_previous_response\020\213\020\022\034\n\027d"
  "b_idx256_store_request\020\214\020\022\035\n\030db_idx256_s"
  "tore_response\020\215\020\022\035\n\030db_idx256_update_req"
  "uest\020\216\020\022\036\n\031db_idx256_update_response\020\217\020\022"
  "\035\n\030db_idx256_remove_request\020\220\020\022\036\n\031db_idx"
  "256_remove_response\020\221\020\022%\n db_idx256_find"
  "_secondary_request\020\222\020\022&\n!db_idx256_find_"
  "secondary_response\020\223\020\022#\n\036db_idx256_find_"
  "primary_request\020\224\020\022$\n\037db_idx256_find_pri"
  "mary_response\020\225\020\022!\n\034db_idx256_lowerbound"
  "_request\020\226\020\022\"\n\035db_idx256_lowerbound_resp"
  "onse\020\227\020\022!\n\034db_idx256_upperbound_request\020"
  "\230\020\022\"\n\035db_idx256_upperbound_response\020\231\020\022\032"
  "\n\025db_idx256_end_request\020\232\020\022\033\n\026db_idx256_"
  "end_response\020\233\020\022\033\n\026db_idx256_next_reques"
  "t\020\234\020\022\034\n\027db_idx256_next_response\020\235\020\022\037\n\032db"
  "_idx256_previous_request\020\236\020\022 \n\033db_idx256"
  "_previous_response\020\237\020\022 \n\033db_idx_double_s"
  "tore_request\020\240\020\022!\n\034db_idx_double_store_r"
  "esponse\020\241\020\022!\n\034db_idx_double_update_reque"
  "st\020\242\020\022\"\n\035db_idx_double_update_response\020\243"
  "\020\022!\n\034db_idx_double_remove_request\020\244\020\022\"\n\035"
  "db_idx_double_remove_response\020\245\020\022)\n$db_i"
  "dx_double_find_secondary_request\020\246\020\022*\n%d"
  "b_idx_double_find_secondary_response\020\247\020\022"
  "\'\n\"db_idx_double_find_primary_request\020\250\020"
  "\022(\n#db_idx_double_find_primary_response\020"
  "\251\020\022%\n db_idx_double_lowerbound_request\020\252"
  "\020\022&\n!db_idx_double_lowerbound_response\020\253"
  "\020\022%\n db_idx_double_upperbound_request\020\254\020"
  "\022&\n!db_idx_double_upperbound_response\020\255\020"
  "\022\036\n\031db_idx_double_end_request\020\256\020\022\037\n\032db_i"
  "dx_double_end_response\020\257\020\022\037\n\032db_idx_doub"
  "le_next_request\020\260\020\022 \n\033db_idx_double_next"
  "_response\020\261\020\022#\n\036db_idx_double_previous_r"
  "equest\020\262\020\022$\n\037db_idx_double_previous_resp"
  "onse\020\263\020\022%\n db_idx_long_double_store_requ"
  "est\020\264\020\022&\n!db_idx_long_double_store_respo"
  "nse\020\265\020\022&\n!db_idx_long_double_update_requ"
  "est\020\266\020\022\'\n\"db_idx_long_double_update_resp"
  "onse\020\267\020\022&\n!db_idx_long_double_remove_req"
  "uest\020\270\020\022\'\n\"db_idx_long_double_remove_res"
  "ponse\020\271\020\022.\n)db_idx_long_double_find_seco"
  "ndary_request\020\272\020\022/\n*db_idx_long_double_f"
  "ind_secondary_response\020\273\020\022,\n\'db_idx_long"
  "_double_find_primary_request\020\274\020\022-\n(db_id"
  "x_long_double_find_primary_response\020\275\020\022*"
  "\n%db_idx_long_double_lowerbound_request\020"
  "\276\020\022+\n&db_idx_long_double_lowerbound_resp"
  "onse\020\277\020\022*\n%db_idx_long_double_upperbound"
  "_request\020\300\020\022+\n&db_idx_long_double_upperb"
  "ound_response\020\301\020\022#\n\036db_idx_long_double_e"
  "nd_request\020\302\020\022$\n\037db_idx_long_double_end_"
  "response\020\303\020\022$\n\037db_idx_long_double_next_r"
  "equest\020\304\020\022%\n db_idx_long_double_next_res"
  "ponse\020\305\020\022(\n#db_idx_long_double_previous_"
  "request\020\306\020\022)\n$db_idx_long_double_previou"
  "s_response\020\307\020\022#\n\036permission_level_check_"
  "request\020\270\027\022$\n\037permission_level_check_res"
  "ponse\020\271\027\022,\n\'check_transaction_authorizat"
  "ion_request\020\272\027\022-\n(check_transaction_auth"
  "orization_response\020\273\027\022+\n&check_permissio"
  "n_authorization_request\020\274\027\022,\n\'check_perm"
  "ission_authorization_response\020\275\027\022%\n get_"
  "permission_last_used_request\020\276\027\022&\n!get_p"
  "ermission_last_used_response\020\277\027\022&\n!get_a"
  "ccount_creation_time_request\020\300\027\022\'\n\"get_a"
  "ccount_creation_time_response\020\301\027"
,
  "message.proto", &assign_descriptors_table_message_2eproto, 19192,
};

void AddDescriptors_message_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_message_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = []() { AddDescriptors_message_2eproto(); return true; }();
namespace action_message {
const ::google::protobuf::EnumDescriptor* object_type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool object_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* message_id_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool message_id_IsValid(int value) {
  switch (value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2076:
    case 2077:
    case 2078:
    case 2079:
    case 2080:
    case 2081:
    case 2082:
    case 2083:
    case 2084:
    case 2085:
    case 2086:
    case 2087:
    case 2088:
    case 2089:
    case 2090:
    case 2091:
    case 2092:
    case 2093:
    case 2094:
    case 2095:
    case 2096:
    case 2097:
    case 2098:
    case 2099:
    case 2100:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2109:
    case 2110:
    case 2111:
    case 2112:
    case 2113:
    case 2114:
    case 2115:
    case 2116:
    case 2117:
    case 2118:
    case 2119:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void error::InitAsDefaultInstance() {
}
class error::HasBitSetters {
 public:
  static void set_has_code(error* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msg(error* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error::kCodeFieldNumber;
const int error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error::error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.error)
}
error::error(const error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:action_message.error)
}

void error::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_error_message_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
}

error::~error() {
  // @@protoc_insertion_point(destructor:action_message.error)
  SharedDtor();
}

void error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const error& error::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_error_message_2eproto.base);
  return *internal_default_instance();
}


void error::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* error::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<error*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_code(value);
        break;
      }
      // optional string msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("action_message.error.msg");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8Verify;
        ::std::string* str = msg->mutable_msg();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "action_message.error.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action_message.error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.error)
}

::google::protobuf::uint8* error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action_message.error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.error)
  return target;
}

size_t error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint32 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.error)
  GOOGLE_DCHECK_NE(&from, this);
  const error* source =
      ::google::protobuf::DynamicCastToGenerated<error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.error)
    MergeFrom(*source);
  }
}

void error::MergeFrom(const error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error::CopyFrom(const error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error::IsInitialized() const {
  return true;
}

void error::Swap(error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error::InternalSwap(error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata error::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void meta::InitAsDefaultInstance() {
}
class meta::HasBitSetters {
 public:
  static void set_has_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_method_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta::kIdFieldNumber;
const int meta::kServiceIdFieldNumber;
const int meta::kMethodIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta::meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.meta)
}
meta::meta(const meta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  // @@protoc_insertion_point(copy_constructor:action_message.meta)
}

void meta::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
}

meta::~meta() {
  // @@protoc_insertion_point(destructor:action_message.meta)
  SharedDtor();
}

void meta::SharedDtor() {
}

void meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const meta& meta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_meta_message_2eproto.base);
  return *internal_default_instance();
}


void meta::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* meta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<meta*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_id(value);
        break;
      }
      // optional uint32 service_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_service_id(value);
        break;
      }
      // optional uint32 method_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_method_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.meta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 method_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_method_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.meta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 service_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service_id(), output);
  }

  // optional uint32 method_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->method_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.meta)
}

::google::protobuf::uint8* meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 service_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_id(), target);
  }

  // optional uint32 method_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->method_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.meta)
  return target;
}

size_t meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.meta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 service_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 method_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->method_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.meta)
  GOOGLE_DCHECK_NE(&from, this);
  const meta* source =
      ::google::protobuf::DynamicCastToGenerated<meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.meta)
    MergeFrom(*source);
  }
}

void meta::MergeFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_id_ = from.method_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta::CopyFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta::IsInitialized() const {
  return true;
}

void meta::Swap(meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta::InternalSwap(meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(service_id_, other->service_id_);
  swap(method_id_, other->method_id_);
}

::google::protobuf::Metadata meta::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_store_i64::InitAsDefaultInstance() {
}
class db_store_i64::HasBitSetters {
 public:
  static void set_has_scope(db_store_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_store_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_store_i64* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_id(db_store_i64* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_buffer(db_store_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buffer_size(db_store_i64* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_store_i64::kScopeFieldNumber;
const int db_store_i64::kTableFieldNumber;
const int db_store_i64::kPayerFieldNumber;
const int db_store_i64::kIdFieldNumber;
const int db_store_i64::kBufferFieldNumber;
const int db_store_i64::kBufferSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_store_i64::db_store_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_store_i64)
}
db_store_i64::db_store_i64(const db_store_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&scope_, &from.scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_size_) -
    reinterpret_cast<char*>(&scope_)) + sizeof(buffer_size_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_store_i64)
}

void db_store_i64::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_store_i64_message_2eproto.base);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_size_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(buffer_size_));
}

db_store_i64::~db_store_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_store_i64)
  SharedDtor();
}

void db_store_i64::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_store_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_store_i64& db_store_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_store_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_store_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_store_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buffer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&scope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buffer_size_) -
        reinterpret_cast<char*>(&scope_)) + sizeof(buffer_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_store_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_store_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 payer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      // optional bytes buffer = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_buffer();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 buffer_size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_buffer_size(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_store_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_store_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 buffer_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_buffer_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_store_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_store_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_store_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_store_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scope(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->payer(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->buffer(), output);
  }

  // optional uint64 buffer_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->buffer_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_store_i64)
}

::google::protobuf::uint8* db_store_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_store_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scope(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->payer(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional bytes buffer = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->buffer(), target);
  }

  // optional uint64 buffer_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->buffer_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_store_i64)
  return target;
}

size_t db_store_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_store_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes buffer = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint64 scope = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 payer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 buffer_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_store_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_store_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_store_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_store_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_store_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_store_i64)
    MergeFrom(*source);
  }
}

void db_store_i64::MergeFrom(const db_store_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_store_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      buffer_size_ = from.buffer_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_store_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_store_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_store_i64::CopyFrom(const db_store_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_store_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_store_i64::IsInitialized() const {
  return true;
}

void db_store_i64::Swap(db_store_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_store_i64::InternalSwap(db_store_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_.Swap(&other->buffer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(payer_, other->payer_);
  swap(id_, other->id_);
  swap(buffer_size_, other->buffer_size_);
}

::google::protobuf::Metadata db_store_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_update_i64::InitAsDefaultInstance() {
}
class db_update_i64::HasBitSetters {
 public:
  static void set_has_itr(db_update_i64* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_payer(db_update_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_buffer(db_update_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buffer_size(db_update_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_update_i64::kItrFieldNumber;
const int db_update_i64::kPayerFieldNumber;
const int db_update_i64::kBufferFieldNumber;
const int db_update_i64::kBufferSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_update_i64::db_update_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_update_i64)
}
db_update_i64::db_update_i64(const db_update_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_update_i64)
}

void db_update_i64::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_update_i64_message_2eproto.base);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
}

db_update_i64::~db_update_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_update_i64)
  SharedDtor();
}

void db_update_i64::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_update_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_update_i64& db_update_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_update_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_update_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_update_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buffer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_update_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_update_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 payer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional bytes buffer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_buffer();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 buffer_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_buffer_size(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_update_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_update_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 buffer_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_buffer_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_update_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_update_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_update_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_update_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payer(), output);
  }

  // optional bytes buffer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->buffer(), output);
  }

  // optional uint64 buffer_size = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buffer_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_update_i64)
}

::google::protobuf::uint8* db_update_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_update_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payer(), target);
  }

  // optional bytes buffer = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->buffer(), target);
  }

  // optional uint64 buffer_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->buffer_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_update_i64)
  return target;
}

size_t db_update_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_update_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes buffer = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint64 payer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 buffer_size = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_update_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_update_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_update_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_update_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_update_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_update_i64)
    MergeFrom(*source);
  }
}

void db_update_i64::MergeFrom(const db_update_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_update_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000004u) {
      buffer_size_ = from.buffer_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_update_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_update_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_update_i64::CopyFrom(const db_update_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_update_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_update_i64::IsInitialized() const {
  return true;
}

void db_update_i64::Swap(db_update_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_update_i64::InternalSwap(db_update_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_.Swap(&other->buffer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payer_, other->payer_);
  swap(buffer_size_, other->buffer_size_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_update_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_remove_i64::InitAsDefaultInstance() {
}
class db_remove_i64::HasBitSetters {
 public:
  static void set_has_itr(db_remove_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_remove_i64::kItrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_remove_i64::db_remove_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_remove_i64)
}
db_remove_i64::db_remove_i64(const db_remove_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itr_ = from.itr_;
  // @@protoc_insertion_point(copy_constructor:action_message.db_remove_i64)
}

void db_remove_i64::SharedCtor() {
  itr_ = 0u;
}

db_remove_i64::~db_remove_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_remove_i64)
  SharedDtor();
}

void db_remove_i64::SharedDtor() {
}

void db_remove_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_remove_i64& db_remove_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_remove_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_remove_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_remove_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itr_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_remove_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_remove_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_remove_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_remove_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_remove_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_remove_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_remove_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_remove_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_remove_i64)
}

::google::protobuf::uint8* db_remove_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_remove_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_remove_i64)
  return target;
}

size_t db_remove_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_remove_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 itr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_remove_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_remove_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_remove_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_remove_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_remove_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_remove_i64)
    MergeFrom(*source);
  }
}

void db_remove_i64::MergeFrom(const db_remove_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_remove_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itr()) {
    set_itr(from.itr());
  }
}

void db_remove_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_remove_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_remove_i64::CopyFrom(const db_remove_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_remove_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_remove_i64::IsInitialized() const {
  return true;
}

void db_remove_i64::Swap(db_remove_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_remove_i64::InternalSwap(db_remove_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_remove_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_get_i64::InitAsDefaultInstance() {
}
class db_get_i64::HasBitSetters {
 public:
  static void set_has_itr(db_get_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_buffer(db_get_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_buffer_size(db_get_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_get_i64::kItrFieldNumber;
const int db_get_i64::kBufferFieldNumber;
const int db_get_i64::kBufferSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_get_i64::db_get_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_get_i64)
}
db_get_i64::db_get_i64(const db_get_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer()) {
    buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
  }
  ::memcpy(&buffer_size_, &from.buffer_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&buffer_size_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_get_i64)
}

void db_get_i64::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_get_i64_message_2eproto.base);
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&buffer_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&buffer_size_)) + sizeof(itr_));
}

db_get_i64::~db_get_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_get_i64)
  SharedDtor();
}

void db_get_i64::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_get_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_get_i64& db_get_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_get_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_get_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_get_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buffer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&buffer_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&buffer_size_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_get_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_get_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional bytes buffer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_buffer();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 buffer_size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_buffer_size(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_get_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_get_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes buffer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 buffer_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_buffer_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_get_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_get_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_get_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_get_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional bytes buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  // optional uint64 buffer_size = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buffer_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_get_i64)
}

::google::protobuf::uint8* db_get_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_get_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional bytes buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->buffer(), target);
  }

  // optional uint64 buffer_size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buffer_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_get_i64)
  return target;
}

size_t db_get_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_get_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes buffer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

    // optional uint64 buffer_size = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffer_size());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_get_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_get_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_get_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_get_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_get_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_get_i64)
    MergeFrom(*source);
  }
}

void db_get_i64::MergeFrom(const db_get_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_get_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_size_ = from.buffer_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_get_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_get_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_get_i64::CopyFrom(const db_get_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_get_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_get_i64::IsInitialized() const {
  return true;
}

void db_get_i64::Swap(db_get_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_get_i64::InternalSwap(db_get_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_.Swap(&other->buffer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buffer_size_, other->buffer_size_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_get_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_next_64::InitAsDefaultInstance() {
}
class db_next_64::HasBitSetters {
 public:
  static void set_has_itr(db_next_64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_next_64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_next_64::kItrFieldNumber;
const int db_next_64::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_next_64::db_next_64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_next_64)
}
db_next_64::db_next_64(const db_next_64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_next_64)
}

void db_next_64::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_next_64::~db_next_64() {
  // @@protoc_insertion_point(destructor:action_message.db_next_64)
  SharedDtor();
}

void db_next_64::SharedDtor() {
}

void db_next_64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_next_64& db_next_64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_next_64_message_2eproto.base);
  return *internal_default_instance();
}


void db_next_64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_next_64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_next_64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_next_64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_next_64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_next_64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_next_64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_next_64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_next_64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_next_64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_next_64)
}

::google::protobuf::uint8* db_next_64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_next_64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_next_64)
  return target;
}

size_t db_next_64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_next_64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_next_64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_next_64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_next_64* source =
      ::google::protobuf::DynamicCastToGenerated<db_next_64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_next_64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_next_64)
    MergeFrom(*source);
  }
}

void db_next_64::MergeFrom(const db_next_64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_next_64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_next_64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_next_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_next_64::CopyFrom(const db_next_64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_next_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_next_64::IsInitialized() const {
  return true;
}

void db_next_64::Swap(db_next_64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_next_64::InternalSwap(db_next_64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_next_64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_previous_i64::InitAsDefaultInstance() {
}
class db_previous_i64::HasBitSetters {
 public:
  static void set_has_itr(db_previous_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_previous_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_previous_i64::kItrFieldNumber;
const int db_previous_i64::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_previous_i64::db_previous_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_previous_i64)
}
db_previous_i64::db_previous_i64(const db_previous_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_previous_i64)
}

void db_previous_i64::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_previous_i64::~db_previous_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_previous_i64)
  SharedDtor();
}

void db_previous_i64::SharedDtor() {
}

void db_previous_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_previous_i64& db_previous_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_previous_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_previous_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_previous_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_previous_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_previous_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_previous_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_previous_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_previous_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_previous_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_previous_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_previous_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_previous_i64)
}

::google::protobuf::uint8* db_previous_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_previous_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_previous_i64)
  return target;
}

size_t db_previous_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_previous_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_previous_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_previous_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_previous_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_previous_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_previous_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_previous_i64)
    MergeFrom(*source);
  }
}

void db_previous_i64::MergeFrom(const db_previous_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_previous_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_previous_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_previous_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_previous_i64::CopyFrom(const db_previous_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_previous_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_previous_i64::IsInitialized() const {
  return true;
}

void db_previous_i64::Swap(db_previous_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_previous_i64::InternalSwap(db_previous_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_previous_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_find_i64::InitAsDefaultInstance() {
}
class db_find_i64::HasBitSetters {
 public:
  static void set_has_code(db_find_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_find_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_find_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_id(db_find_i64* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_find_i64::kCodeFieldNumber;
const int db_find_i64::kScopeFieldNumber;
const int db_find_i64::kTableFieldNumber;
const int db_find_i64::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_find_i64::db_find_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_find_i64)
}
db_find_i64::db_find_i64(const db_find_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_find_i64)
}

void db_find_i64::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&code_)) + sizeof(id_));
}

db_find_i64::~db_find_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_find_i64)
  SharedDtor();
}

void db_find_i64::SharedDtor() {
}

void db_find_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_find_i64& db_find_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_find_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_find_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_find_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&code_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_find_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_find_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_find_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_find_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_find_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_find_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_find_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_find_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_find_i64)
}

::google::protobuf::uint8* db_find_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_find_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_find_i64)
  return target;
}

size_t db_find_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_find_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_find_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_find_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_find_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_find_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_find_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_find_i64)
    MergeFrom(*source);
  }
}

void db_find_i64::MergeFrom(const db_find_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_find_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_find_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_find_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_find_i64::CopyFrom(const db_find_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_find_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_find_i64::IsInitialized() const {
  return true;
}

void db_find_i64::Swap(db_find_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_find_i64::InternalSwap(db_find_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_find_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_lowerbound_i64::InitAsDefaultInstance() {
}
class db_lowerbound_i64::HasBitSetters {
 public:
  static void set_has_code(db_lowerbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_lowerbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_lowerbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_id(db_lowerbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_lowerbound_i64::kCodeFieldNumber;
const int db_lowerbound_i64::kScopeFieldNumber;
const int db_lowerbound_i64::kTableFieldNumber;
const int db_lowerbound_i64::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_lowerbound_i64::db_lowerbound_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_lowerbound_i64)
}
db_lowerbound_i64::db_lowerbound_i64(const db_lowerbound_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_lowerbound_i64)
}

void db_lowerbound_i64::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&code_)) + sizeof(id_));
}

db_lowerbound_i64::~db_lowerbound_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_lowerbound_i64)
  SharedDtor();
}

void db_lowerbound_i64::SharedDtor() {
}

void db_lowerbound_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_lowerbound_i64& db_lowerbound_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_lowerbound_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_lowerbound_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_lowerbound_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&code_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_lowerbound_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_lowerbound_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_lowerbound_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_lowerbound_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_lowerbound_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_lowerbound_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_lowerbound_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_lowerbound_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_lowerbound_i64)
}

::google::protobuf::uint8* db_lowerbound_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_lowerbound_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_lowerbound_i64)
  return target;
}

size_t db_lowerbound_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_lowerbound_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_lowerbound_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_lowerbound_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_lowerbound_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_lowerbound_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_lowerbound_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_lowerbound_i64)
    MergeFrom(*source);
  }
}

void db_lowerbound_i64::MergeFrom(const db_lowerbound_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_lowerbound_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_lowerbound_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_lowerbound_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_lowerbound_i64::CopyFrom(const db_lowerbound_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_lowerbound_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_lowerbound_i64::IsInitialized() const {
  return true;
}

void db_lowerbound_i64::Swap(db_lowerbound_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_lowerbound_i64::InternalSwap(db_lowerbound_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_lowerbound_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_upperbound_i64::InitAsDefaultInstance() {
}
class db_upperbound_i64::HasBitSetters {
 public:
  static void set_has_code(db_upperbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_upperbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_upperbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_id(db_upperbound_i64* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_upperbound_i64::kCodeFieldNumber;
const int db_upperbound_i64::kScopeFieldNumber;
const int db_upperbound_i64::kTableFieldNumber;
const int db_upperbound_i64::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_upperbound_i64::db_upperbound_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_upperbound_i64)
}
db_upperbound_i64::db_upperbound_i64(const db_upperbound_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_upperbound_i64)
}

void db_upperbound_i64::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&code_)) + sizeof(id_));
}

db_upperbound_i64::~db_upperbound_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_upperbound_i64)
  SharedDtor();
}

void db_upperbound_i64::SharedDtor() {
}

void db_upperbound_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_upperbound_i64& db_upperbound_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_upperbound_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_upperbound_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_upperbound_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&code_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_upperbound_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_upperbound_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_upperbound_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_upperbound_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_upperbound_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_upperbound_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_upperbound_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_upperbound_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_upperbound_i64)
}

::google::protobuf::uint8* db_upperbound_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_upperbound_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_upperbound_i64)
  return target;
}

size_t db_upperbound_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_upperbound_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_upperbound_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_upperbound_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_upperbound_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_upperbound_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_upperbound_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_upperbound_i64)
    MergeFrom(*source);
  }
}

void db_upperbound_i64::MergeFrom(const db_upperbound_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_upperbound_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_upperbound_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_upperbound_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_upperbound_i64::CopyFrom(const db_upperbound_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_upperbound_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_upperbound_i64::IsInitialized() const {
  return true;
}

void db_upperbound_i64::Swap(db_upperbound_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_upperbound_i64::InternalSwap(db_upperbound_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_upperbound_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_end_i64::InitAsDefaultInstance() {
}
class db_end_i64::HasBitSetters {
 public:
  static void set_has_code(db_end_i64* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_table(db_end_i64* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_end_i64* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_end_i64::kCodeFieldNumber;
const int db_end_i64::kTableFieldNumber;
const int db_end_i64::kScopeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_end_i64::db_end_i64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_end_i64)
}
db_end_i64::db_end_i64(const db_end_i64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&scope_) -
    reinterpret_cast<char*>(&code_)) + sizeof(scope_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_end_i64)
}

void db_end_i64::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scope_) -
      reinterpret_cast<char*>(&code_)) + sizeof(scope_));
}

db_end_i64::~db_end_i64() {
  // @@protoc_insertion_point(destructor:action_message.db_end_i64)
  SharedDtor();
}

void db_end_i64::SharedDtor() {
}

void db_end_i64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_end_i64& db_end_i64::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_end_i64_message_2eproto.base);
  return *internal_default_instance();
}


void db_end_i64::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_end_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scope_) -
        reinterpret_cast<char*>(&code_)) + sizeof(scope_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_end_i64::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_end_i64*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 scope = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_end_i64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_end_i64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_end_i64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_end_i64)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_end_i64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_end_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 scope = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->scope(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_end_i64)
}

::google::protobuf::uint8* db_end_i64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_end_i64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 scope = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->scope(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_end_i64)
  return target;
}

size_t db_end_i64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_end_i64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 scope = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_end_i64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_end_i64)
  GOOGLE_DCHECK_NE(&from, this);
  const db_end_i64* source =
      ::google::protobuf::DynamicCastToGenerated<db_end_i64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_end_i64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_end_i64)
    MergeFrom(*source);
  }
}

void db_end_i64::MergeFrom(const db_end_i64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_end_i64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_end_i64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_end_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_end_i64::CopyFrom(const db_end_i64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_end_i64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_end_i64::IsInitialized() const {
  return true;
}

void db_end_i64::Swap(db_end_i64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_end_i64::InternalSwap(db_end_i64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(table_, other->table_);
  swap(scope_, other->scope_);
}

::google::protobuf::Metadata db_end_i64::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_store::InitAsDefaultInstance() {
}
class db_idx64_store::HasBitSetters {
 public:
  static void set_has_scope(db_idx64_store* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_table(db_idx64_store* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_payer(db_idx64_store* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_id(db_idx64_store* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx64_store* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_store::kScopeFieldNumber;
const int db_idx64_store::kTableFieldNumber;
const int db_idx64_store::kPayerFieldNumber;
const int db_idx64_store::kIdFieldNumber;
const int db_idx64_store::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_store::db_idx64_store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_store)
}
db_idx64_store::db_idx64_store(const db_idx64_store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scope_, &from.scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&secondary_) -
    reinterpret_cast<char*>(&scope_)) + sizeof(secondary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_store)
}

void db_idx64_store::SharedCtor() {
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(secondary_));
}

db_idx64_store::~db_idx64_store() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_store)
  SharedDtor();
}

void db_idx64_store::SharedDtor() {
}

void db_idx64_store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_store& db_idx64_store::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_store_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_store::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&scope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secondary_) -
        reinterpret_cast<char*>(&scope_)) + sizeof(secondary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_store::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_store*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 payer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      // optional uint64 secondary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_secondary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_store)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 secondary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_secondary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_store)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scope(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->payer(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional uint64 secondary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_store)
}

::google::protobuf::uint8* db_idx64_store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scope(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->payer(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional uint64 secondary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_store)
  return target;
}

size_t db_idx64_store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 scope = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 payer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 secondary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->secondary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_store)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_store* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_store)
    MergeFrom(*source);
  }
}

void db_idx64_store::MergeFrom(const db_idx64_store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000002u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000004u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      secondary_ = from.secondary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_store::CopyFrom(const db_idx64_store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_store::IsInitialized() const {
  return true;
}

void db_idx64_store::Swap(db_idx64_store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_store::InternalSwap(db_idx64_store* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(payer_, other->payer_);
  swap(id_, other->id_);
  swap(secondary_, other->secondary_);
}

::google::protobuf::Metadata db_idx64_store::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_update::InitAsDefaultInstance() {
}
class db_idx64_update::HasBitSetters {
 public:
  static void set_has_itr(db_idx64_update* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx64_update* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_secondary(db_idx64_update* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_update::kItrFieldNumber;
const int db_idx64_update::kPayerFieldNumber;
const int db_idx64_update::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_update::db_idx64_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_update)
}
db_idx64_update::db_idx64_update(const db_idx64_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_update)
}

void db_idx64_update::SharedCtor() {
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
}

db_idx64_update::~db_idx64_update() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_update)
  SharedDtor();
}

void db_idx64_update::SharedDtor() {
}

void db_idx64_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_update& db_idx64_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_update_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_update::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_update*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 payer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 secondary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_secondary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 secondary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_secondary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payer(), output);
  }

  // optional uint64 secondary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_update)
}

::google::protobuf::uint8* db_idx64_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payer(), target);
  }

  // optional uint64 secondary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_update)
  return target;
}

size_t db_idx64_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 payer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 secondary = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->secondary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_update)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_update* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_update)
    MergeFrom(*source);
  }
}

void db_idx64_update::MergeFrom(const db_idx64_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000002u) {
      secondary_ = from.secondary_;
    }
    if (cached_has_bits & 0x00000004u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_update::CopyFrom(const db_idx64_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_update::IsInitialized() const {
  return true;
}

void db_idx64_update::Swap(db_idx64_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_update::InternalSwap(db_idx64_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(payer_, other->payer_);
  swap(secondary_, other->secondary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx64_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_remove::InitAsDefaultInstance() {
}
class db_idx64_remove::HasBitSetters {
 public:
  static void set_has_itr(db_idx64_remove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_remove::kItrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_remove::db_idx64_remove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_remove)
}
db_idx64_remove::db_idx64_remove(const db_idx64_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itr_ = from.itr_;
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_remove)
}

void db_idx64_remove::SharedCtor() {
  itr_ = 0u;
}

db_idx64_remove::~db_idx64_remove() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_remove)
  SharedDtor();
}

void db_idx64_remove::SharedDtor() {
}

void db_idx64_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_remove& db_idx64_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_remove_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itr_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_remove*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_remove)
}

::google::protobuf::uint8* db_idx64_remove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_remove)
  return target;
}

size_t db_idx64_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 itr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_remove)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_remove* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_remove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_remove)
    MergeFrom(*source);
  }
}

void db_idx64_remove::MergeFrom(const db_idx64_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itr()) {
    set_itr(from.itr());
  }
}

void db_idx64_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_remove::CopyFrom(const db_idx64_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_remove::IsInitialized() const {
  return true;
}

void db_idx64_remove::Swap(db_idx64_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_remove::InternalSwap(db_idx64_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx64_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_find_secondary::InitAsDefaultInstance() {
}
class db_idx64_find_secondary::HasBitSetters {
 public:
  static void set_has_code(db_idx64_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx64_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx64_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_secondary(db_idx64_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_primary(db_idx64_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_find_secondary::kCodeFieldNumber;
const int db_idx64_find_secondary::kScopeFieldNumber;
const int db_idx64_find_secondary::kTableFieldNumber;
const int db_idx64_find_secondary::kSecondaryFieldNumber;
const int db_idx64_find_secondary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_find_secondary::db_idx64_find_secondary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_find_secondary)
}
db_idx64_find_secondary::db_idx64_find_secondary(const db_idx64_find_secondary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_find_secondary)
}

void db_idx64_find_secondary::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx64_find_secondary::~db_idx64_find_secondary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_find_secondary)
  SharedDtor();
}

void db_idx64_find_secondary::SharedDtor() {
}

void db_idx64_find_secondary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_find_secondary& db_idx64_find_secondary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_find_secondary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_find_secondary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_find_secondary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_find_secondary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_secondary(value);
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_find_secondary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_find_secondary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_secondary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_find_secondary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_find_secondary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_find_secondary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_find_secondary)
}

::google::protobuf::uint8* db_idx64_find_secondary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_find_secondary)
  return target;
}

size_t db_idx64_find_secondary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_find_secondary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 secondary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->secondary());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_find_secondary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_find_secondary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_find_secondary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_find_secondary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_find_secondary)
    MergeFrom(*source);
  }
}

void db_idx64_find_secondary::MergeFrom(const db_idx64_find_secondary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      secondary_ = from.secondary_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_find_secondary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_find_secondary::CopyFrom(const db_idx64_find_secondary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_find_secondary::IsInitialized() const {
  return true;
}

void db_idx64_find_secondary::Swap(db_idx64_find_secondary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_find_secondary::InternalSwap(db_idx64_find_secondary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(secondary_, other->secondary_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx64_find_secondary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_find_primary::InitAsDefaultInstance() {
}
class db_idx64_find_primary::HasBitSetters {
 public:
  static void set_has_code(db_idx64_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx64_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx64_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_secondary(db_idx64_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_primary(db_idx64_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_find_primary::kCodeFieldNumber;
const int db_idx64_find_primary::kScopeFieldNumber;
const int db_idx64_find_primary::kTableFieldNumber;
const int db_idx64_find_primary::kSecondaryFieldNumber;
const int db_idx64_find_primary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_find_primary::db_idx64_find_primary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_find_primary)
}
db_idx64_find_primary::db_idx64_find_primary(const db_idx64_find_primary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_find_primary)
}

void db_idx64_find_primary::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx64_find_primary::~db_idx64_find_primary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_find_primary)
  SharedDtor();
}

void db_idx64_find_primary::SharedDtor() {
}

void db_idx64_find_primary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_find_primary& db_idx64_find_primary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_find_primary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_find_primary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_find_primary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_find_primary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_secondary(value);
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_find_primary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_find_primary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_secondary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_find_primary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_find_primary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_find_primary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_find_primary)
}

::google::protobuf::uint8* db_idx64_find_primary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_find_primary)
  return target;
}

size_t db_idx64_find_primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_find_primary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 secondary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->secondary());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_find_primary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_find_primary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_find_primary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_find_primary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_find_primary)
    MergeFrom(*source);
  }
}

void db_idx64_find_primary::MergeFrom(const db_idx64_find_primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      secondary_ = from.secondary_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_find_primary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_find_primary::CopyFrom(const db_idx64_find_primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_find_primary::IsInitialized() const {
  return true;
}

void db_idx64_find_primary::Swap(db_idx64_find_primary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_find_primary::InternalSwap(db_idx64_find_primary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(secondary_, other->secondary_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx64_find_primary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_lowerbound::InitAsDefaultInstance() {
}
class db_idx64_lowerbound::HasBitSetters {
 public:
  static void set_has_code(db_idx64_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx64_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx64_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_secondary(db_idx64_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_primary(db_idx64_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_lowerbound::kCodeFieldNumber;
const int db_idx64_lowerbound::kScopeFieldNumber;
const int db_idx64_lowerbound::kTableFieldNumber;
const int db_idx64_lowerbound::kSecondaryFieldNumber;
const int db_idx64_lowerbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_lowerbound::db_idx64_lowerbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_lowerbound)
}
db_idx64_lowerbound::db_idx64_lowerbound(const db_idx64_lowerbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_lowerbound)
}

void db_idx64_lowerbound::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx64_lowerbound::~db_idx64_lowerbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_lowerbound)
  SharedDtor();
}

void db_idx64_lowerbound::SharedDtor() {
}

void db_idx64_lowerbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_lowerbound& db_idx64_lowerbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_lowerbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_lowerbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_lowerbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_lowerbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_secondary(value);
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_lowerbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_lowerbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_secondary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_lowerbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_lowerbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_lowerbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_lowerbound)
}

::google::protobuf::uint8* db_idx64_lowerbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_lowerbound)
  return target;
}

size_t db_idx64_lowerbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_lowerbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 secondary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->secondary());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_lowerbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_lowerbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_lowerbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_lowerbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_lowerbound)
    MergeFrom(*source);
  }
}

void db_idx64_lowerbound::MergeFrom(const db_idx64_lowerbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      secondary_ = from.secondary_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_lowerbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_lowerbound::CopyFrom(const db_idx64_lowerbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_lowerbound::IsInitialized() const {
  return true;
}

void db_idx64_lowerbound::Swap(db_idx64_lowerbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_lowerbound::InternalSwap(db_idx64_lowerbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(secondary_, other->secondary_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx64_lowerbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_upperbound::InitAsDefaultInstance() {
}
class db_idx64_upperbound::HasBitSetters {
 public:
  static void set_has_code(db_idx64_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx64_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx64_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_secondary(db_idx64_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_primary(db_idx64_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_upperbound::kCodeFieldNumber;
const int db_idx64_upperbound::kScopeFieldNumber;
const int db_idx64_upperbound::kTableFieldNumber;
const int db_idx64_upperbound::kSecondaryFieldNumber;
const int db_idx64_upperbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_upperbound::db_idx64_upperbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_upperbound)
}
db_idx64_upperbound::db_idx64_upperbound(const db_idx64_upperbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_upperbound)
}

void db_idx64_upperbound::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx64_upperbound::~db_idx64_upperbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_upperbound)
  SharedDtor();
}

void db_idx64_upperbound::SharedDtor() {
}

void db_idx64_upperbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_upperbound& db_idx64_upperbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_upperbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_upperbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_upperbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_upperbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_secondary(value);
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_upperbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_upperbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_secondary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_upperbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_upperbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_upperbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_upperbound)
}

::google::protobuf::uint8* db_idx64_upperbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional uint64 secondary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_upperbound)
  return target;
}

size_t db_idx64_upperbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_upperbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 secondary = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->secondary());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_upperbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_upperbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_upperbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_upperbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_upperbound)
    MergeFrom(*source);
  }
}

void db_idx64_upperbound::MergeFrom(const db_idx64_upperbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      secondary_ = from.secondary_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_upperbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_upperbound::CopyFrom(const db_idx64_upperbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_upperbound::IsInitialized() const {
  return true;
}

void db_idx64_upperbound::Swap(db_idx64_upperbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_upperbound::InternalSwap(db_idx64_upperbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(secondary_, other->secondary_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx64_upperbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_end::InitAsDefaultInstance() {
}
class db_idx64_end::HasBitSetters {
 public:
  static void set_has_code(db_idx64_end* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx64_end* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx64_end* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_end::kCodeFieldNumber;
const int db_idx64_end::kScopeFieldNumber;
const int db_idx64_end::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_end::db_idx64_end()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_end)
}
db_idx64_end::db_idx64_end(const db_idx64_end& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&code_)) + sizeof(table_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_end)
}

void db_idx64_end::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&code_)) + sizeof(table_));
}

db_idx64_end::~db_idx64_end() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_end)
  SharedDtor();
}

void db_idx64_end::SharedDtor() {
}

void db_idx64_end::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_end& db_idx64_end::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_end_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_end::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_) -
        reinterpret_cast<char*>(&code_)) + sizeof(table_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_end::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_end*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_end)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_end)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_end)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_end)
}

::google::protobuf::uint8* db_idx64_end::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_end)
  return target;
}

size_t db_idx64_end::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_end)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_end::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_end)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_end* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_end>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_end)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_end)
    MergeFrom(*source);
  }
}

void db_idx64_end::MergeFrom(const db_idx64_end& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_end)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_end::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_end::CopyFrom(const db_idx64_end& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_end::IsInitialized() const {
  return true;
}

void db_idx64_end::Swap(db_idx64_end* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_end::InternalSwap(db_idx64_end* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata db_idx64_end::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_next::InitAsDefaultInstance() {
}
class db_idx64_next::HasBitSetters {
 public:
  static void set_has_itr(db_idx64_next* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx64_next* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_next::kItrFieldNumber;
const int db_idx64_next::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_next::db_idx64_next()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_next)
}
db_idx64_next::db_idx64_next(const db_idx64_next& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_next)
}

void db_idx64_next::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx64_next::~db_idx64_next() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_next)
  SharedDtor();
}

void db_idx64_next::SharedDtor() {
}

void db_idx64_next::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_next& db_idx64_next::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_next_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_next::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_next::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_next*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_next::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_next)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_next)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_next)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_next::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_next)
}

::google::protobuf::uint8* db_idx64_next::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_next)
  return target;
}

size_t db_idx64_next::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_next)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_next::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_next)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_next* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_next>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_next)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_next)
    MergeFrom(*source);
  }
}

void db_idx64_next::MergeFrom(const db_idx64_next& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_next)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_next::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_next::CopyFrom(const db_idx64_next& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_next::IsInitialized() const {
  return true;
}

void db_idx64_next::Swap(db_idx64_next* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_next::InternalSwap(db_idx64_next* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx64_next::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx64_previous::InitAsDefaultInstance() {
}
class db_idx64_previous::HasBitSetters {
 public:
  static void set_has_itr(db_idx64_previous* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx64_previous* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx64_previous::kItrFieldNumber;
const int db_idx64_previous::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx64_previous::db_idx64_previous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx64_previous)
}
db_idx64_previous::db_idx64_previous(const db_idx64_previous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx64_previous)
}

void db_idx64_previous::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx64_previous::~db_idx64_previous() {
  // @@protoc_insertion_point(destructor:action_message.db_idx64_previous)
  SharedDtor();
}

void db_idx64_previous::SharedDtor() {
}

void db_idx64_previous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx64_previous& db_idx64_previous::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx64_previous_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx64_previous::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx64_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx64_previous::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx64_previous*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx64_previous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx64_previous)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx64_previous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx64_previous)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx64_previous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx64_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx64_previous)
}

::google::protobuf::uint8* db_idx64_previous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx64_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx64_previous)
  return target;
}

size_t db_idx64_previous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx64_previous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx64_previous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx64_previous)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx64_previous* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx64_previous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx64_previous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx64_previous)
    MergeFrom(*source);
  }
}

void db_idx64_previous::MergeFrom(const db_idx64_previous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx64_previous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx64_previous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx64_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx64_previous::CopyFrom(const db_idx64_previous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx64_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx64_previous::IsInitialized() const {
  return true;
}

void db_idx64_previous::Swap(db_idx64_previous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx64_previous::InternalSwap(db_idx64_previous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx64_previous::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_store::InitAsDefaultInstance() {
}
class db_idx128_store::HasBitSetters {
 public:
  static void set_has_scope(db_idx128_store* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx128_store* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx128_store* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_id(db_idx128_store* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_secondary(db_idx128_store* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_store::kScopeFieldNumber;
const int db_idx128_store::kTableFieldNumber;
const int db_idx128_store::kPayerFieldNumber;
const int db_idx128_store::kIdFieldNumber;
const int db_idx128_store::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_store::db_idx128_store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_store)
}
db_idx128_store::db_idx128_store(const db_idx128_store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&scope_, &from.scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&scope_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_store)
}

void db_idx128_store::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx128_store_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(id_));
}

db_idx128_store::~db_idx128_store() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_store)
  SharedDtor();
}

void db_idx128_store::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx128_store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_store& db_idx128_store::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_store_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_store::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&scope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&scope_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_store::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_store*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 payer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      // optional bytes secondary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_store)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_store)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scope(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->payer(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional bytes secondary = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_store)
}

::google::protobuf::uint8* db_idx128_store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scope(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->payer(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional bytes secondary = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_store)
  return target;
}

size_t db_idx128_store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 scope = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 payer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_store)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_store* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_store)
    MergeFrom(*source);
  }
}

void db_idx128_store::MergeFrom(const db_idx128_store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_store::CopyFrom(const db_idx128_store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_store::IsInitialized() const {
  return true;
}

void db_idx128_store::Swap(db_idx128_store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_store::InternalSwap(db_idx128_store* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(payer_, other->payer_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_idx128_store::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_update::InitAsDefaultInstance() {
}
class db_idx128_update::HasBitSetters {
 public:
  static void set_has_itr(db_idx128_update* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx128_update* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_secondary(db_idx128_update* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_update::kItrFieldNumber;
const int db_idx128_update::kPayerFieldNumber;
const int db_idx128_update::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_update::db_idx128_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_update)
}
db_idx128_update::db_idx128_update(const db_idx128_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_update)
}

void db_idx128_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx128_update_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
}

db_idx128_update::~db_idx128_update() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_update)
  SharedDtor();
}

void db_idx128_update::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx128_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_update& db_idx128_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_update_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_update::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_update*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 payer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional bytes secondary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payer(), output);
  }

  // optional bytes secondary = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_update)
}

::google::protobuf::uint8* db_idx128_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payer(), target);
  }

  // optional bytes secondary = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_update)
  return target;
}

size_t db_idx128_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes secondary = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 payer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_update)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_update* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_update)
    MergeFrom(*source);
  }
}

void db_idx128_update::MergeFrom(const db_idx128_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000004u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_update::CopyFrom(const db_idx128_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_update::IsInitialized() const {
  return true;
}

void db_idx128_update::Swap(db_idx128_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_update::InternalSwap(db_idx128_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payer_, other->payer_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx128_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_remove::InitAsDefaultInstance() {
}
class db_idx128_remove::HasBitSetters {
 public:
  static void set_has_itr(db_idx128_remove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_remove::kItrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_remove::db_idx128_remove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_remove)
}
db_idx128_remove::db_idx128_remove(const db_idx128_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itr_ = from.itr_;
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_remove)
}

void db_idx128_remove::SharedCtor() {
  itr_ = 0u;
}

db_idx128_remove::~db_idx128_remove() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_remove)
  SharedDtor();
}

void db_idx128_remove::SharedDtor() {
}

void db_idx128_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_remove& db_idx128_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_remove_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itr_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_remove*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_remove)
}

::google::protobuf::uint8* db_idx128_remove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_remove)
  return target;
}

size_t db_idx128_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 itr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_remove)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_remove* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_remove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_remove)
    MergeFrom(*source);
  }
}

void db_idx128_remove::MergeFrom(const db_idx128_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itr()) {
    set_itr(from.itr());
  }
}

void db_idx128_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_remove::CopyFrom(const db_idx128_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_remove::IsInitialized() const {
  return true;
}

void db_idx128_remove::Swap(db_idx128_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_remove::InternalSwap(db_idx128_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx128_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_find_secondary::InitAsDefaultInstance() {
}
class db_idx128_find_secondary::HasBitSetters {
 public:
  static void set_has_code(db_idx128_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx128_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx128_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx128_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx128_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_find_secondary::kCodeFieldNumber;
const int db_idx128_find_secondary::kScopeFieldNumber;
const int db_idx128_find_secondary::kTableFieldNumber;
const int db_idx128_find_secondary::kSecondaryFieldNumber;
const int db_idx128_find_secondary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_find_secondary::db_idx128_find_secondary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_find_secondary)
}
db_idx128_find_secondary::db_idx128_find_secondary(const db_idx128_find_secondary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_find_secondary)
}

void db_idx128_find_secondary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx128_find_secondary_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx128_find_secondary::~db_idx128_find_secondary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_find_secondary)
  SharedDtor();
}

void db_idx128_find_secondary::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx128_find_secondary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_find_secondary& db_idx128_find_secondary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_find_secondary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_find_secondary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_find_secondary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_find_secondary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_find_secondary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_find_secondary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_find_secondary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_find_secondary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_find_secondary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_find_secondary)
}

::google::protobuf::uint8* db_idx128_find_secondary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_find_secondary)
  return target;
}

size_t db_idx128_find_secondary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_find_secondary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_find_secondary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_find_secondary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_find_secondary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_find_secondary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_find_secondary)
    MergeFrom(*source);
  }
}

void db_idx128_find_secondary::MergeFrom(const db_idx128_find_secondary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_find_secondary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_find_secondary::CopyFrom(const db_idx128_find_secondary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_find_secondary::IsInitialized() const {
  return true;
}

void db_idx128_find_secondary::Swap(db_idx128_find_secondary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_find_secondary::InternalSwap(db_idx128_find_secondary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx128_find_secondary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_find_primary::InitAsDefaultInstance() {
}
class db_idx128_find_primary::HasBitSetters {
 public:
  static void set_has_code(db_idx128_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx128_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx128_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx128_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx128_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_find_primary::kCodeFieldNumber;
const int db_idx128_find_primary::kScopeFieldNumber;
const int db_idx128_find_primary::kTableFieldNumber;
const int db_idx128_find_primary::kSecondaryFieldNumber;
const int db_idx128_find_primary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_find_primary::db_idx128_find_primary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_find_primary)
}
db_idx128_find_primary::db_idx128_find_primary(const db_idx128_find_primary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_find_primary)
}

void db_idx128_find_primary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx128_find_primary_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx128_find_primary::~db_idx128_find_primary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_find_primary)
  SharedDtor();
}

void db_idx128_find_primary::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx128_find_primary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_find_primary& db_idx128_find_primary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_find_primary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_find_primary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_find_primary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_find_primary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_find_primary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_find_primary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_find_primary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_find_primary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_find_primary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_find_primary)
}

::google::protobuf::uint8* db_idx128_find_primary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_find_primary)
  return target;
}

size_t db_idx128_find_primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_find_primary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_find_primary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_find_primary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_find_primary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_find_primary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_find_primary)
    MergeFrom(*source);
  }
}

void db_idx128_find_primary::MergeFrom(const db_idx128_find_primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_find_primary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_find_primary::CopyFrom(const db_idx128_find_primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_find_primary::IsInitialized() const {
  return true;
}

void db_idx128_find_primary::Swap(db_idx128_find_primary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_find_primary::InternalSwap(db_idx128_find_primary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx128_find_primary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_lowerbound::InitAsDefaultInstance() {
}
class db_idx128_lowerbound::HasBitSetters {
 public:
  static void set_has_code(db_idx128_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx128_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx128_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx128_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx128_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_lowerbound::kCodeFieldNumber;
const int db_idx128_lowerbound::kScopeFieldNumber;
const int db_idx128_lowerbound::kTableFieldNumber;
const int db_idx128_lowerbound::kSecondaryFieldNumber;
const int db_idx128_lowerbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_lowerbound::db_idx128_lowerbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_lowerbound)
}
db_idx128_lowerbound::db_idx128_lowerbound(const db_idx128_lowerbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_lowerbound)
}

void db_idx128_lowerbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx128_lowerbound_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx128_lowerbound::~db_idx128_lowerbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_lowerbound)
  SharedDtor();
}

void db_idx128_lowerbound::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx128_lowerbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_lowerbound& db_idx128_lowerbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_lowerbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_lowerbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_lowerbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_lowerbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_lowerbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_lowerbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_lowerbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_lowerbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_lowerbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_lowerbound)
}

::google::protobuf::uint8* db_idx128_lowerbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_lowerbound)
  return target;
}

size_t db_idx128_lowerbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_lowerbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_lowerbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_lowerbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_lowerbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_lowerbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_lowerbound)
    MergeFrom(*source);
  }
}

void db_idx128_lowerbound::MergeFrom(const db_idx128_lowerbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_lowerbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_lowerbound::CopyFrom(const db_idx128_lowerbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_lowerbound::IsInitialized() const {
  return true;
}

void db_idx128_lowerbound::Swap(db_idx128_lowerbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_lowerbound::InternalSwap(db_idx128_lowerbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx128_lowerbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_upperbound::InitAsDefaultInstance() {
}
class db_idx128_upperbound::HasBitSetters {
 public:
  static void set_has_code(db_idx128_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx128_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx128_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx128_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx128_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_upperbound::kCodeFieldNumber;
const int db_idx128_upperbound::kScopeFieldNumber;
const int db_idx128_upperbound::kTableFieldNumber;
const int db_idx128_upperbound::kSecondaryFieldNumber;
const int db_idx128_upperbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_upperbound::db_idx128_upperbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_upperbound)
}
db_idx128_upperbound::db_idx128_upperbound(const db_idx128_upperbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_upperbound)
}

void db_idx128_upperbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx128_upperbound_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx128_upperbound::~db_idx128_upperbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_upperbound)
  SharedDtor();
}

void db_idx128_upperbound::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx128_upperbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_upperbound& db_idx128_upperbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_upperbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_upperbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_upperbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_upperbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_upperbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_upperbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_upperbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_upperbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_upperbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_upperbound)
}

::google::protobuf::uint8* db_idx128_upperbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_upperbound)
  return target;
}

size_t db_idx128_upperbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_upperbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_upperbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_upperbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_upperbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_upperbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_upperbound)
    MergeFrom(*source);
  }
}

void db_idx128_upperbound::MergeFrom(const db_idx128_upperbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_upperbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_upperbound::CopyFrom(const db_idx128_upperbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_upperbound::IsInitialized() const {
  return true;
}

void db_idx128_upperbound::Swap(db_idx128_upperbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_upperbound::InternalSwap(db_idx128_upperbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx128_upperbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_end::InitAsDefaultInstance() {
}
class db_idx128_end::HasBitSetters {
 public:
  static void set_has_code(db_idx128_end* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx128_end* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx128_end* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_end::kCodeFieldNumber;
const int db_idx128_end::kScopeFieldNumber;
const int db_idx128_end::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_end::db_idx128_end()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_end)
}
db_idx128_end::db_idx128_end(const db_idx128_end& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&code_)) + sizeof(table_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_end)
}

void db_idx128_end::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&code_)) + sizeof(table_));
}

db_idx128_end::~db_idx128_end() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_end)
  SharedDtor();
}

void db_idx128_end::SharedDtor() {
}

void db_idx128_end::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_end& db_idx128_end::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_end_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_end::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_) -
        reinterpret_cast<char*>(&code_)) + sizeof(table_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_end::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_end*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_end)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_end)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_end)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_end)
}

::google::protobuf::uint8* db_idx128_end::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_end)
  return target;
}

size_t db_idx128_end::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_end)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_end::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_end)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_end* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_end>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_end)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_end)
    MergeFrom(*source);
  }
}

void db_idx128_end::MergeFrom(const db_idx128_end& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_end)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_end::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_end::CopyFrom(const db_idx128_end& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_end::IsInitialized() const {
  return true;
}

void db_idx128_end::Swap(db_idx128_end* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_end::InternalSwap(db_idx128_end* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata db_idx128_end::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_next::InitAsDefaultInstance() {
}
class db_idx128_next::HasBitSetters {
 public:
  static void set_has_itr(db_idx128_next* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx128_next* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_next::kItrFieldNumber;
const int db_idx128_next::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_next::db_idx128_next()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_next)
}
db_idx128_next::db_idx128_next(const db_idx128_next& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_next)
}

void db_idx128_next::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx128_next::~db_idx128_next() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_next)
  SharedDtor();
}

void db_idx128_next::SharedDtor() {
}

void db_idx128_next::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_next& db_idx128_next::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_next_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_next::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_next::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_next*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_next::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_next)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_next)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_next)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_next::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_next)
}

::google::protobuf::uint8* db_idx128_next::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_next)
  return target;
}

size_t db_idx128_next::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_next)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_next::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_next)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_next* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_next>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_next)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_next)
    MergeFrom(*source);
  }
}

void db_idx128_next::MergeFrom(const db_idx128_next& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_next)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_next::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_next::CopyFrom(const db_idx128_next& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_next::IsInitialized() const {
  return true;
}

void db_idx128_next::Swap(db_idx128_next* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_next::InternalSwap(db_idx128_next* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx128_next::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx128_previous::InitAsDefaultInstance() {
}
class db_idx128_previous::HasBitSetters {
 public:
  static void set_has_itr(db_idx128_previous* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx128_previous* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx128_previous::kItrFieldNumber;
const int db_idx128_previous::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx128_previous::db_idx128_previous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx128_previous)
}
db_idx128_previous::db_idx128_previous(const db_idx128_previous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx128_previous)
}

void db_idx128_previous::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx128_previous::~db_idx128_previous() {
  // @@protoc_insertion_point(destructor:action_message.db_idx128_previous)
  SharedDtor();
}

void db_idx128_previous::SharedDtor() {
}

void db_idx128_previous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx128_previous& db_idx128_previous::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx128_previous_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx128_previous::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx128_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx128_previous::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx128_previous*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx128_previous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx128_previous)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx128_previous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx128_previous)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx128_previous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx128_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx128_previous)
}

::google::protobuf::uint8* db_idx128_previous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx128_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx128_previous)
  return target;
}

size_t db_idx128_previous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx128_previous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx128_previous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx128_previous)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx128_previous* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx128_previous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx128_previous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx128_previous)
    MergeFrom(*source);
  }
}

void db_idx128_previous::MergeFrom(const db_idx128_previous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx128_previous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx128_previous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx128_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx128_previous::CopyFrom(const db_idx128_previous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx128_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx128_previous::IsInitialized() const {
  return true;
}

void db_idx128_previous::Swap(db_idx128_previous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx128_previous::InternalSwap(db_idx128_previous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx128_previous::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_store::InitAsDefaultInstance() {
}
class db_idx256_store::HasBitSetters {
 public:
  static void set_has_scope(db_idx256_store* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx256_store* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx256_store* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_id(db_idx256_store* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_data(db_idx256_store* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data_len(db_idx256_store* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_store::kScopeFieldNumber;
const int db_idx256_store::kTableFieldNumber;
const int db_idx256_store::kPayerFieldNumber;
const int db_idx256_store::kIdFieldNumber;
const int db_idx256_store::kDataFieldNumber;
const int db_idx256_store::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_store::db_idx256_store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_store)
}
db_idx256_store::db_idx256_store(const db_idx256_store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&scope_, &from.scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_len_) -
    reinterpret_cast<char*>(&scope_)) + sizeof(data_len_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_store)
}

void db_idx256_store::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx256_store_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_len_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(data_len_));
}

db_idx256_store::~db_idx256_store() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_store)
  SharedDtor();
}

void db_idx256_store::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx256_store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_store& db_idx256_store::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_store_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_store::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&scope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_len_) -
        reinterpret_cast<char*>(&scope_)) + sizeof(data_len_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_store::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_store*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 payer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      // optional bytes data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 data_len = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_data_len(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_store)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_len = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_data_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_store)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scope(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->payer(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional bytes data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional uint64 data_len = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->data_len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_store)
}

::google::protobuf::uint8* db_idx256_store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scope(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->payer(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional bytes data = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional uint64 data_len = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->data_len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_store)
  return target;
}

size_t db_idx256_store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 scope = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 payer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 data_len = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_len());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_store)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_store* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_store)
    MergeFrom(*source);
  }
}

void db_idx256_store::MergeFrom(const db_idx256_store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_len_ = from.data_len_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_store::CopyFrom(const db_idx256_store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_store::IsInitialized() const {
  return true;
}

void db_idx256_store::Swap(db_idx256_store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_store::InternalSwap(db_idx256_store* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(payer_, other->payer_);
  swap(id_, other->id_);
  swap(data_len_, other->data_len_);
}

::google::protobuf::Metadata db_idx256_store::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_update::InitAsDefaultInstance() {
}
class db_idx256_update::HasBitSetters {
 public:
  static void set_has_itr(db_idx256_update* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_payer(db_idx256_update* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(db_idx256_update* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data_len(db_idx256_update* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_update::kItrFieldNumber;
const int db_idx256_update::kPayerFieldNumber;
const int db_idx256_update::kDataFieldNumber;
const int db_idx256_update::kDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_update::db_idx256_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_update)
}
db_idx256_update::db_idx256_update(const db_idx256_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_update)
}

void db_idx256_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx256_update_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
}

db_idx256_update::~db_idx256_update() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_update)
  SharedDtor();
}

void db_idx256_update::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx256_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_update& db_idx256_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_update_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_update::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_update*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 payer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 data_len = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_data_len(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_len = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_data_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payer(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional uint64 data_len = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->data_len(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_update)
}

::google::protobuf::uint8* db_idx256_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payer(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint64 data_len = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->data_len(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_update)
  return target;
}

size_t db_idx256_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 payer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 data_len = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_len());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_update)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_update* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_update)
    MergeFrom(*source);
  }
}

void db_idx256_update::MergeFrom(const db_idx256_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000008u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_update::CopyFrom(const db_idx256_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_update::IsInitialized() const {
  return true;
}

void db_idx256_update::Swap(db_idx256_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_update::InternalSwap(db_idx256_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payer_, other->payer_);
  swap(data_len_, other->data_len_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx256_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_remove::InitAsDefaultInstance() {
}
class db_idx256_remove::HasBitSetters {
 public:
  static void set_has_id(db_idx256_remove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_remove::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_remove::db_idx256_remove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_remove)
}
db_idx256_remove::db_idx256_remove(const db_idx256_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_remove)
}

void db_idx256_remove::SharedCtor() {
  id_ = 0u;
}

db_idx256_remove::~db_idx256_remove() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_remove)
  SharedDtor();
}

void db_idx256_remove::SharedDtor() {
}

void db_idx256_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_remove& db_idx256_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_remove_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_remove*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_remove)
}

::google::protobuf::uint8* db_idx256_remove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_remove)
  return target;
}

size_t db_idx256_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_remove)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_remove* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_remove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_remove)
    MergeFrom(*source);
  }
}

void db_idx256_remove::MergeFrom(const db_idx256_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
}

void db_idx256_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_remove::CopyFrom(const db_idx256_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_remove::IsInitialized() const {
  return true;
}

void db_idx256_remove::Swap(db_idx256_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_remove::InternalSwap(db_idx256_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_idx256_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_find_secondary::InitAsDefaultInstance() {
}
class db_idx256_find_secondary::HasBitSetters {
 public:
  static void set_has_code(db_idx256_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx256_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx256_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(db_idx256_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data_len(db_idx256_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_primary(db_idx256_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_find_secondary::kCodeFieldNumber;
const int db_idx256_find_secondary::kScopeFieldNumber;
const int db_idx256_find_secondary::kTableFieldNumber;
const int db_idx256_find_secondary::kDataFieldNumber;
const int db_idx256_find_secondary::kDataLenFieldNumber;
const int db_idx256_find_secondary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_find_secondary::db_idx256_find_secondary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_find_secondary)
}
db_idx256_find_secondary::db_idx256_find_secondary(const db_idx256_find_secondary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_find_secondary)
}

void db_idx256_find_secondary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx256_find_secondary_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx256_find_secondary::~db_idx256_find_secondary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_find_secondary)
  SharedDtor();
}

void db_idx256_find_secondary::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx256_find_secondary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_find_secondary& db_idx256_find_secondary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_find_secondary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_find_secondary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_find_secondary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_find_secondary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_data_len(value);
        break;
      }
      // optional uint64 primary = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_find_secondary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_find_secondary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_data_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_find_secondary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_find_secondary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_find_secondary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_len(), output);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_find_secondary)
}

::google::protobuf::uint8* db_idx256_find_secondary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data_len(), target);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_find_secondary)
  return target;
}

size_t db_idx256_find_secondary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_find_secondary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 data_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_len());
    }

    // optional uint64 primary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_find_secondary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_find_secondary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_find_secondary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_find_secondary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_find_secondary)
    MergeFrom(*source);
  }
}

void db_idx256_find_secondary::MergeFrom(const db_idx256_find_secondary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_find_secondary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_find_secondary::CopyFrom(const db_idx256_find_secondary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_find_secondary::IsInitialized() const {
  return true;
}

void db_idx256_find_secondary::Swap(db_idx256_find_secondary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_find_secondary::InternalSwap(db_idx256_find_secondary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(data_len_, other->data_len_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx256_find_secondary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_find_primary::InitAsDefaultInstance() {
}
class db_idx256_find_primary::HasBitSetters {
 public:
  static void set_has_code(db_idx256_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx256_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx256_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(db_idx256_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data_len(db_idx256_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_primary(db_idx256_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_find_primary::kCodeFieldNumber;
const int db_idx256_find_primary::kScopeFieldNumber;
const int db_idx256_find_primary::kTableFieldNumber;
const int db_idx256_find_primary::kDataFieldNumber;
const int db_idx256_find_primary::kDataLenFieldNumber;
const int db_idx256_find_primary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_find_primary::db_idx256_find_primary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_find_primary)
}
db_idx256_find_primary::db_idx256_find_primary(const db_idx256_find_primary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_find_primary)
}

void db_idx256_find_primary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx256_find_primary_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx256_find_primary::~db_idx256_find_primary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_find_primary)
  SharedDtor();
}

void db_idx256_find_primary::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx256_find_primary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_find_primary& db_idx256_find_primary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_find_primary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_find_primary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_find_primary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_find_primary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_data_len(value);
        break;
      }
      // optional uint64 primary = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_find_primary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_find_primary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_data_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_find_primary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_find_primary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_find_primary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_len(), output);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_find_primary)
}

::google::protobuf::uint8* db_idx256_find_primary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data_len(), target);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_find_primary)
  return target;
}

size_t db_idx256_find_primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_find_primary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 data_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_len());
    }

    // optional uint64 primary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_find_primary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_find_primary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_find_primary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_find_primary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_find_primary)
    MergeFrom(*source);
  }
}

void db_idx256_find_primary::MergeFrom(const db_idx256_find_primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_find_primary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_find_primary::CopyFrom(const db_idx256_find_primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_find_primary::IsInitialized() const {
  return true;
}

void db_idx256_find_primary::Swap(db_idx256_find_primary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_find_primary::InternalSwap(db_idx256_find_primary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(data_len_, other->data_len_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx256_find_primary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_lowerbound::InitAsDefaultInstance() {
}
class db_idx256_lowerbound::HasBitSetters {
 public:
  static void set_has_code(db_idx256_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx256_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx256_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(db_idx256_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data_len(db_idx256_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_primary(db_idx256_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_lowerbound::kCodeFieldNumber;
const int db_idx256_lowerbound::kScopeFieldNumber;
const int db_idx256_lowerbound::kTableFieldNumber;
const int db_idx256_lowerbound::kDataFieldNumber;
const int db_idx256_lowerbound::kDataLenFieldNumber;
const int db_idx256_lowerbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_lowerbound::db_idx256_lowerbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_lowerbound)
}
db_idx256_lowerbound::db_idx256_lowerbound(const db_idx256_lowerbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_lowerbound)
}

void db_idx256_lowerbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx256_lowerbound_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx256_lowerbound::~db_idx256_lowerbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_lowerbound)
  SharedDtor();
}

void db_idx256_lowerbound::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx256_lowerbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_lowerbound& db_idx256_lowerbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_lowerbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_lowerbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_lowerbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_lowerbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_data_len(value);
        break;
      }
      // optional uint64 primary = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_lowerbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_lowerbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_data_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_lowerbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_lowerbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_lowerbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_len(), output);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_lowerbound)
}

::google::protobuf::uint8* db_idx256_lowerbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data_len(), target);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_lowerbound)
  return target;
}

size_t db_idx256_lowerbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_lowerbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 data_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_len());
    }

    // optional uint64 primary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_lowerbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_lowerbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_lowerbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_lowerbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_lowerbound)
    MergeFrom(*source);
  }
}

void db_idx256_lowerbound::MergeFrom(const db_idx256_lowerbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_lowerbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_lowerbound::CopyFrom(const db_idx256_lowerbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_lowerbound::IsInitialized() const {
  return true;
}

void db_idx256_lowerbound::Swap(db_idx256_lowerbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_lowerbound::InternalSwap(db_idx256_lowerbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(data_len_, other->data_len_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx256_lowerbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_upperbound::InitAsDefaultInstance() {
}
class db_idx256_upperbound::HasBitSetters {
 public:
  static void set_has_code(db_idx256_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx256_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx256_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(db_idx256_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data_len(db_idx256_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_primary(db_idx256_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_upperbound::kCodeFieldNumber;
const int db_idx256_upperbound::kScopeFieldNumber;
const int db_idx256_upperbound::kTableFieldNumber;
const int db_idx256_upperbound::kDataFieldNumber;
const int db_idx256_upperbound::kDataLenFieldNumber;
const int db_idx256_upperbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_upperbound::db_idx256_upperbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_upperbound)
}
db_idx256_upperbound::db_idx256_upperbound(const db_idx256_upperbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_upperbound)
}

void db_idx256_upperbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx256_upperbound_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx256_upperbound::~db_idx256_upperbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_upperbound)
  SharedDtor();
}

void db_idx256_upperbound::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx256_upperbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_upperbound& db_idx256_upperbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_upperbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_upperbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_upperbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_upperbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_data_len(value);
        break;
      }
      // optional uint64 primary = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_upperbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_upperbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 data_len = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_data_len(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_upperbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_upperbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_upperbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->data_len(), output);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_upperbound)
}

::google::protobuf::uint8* db_idx256_upperbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint64 data_len = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->data_len(), target);
  }

  // optional uint64 primary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_upperbound)
  return target;
}

size_t db_idx256_upperbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_upperbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 data_len = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_len());
    }

    // optional uint64 primary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_upperbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_upperbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_upperbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_upperbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_upperbound)
    MergeFrom(*source);
  }
}

void db_idx256_upperbound::MergeFrom(const db_idx256_upperbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_len_ = from.data_len_;
    }
    if (cached_has_bits & 0x00000020u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_upperbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_upperbound::CopyFrom(const db_idx256_upperbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_upperbound::IsInitialized() const {
  return true;
}

void db_idx256_upperbound::Swap(db_idx256_upperbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_upperbound::InternalSwap(db_idx256_upperbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(data_len_, other->data_len_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx256_upperbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_end::InitAsDefaultInstance() {
}
class db_idx256_end::HasBitSetters {
 public:
  static void set_has_code(db_idx256_end* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx256_end* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx256_end* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_end::kCodeFieldNumber;
const int db_idx256_end::kScopeFieldNumber;
const int db_idx256_end::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_end::db_idx256_end()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_end)
}
db_idx256_end::db_idx256_end(const db_idx256_end& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&code_)) + sizeof(table_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_end)
}

void db_idx256_end::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&code_)) + sizeof(table_));
}

db_idx256_end::~db_idx256_end() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_end)
  SharedDtor();
}

void db_idx256_end::SharedDtor() {
}

void db_idx256_end::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_end& db_idx256_end::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_end_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_end::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_) -
        reinterpret_cast<char*>(&code_)) + sizeof(table_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_end::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_end*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_end)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_end)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_end)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_end)
}

::google::protobuf::uint8* db_idx256_end::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_end)
  return target;
}

size_t db_idx256_end::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_end)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_end::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_end)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_end* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_end>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_end)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_end)
    MergeFrom(*source);
  }
}

void db_idx256_end::MergeFrom(const db_idx256_end& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_end)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_end::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_end::CopyFrom(const db_idx256_end& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_end::IsInitialized() const {
  return true;
}

void db_idx256_end::Swap(db_idx256_end* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_end::InternalSwap(db_idx256_end* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata db_idx256_end::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_next::InitAsDefaultInstance() {
}
class db_idx256_next::HasBitSetters {
 public:
  static void set_has_itr(db_idx256_next* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx256_next* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_next::kItrFieldNumber;
const int db_idx256_next::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_next::db_idx256_next()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_next)
}
db_idx256_next::db_idx256_next(const db_idx256_next& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_next)
}

void db_idx256_next::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx256_next::~db_idx256_next() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_next)
  SharedDtor();
}

void db_idx256_next::SharedDtor() {
}

void db_idx256_next::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_next& db_idx256_next::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_next_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_next::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_next::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_next*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_next::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_next)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_next)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_next)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_next::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_next)
}

::google::protobuf::uint8* db_idx256_next::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_next)
  return target;
}

size_t db_idx256_next::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_next)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_next::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_next)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_next* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_next>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_next)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_next)
    MergeFrom(*source);
  }
}

void db_idx256_next::MergeFrom(const db_idx256_next& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_next)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_next::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_next::CopyFrom(const db_idx256_next& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_next::IsInitialized() const {
  return true;
}

void db_idx256_next::Swap(db_idx256_next* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_next::InternalSwap(db_idx256_next* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx256_next::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx256_previous::InitAsDefaultInstance() {
}
class db_idx256_previous::HasBitSetters {
 public:
  static void set_has_itr(db_idx256_previous* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx256_previous* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx256_previous::kItrFieldNumber;
const int db_idx256_previous::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx256_previous::db_idx256_previous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx256_previous)
}
db_idx256_previous::db_idx256_previous(const db_idx256_previous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx256_previous)
}

void db_idx256_previous::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx256_previous::~db_idx256_previous() {
  // @@protoc_insertion_point(destructor:action_message.db_idx256_previous)
  SharedDtor();
}

void db_idx256_previous::SharedDtor() {
}

void db_idx256_previous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx256_previous& db_idx256_previous::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx256_previous_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx256_previous::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx256_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx256_previous::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx256_previous*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx256_previous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx256_previous)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx256_previous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx256_previous)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx256_previous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx256_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx256_previous)
}

::google::protobuf::uint8* db_idx256_previous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx256_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx256_previous)
  return target;
}

size_t db_idx256_previous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx256_previous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx256_previous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx256_previous)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx256_previous* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx256_previous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx256_previous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx256_previous)
    MergeFrom(*source);
  }
}

void db_idx256_previous::MergeFrom(const db_idx256_previous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx256_previous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx256_previous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx256_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx256_previous::CopyFrom(const db_idx256_previous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx256_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx256_previous::IsInitialized() const {
  return true;
}

void db_idx256_previous::Swap(db_idx256_previous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx256_previous::InternalSwap(db_idx256_previous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx256_previous::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_store::InitAsDefaultInstance() {
}
class db_idx_double_store::HasBitSetters {
 public:
  static void set_has_scope(db_idx_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_id(db_idx_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_secondary(db_idx_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_store::kScopeFieldNumber;
const int db_idx_double_store::kTableFieldNumber;
const int db_idx_double_store::kPayerFieldNumber;
const int db_idx_double_store::kIdFieldNumber;
const int db_idx_double_store::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_store::db_idx_double_store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_store)
}
db_idx_double_store::db_idx_double_store(const db_idx_double_store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&scope_, &from.scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&scope_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_store)
}

void db_idx_double_store::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_double_store_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(id_));
}

db_idx_double_store::~db_idx_double_store() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_store)
  SharedDtor();
}

void db_idx_double_store::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_double_store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_store& db_idx_double_store::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_store_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_store::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&scope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&scope_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_store::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_store*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 payer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      // optional bytes secondary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_store)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_store)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scope(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->payer(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional bytes secondary = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_store)
}

::google::protobuf::uint8* db_idx_double_store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scope(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->payer(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional bytes secondary = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_store)
  return target;
}

size_t db_idx_double_store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 scope = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 payer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_store)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_store* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_store)
    MergeFrom(*source);
  }
}

void db_idx_double_store::MergeFrom(const db_idx_double_store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_store::CopyFrom(const db_idx_double_store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_store::IsInitialized() const {
  return true;
}

void db_idx_double_store::Swap(db_idx_double_store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_store::InternalSwap(db_idx_double_store* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(payer_, other->payer_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_idx_double_store::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_update::InitAsDefaultInstance() {
}
class db_idx_double_update::HasBitSetters {
 public:
  static void set_has_itr(db_idx_double_update* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx_double_update* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_secondary(db_idx_double_update* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_update::kItrFieldNumber;
const int db_idx_double_update::kPayerFieldNumber;
const int db_idx_double_update::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_update::db_idx_double_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_update)
}
db_idx_double_update::db_idx_double_update(const db_idx_double_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_update)
}

void db_idx_double_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_double_update_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
}

db_idx_double_update::~db_idx_double_update() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_update)
  SharedDtor();
}

void db_idx_double_update::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_double_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_update& db_idx_double_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_update_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_update::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_update*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 payer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional bytes secondary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payer(), output);
  }

  // optional bytes secondary = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_update)
}

::google::protobuf::uint8* db_idx_double_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payer(), target);
  }

  // optional bytes secondary = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_update)
  return target;
}

size_t db_idx_double_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes secondary = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 payer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_update)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_update* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_update)
    MergeFrom(*source);
  }
}

void db_idx_double_update::MergeFrom(const db_idx_double_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000004u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_update::CopyFrom(const db_idx_double_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_update::IsInitialized() const {
  return true;
}

void db_idx_double_update::Swap(db_idx_double_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_update::InternalSwap(db_idx_double_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payer_, other->payer_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_double_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_remove::InitAsDefaultInstance() {
}
class db_idx_double_remove::HasBitSetters {
 public:
  static void set_has_itr(db_idx_double_remove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_remove::kItrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_remove::db_idx_double_remove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_remove)
}
db_idx_double_remove::db_idx_double_remove(const db_idx_double_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itr_ = from.itr_;
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_remove)
}

void db_idx_double_remove::SharedCtor() {
  itr_ = 0u;
}

db_idx_double_remove::~db_idx_double_remove() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_remove)
  SharedDtor();
}

void db_idx_double_remove::SharedDtor() {
}

void db_idx_double_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_remove& db_idx_double_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_remove_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itr_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_remove*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_remove)
}

::google::protobuf::uint8* db_idx_double_remove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_remove)
  return target;
}

size_t db_idx_double_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 itr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_remove)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_remove* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_remove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_remove)
    MergeFrom(*source);
  }
}

void db_idx_double_remove::MergeFrom(const db_idx_double_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itr()) {
    set_itr(from.itr());
  }
}

void db_idx_double_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_remove::CopyFrom(const db_idx_double_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_remove::IsInitialized() const {
  return true;
}

void db_idx_double_remove::Swap(db_idx_double_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_remove::InternalSwap(db_idx_double_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_double_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_find_secondary::InitAsDefaultInstance() {
}
class db_idx_double_find_secondary::HasBitSetters {
 public:
  static void set_has_code(db_idx_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_find_secondary::kCodeFieldNumber;
const int db_idx_double_find_secondary::kScopeFieldNumber;
const int db_idx_double_find_secondary::kTableFieldNumber;
const int db_idx_double_find_secondary::kSecondaryFieldNumber;
const int db_idx_double_find_secondary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_find_secondary::db_idx_double_find_secondary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_find_secondary)
}
db_idx_double_find_secondary::db_idx_double_find_secondary(const db_idx_double_find_secondary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_find_secondary)
}

void db_idx_double_find_secondary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_double_find_secondary_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_double_find_secondary::~db_idx_double_find_secondary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_find_secondary)
  SharedDtor();
}

void db_idx_double_find_secondary::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_double_find_secondary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_find_secondary& db_idx_double_find_secondary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_find_secondary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_find_secondary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_find_secondary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_find_secondary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_find_secondary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_find_secondary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_find_secondary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_find_secondary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_find_secondary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_find_secondary)
}

::google::protobuf::uint8* db_idx_double_find_secondary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_find_secondary)
  return target;
}

size_t db_idx_double_find_secondary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_find_secondary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_find_secondary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_find_secondary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_find_secondary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_find_secondary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_find_secondary)
    MergeFrom(*source);
  }
}

void db_idx_double_find_secondary::MergeFrom(const db_idx_double_find_secondary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_find_secondary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_find_secondary::CopyFrom(const db_idx_double_find_secondary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_find_secondary::IsInitialized() const {
  return true;
}

void db_idx_double_find_secondary::Swap(db_idx_double_find_secondary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_find_secondary::InternalSwap(db_idx_double_find_secondary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_double_find_secondary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_find_primary::InitAsDefaultInstance() {
}
class db_idx_double_find_primary::HasBitSetters {
 public:
  static void set_has_code(db_idx_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_find_primary::kCodeFieldNumber;
const int db_idx_double_find_primary::kScopeFieldNumber;
const int db_idx_double_find_primary::kTableFieldNumber;
const int db_idx_double_find_primary::kSecondaryFieldNumber;
const int db_idx_double_find_primary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_find_primary::db_idx_double_find_primary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_find_primary)
}
db_idx_double_find_primary::db_idx_double_find_primary(const db_idx_double_find_primary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_find_primary)
}

void db_idx_double_find_primary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_double_find_primary_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_double_find_primary::~db_idx_double_find_primary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_find_primary)
  SharedDtor();
}

void db_idx_double_find_primary::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_double_find_primary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_find_primary& db_idx_double_find_primary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_find_primary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_find_primary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_find_primary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_find_primary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_find_primary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_find_primary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_find_primary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_find_primary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_find_primary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_find_primary)
}

::google::protobuf::uint8* db_idx_double_find_primary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_find_primary)
  return target;
}

size_t db_idx_double_find_primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_find_primary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_find_primary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_find_primary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_find_primary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_find_primary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_find_primary)
    MergeFrom(*source);
  }
}

void db_idx_double_find_primary::MergeFrom(const db_idx_double_find_primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_find_primary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_find_primary::CopyFrom(const db_idx_double_find_primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_find_primary::IsInitialized() const {
  return true;
}

void db_idx_double_find_primary::Swap(db_idx_double_find_primary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_find_primary::InternalSwap(db_idx_double_find_primary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_double_find_primary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_lowerbound::InitAsDefaultInstance() {
}
class db_idx_double_lowerbound::HasBitSetters {
 public:
  static void set_has_code(db_idx_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_lowerbound::kCodeFieldNumber;
const int db_idx_double_lowerbound::kScopeFieldNumber;
const int db_idx_double_lowerbound::kTableFieldNumber;
const int db_idx_double_lowerbound::kSecondaryFieldNumber;
const int db_idx_double_lowerbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_lowerbound::db_idx_double_lowerbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_lowerbound)
}
db_idx_double_lowerbound::db_idx_double_lowerbound(const db_idx_double_lowerbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_lowerbound)
}

void db_idx_double_lowerbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_double_lowerbound_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_double_lowerbound::~db_idx_double_lowerbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_lowerbound)
  SharedDtor();
}

void db_idx_double_lowerbound::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_double_lowerbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_lowerbound& db_idx_double_lowerbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_lowerbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_lowerbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_lowerbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_lowerbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_lowerbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_lowerbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_lowerbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_lowerbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_lowerbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_lowerbound)
}

::google::protobuf::uint8* db_idx_double_lowerbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_lowerbound)
  return target;
}

size_t db_idx_double_lowerbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_lowerbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_lowerbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_lowerbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_lowerbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_lowerbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_lowerbound)
    MergeFrom(*source);
  }
}

void db_idx_double_lowerbound::MergeFrom(const db_idx_double_lowerbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_lowerbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_lowerbound::CopyFrom(const db_idx_double_lowerbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_lowerbound::IsInitialized() const {
  return true;
}

void db_idx_double_lowerbound::Swap(db_idx_double_lowerbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_lowerbound::InternalSwap(db_idx_double_lowerbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_double_lowerbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_upperbound::InitAsDefaultInstance() {
}
class db_idx_double_upperbound::HasBitSetters {
 public:
  static void set_has_code(db_idx_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_upperbound::kCodeFieldNumber;
const int db_idx_double_upperbound::kScopeFieldNumber;
const int db_idx_double_upperbound::kTableFieldNumber;
const int db_idx_double_upperbound::kSecondaryFieldNumber;
const int db_idx_double_upperbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_upperbound::db_idx_double_upperbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_upperbound)
}
db_idx_double_upperbound::db_idx_double_upperbound(const db_idx_double_upperbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_upperbound)
}

void db_idx_double_upperbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_double_upperbound_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_double_upperbound::~db_idx_double_upperbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_upperbound)
  SharedDtor();
}

void db_idx_double_upperbound::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_double_upperbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_upperbound& db_idx_double_upperbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_upperbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_upperbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_upperbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_upperbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_upperbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_upperbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_upperbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_upperbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_upperbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_upperbound)
}

::google::protobuf::uint8* db_idx_double_upperbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_upperbound)
  return target;
}

size_t db_idx_double_upperbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_upperbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_upperbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_upperbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_upperbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_upperbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_upperbound)
    MergeFrom(*source);
  }
}

void db_idx_double_upperbound::MergeFrom(const db_idx_double_upperbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_upperbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_upperbound::CopyFrom(const db_idx_double_upperbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_upperbound::IsInitialized() const {
  return true;
}

void db_idx_double_upperbound::Swap(db_idx_double_upperbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_upperbound::InternalSwap(db_idx_double_upperbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_double_upperbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_end::InitAsDefaultInstance() {
}
class db_idx_double_end::HasBitSetters {
 public:
  static void set_has_code(db_idx_double_end* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx_double_end* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx_double_end* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_end::kCodeFieldNumber;
const int db_idx_double_end::kScopeFieldNumber;
const int db_idx_double_end::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_end::db_idx_double_end()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_end)
}
db_idx_double_end::db_idx_double_end(const db_idx_double_end& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&code_)) + sizeof(table_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_end)
}

void db_idx_double_end::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&code_)) + sizeof(table_));
}

db_idx_double_end::~db_idx_double_end() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_end)
  SharedDtor();
}

void db_idx_double_end::SharedDtor() {
}

void db_idx_double_end::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_end& db_idx_double_end::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_end_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_end::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_) -
        reinterpret_cast<char*>(&code_)) + sizeof(table_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_end::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_end*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_end)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_end)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_end)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_end)
}

::google::protobuf::uint8* db_idx_double_end::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_end)
  return target;
}

size_t db_idx_double_end::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_end)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_end::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_end)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_end* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_end>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_end)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_end)
    MergeFrom(*source);
  }
}

void db_idx_double_end::MergeFrom(const db_idx_double_end& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_end)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_end::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_end::CopyFrom(const db_idx_double_end& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_end::IsInitialized() const {
  return true;
}

void db_idx_double_end::Swap(db_idx_double_end* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_end::InternalSwap(db_idx_double_end* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata db_idx_double_end::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_next::InitAsDefaultInstance() {
}
class db_idx_double_next::HasBitSetters {
 public:
  static void set_has_itr(db_idx_double_next* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx_double_next* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_next::kItrFieldNumber;
const int db_idx_double_next::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_next::db_idx_double_next()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_next)
}
db_idx_double_next::db_idx_double_next(const db_idx_double_next& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_next)
}

void db_idx_double_next::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx_double_next::~db_idx_double_next() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_next)
  SharedDtor();
}

void db_idx_double_next::SharedDtor() {
}

void db_idx_double_next::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_next& db_idx_double_next::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_next_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_next::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_next::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_next*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_next::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_next)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_next)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_next)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_next::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_next)
}

::google::protobuf::uint8* db_idx_double_next::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_next)
  return target;
}

size_t db_idx_double_next::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_next)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_next::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_next)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_next* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_next>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_next)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_next)
    MergeFrom(*source);
  }
}

void db_idx_double_next::MergeFrom(const db_idx_double_next& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_next)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_next::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_next::CopyFrom(const db_idx_double_next& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_next::IsInitialized() const {
  return true;
}

void db_idx_double_next::Swap(db_idx_double_next* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_next::InternalSwap(db_idx_double_next* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_double_next::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_double_previous::InitAsDefaultInstance() {
}
class db_idx_double_previous::HasBitSetters {
 public:
  static void set_has_itr(db_idx_double_previous* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx_double_previous* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_double_previous::kItrFieldNumber;
const int db_idx_double_previous::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_double_previous::db_idx_double_previous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_double_previous)
}
db_idx_double_previous::db_idx_double_previous(const db_idx_double_previous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_double_previous)
}

void db_idx_double_previous::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx_double_previous::~db_idx_double_previous() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_double_previous)
  SharedDtor();
}

void db_idx_double_previous::SharedDtor() {
}

void db_idx_double_previous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_double_previous& db_idx_double_previous::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_double_previous_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_double_previous::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_double_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_double_previous::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_double_previous*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_double_previous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_double_previous)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_double_previous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_double_previous)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_double_previous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_double_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_double_previous)
}

::google::protobuf::uint8* db_idx_double_previous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_double_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_double_previous)
  return target;
}

size_t db_idx_double_previous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_double_previous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_double_previous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_double_previous)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_double_previous* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_double_previous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_double_previous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_double_previous)
    MergeFrom(*source);
  }
}

void db_idx_double_previous::MergeFrom(const db_idx_double_previous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_double_previous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_double_previous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_double_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_double_previous::CopyFrom(const db_idx_double_previous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_double_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_double_previous::IsInitialized() const {
  return true;
}

void db_idx_double_previous::Swap(db_idx_double_previous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_double_previous::InternalSwap(db_idx_double_previous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_double_previous::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_store::InitAsDefaultInstance() {
}
class db_idx_long_double_store::HasBitSetters {
 public:
  static void set_has_scope(db_idx_long_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx_long_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx_long_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_id(db_idx_long_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_secondary(db_idx_long_double_store* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_store::kScopeFieldNumber;
const int db_idx_long_double_store::kTableFieldNumber;
const int db_idx_long_double_store::kPayerFieldNumber;
const int db_idx_long_double_store::kIdFieldNumber;
const int db_idx_long_double_store::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_store::db_idx_long_double_store()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_store)
}
db_idx_long_double_store::db_idx_long_double_store(const db_idx_long_double_store& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&scope_, &from.scope_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&scope_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_store)
}

void db_idx_long_double_store::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_long_double_store_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&scope_)) + sizeof(id_));
}

db_idx_long_double_store::~db_idx_long_double_store() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_store)
  SharedDtor();
}

void db_idx_long_double_store::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_long_double_store::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_store& db_idx_long_double_store::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_store_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_store::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&scope_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&scope_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_store::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_store*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional uint64 payer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional uint64 id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_id(value);
        break;
      }
      // optional bytes secondary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_store::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_store)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 scope = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_store)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_store)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_store::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->scope(), output);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->table(), output);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->payer(), output);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->id(), output);
  }

  // optional bytes secondary = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_store)
}

::google::protobuf::uint8* db_idx_long_double_store::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_store)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 scope = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->scope(), target);
  }

  // optional uint64 table = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->table(), target);
  }

  // optional uint64 payer = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->payer(), target);
  }

  // optional uint64 id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->id(), target);
  }

  // optional bytes secondary = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_store)
  return target;
}

size_t db_idx_long_double_store::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_store)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 scope = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 payer = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint64 id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_store::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_store)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_store* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_store>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_store)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_store)
    MergeFrom(*source);
  }
}

void db_idx_long_double_store::MergeFrom(const db_idx_long_double_store& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_store)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000008u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_store::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_store::CopyFrom(const db_idx_long_double_store& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_store)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_store::IsInitialized() const {
  return true;
}

void db_idx_long_double_store::Swap(db_idx_long_double_store* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_store::InternalSwap(db_idx_long_double_store* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(payer_, other->payer_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata db_idx_long_double_store::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_update::InitAsDefaultInstance() {
}
class db_idx_long_double_update::HasBitSetters {
 public:
  static void set_has_itr(db_idx_long_double_update* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_payer(db_idx_long_double_update* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_secondary(db_idx_long_double_update* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_update::kItrFieldNumber;
const int db_idx_long_double_update::kPayerFieldNumber;
const int db_idx_long_double_update::kSecondaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_update::db_idx_long_double_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_update)
}
db_idx_long_double_update::db_idx_long_double_update(const db_idx_long_double_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&payer_, &from.payer_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_update)
}

void db_idx_long_double_update::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_long_double_update_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&payer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
}

db_idx_long_double_update::~db_idx_long_double_update() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_update)
  SharedDtor();
}

void db_idx_long_double_update::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_long_double_update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_update& db_idx_long_double_update::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_update_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_update::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&payer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&payer_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_update::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_update*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 payer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_payer(value);
        break;
      }
      // optional bytes secondary = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 payer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_payer(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_update)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payer(), output);
  }

  // optional bytes secondary = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->secondary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_update)
}

::google::protobuf::uint8* db_idx_long_double_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 payer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payer(), target);
  }

  // optional bytes secondary = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->secondary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_update)
  return target;
}

size_t db_idx_long_double_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes secondary = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 payer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payer());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_update)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_update* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_update)
    MergeFrom(*source);
  }
}

void db_idx_long_double_update::MergeFrom(const db_idx_long_double_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      payer_ = from.payer_;
    }
    if (cached_has_bits & 0x00000004u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_update::CopyFrom(const db_idx_long_double_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_update::IsInitialized() const {
  return true;
}

void db_idx_long_double_update::Swap(db_idx_long_double_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_update::InternalSwap(db_idx_long_double_update* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payer_, other->payer_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_long_double_update::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_remove::InitAsDefaultInstance() {
}
class db_idx_long_double_remove::HasBitSetters {
 public:
  static void set_has_itr(db_idx_long_double_remove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_remove::kItrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_remove::db_idx_long_double_remove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_remove)
}
db_idx_long_double_remove::db_idx_long_double_remove(const db_idx_long_double_remove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itr_ = from.itr_;
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_remove)
}

void db_idx_long_double_remove::SharedCtor() {
  itr_ = 0u;
}

db_idx_long_double_remove::~db_idx_long_double_remove() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_remove)
  SharedDtor();
}

void db_idx_long_double_remove::SharedDtor() {
}

void db_idx_long_double_remove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_remove& db_idx_long_double_remove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_remove_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_remove::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itr_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_remove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_remove*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_remove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_remove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_remove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_remove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_remove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_remove)
}

::google::protobuf::uint8* db_idx_long_double_remove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_remove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_remove)
  return target;
}

size_t db_idx_long_double_remove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_remove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 itr = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->itr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_remove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_remove)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_remove* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_remove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_remove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_remove)
    MergeFrom(*source);
  }
}

void db_idx_long_double_remove::MergeFrom(const db_idx_long_double_remove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_remove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itr()) {
    set_itr(from.itr());
  }
}

void db_idx_long_double_remove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_remove::CopyFrom(const db_idx_long_double_remove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_remove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_remove::IsInitialized() const {
  return true;
}

void db_idx_long_double_remove::Swap(db_idx_long_double_remove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_remove::InternalSwap(db_idx_long_double_remove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_long_double_remove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_find_secondary::InitAsDefaultInstance() {
}
class db_idx_long_double_find_secondary::HasBitSetters {
 public:
  static void set_has_code(db_idx_long_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_long_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_long_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_long_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_long_double_find_secondary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_find_secondary::kCodeFieldNumber;
const int db_idx_long_double_find_secondary::kScopeFieldNumber;
const int db_idx_long_double_find_secondary::kTableFieldNumber;
const int db_idx_long_double_find_secondary::kSecondaryFieldNumber;
const int db_idx_long_double_find_secondary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_find_secondary::db_idx_long_double_find_secondary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_find_secondary)
}
db_idx_long_double_find_secondary::db_idx_long_double_find_secondary(const db_idx_long_double_find_secondary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_find_secondary)
}

void db_idx_long_double_find_secondary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_long_double_find_secondary_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_long_double_find_secondary::~db_idx_long_double_find_secondary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_find_secondary)
  SharedDtor();
}

void db_idx_long_double_find_secondary::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_long_double_find_secondary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_find_secondary& db_idx_long_double_find_secondary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_find_secondary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_find_secondary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_find_secondary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_find_secondary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_find_secondary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_find_secondary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_find_secondary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_find_secondary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_find_secondary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_find_secondary)
}

::google::protobuf::uint8* db_idx_long_double_find_secondary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_find_secondary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_find_secondary)
  return target;
}

size_t db_idx_long_double_find_secondary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_find_secondary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_find_secondary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_find_secondary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_find_secondary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_find_secondary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_find_secondary)
    MergeFrom(*source);
  }
}

void db_idx_long_double_find_secondary::MergeFrom(const db_idx_long_double_find_secondary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_find_secondary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_find_secondary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_find_secondary::CopyFrom(const db_idx_long_double_find_secondary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_find_secondary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_find_secondary::IsInitialized() const {
  return true;
}

void db_idx_long_double_find_secondary::Swap(db_idx_long_double_find_secondary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_find_secondary::InternalSwap(db_idx_long_double_find_secondary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_long_double_find_secondary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_find_primary::InitAsDefaultInstance() {
}
class db_idx_long_double_find_primary::HasBitSetters {
 public:
  static void set_has_code(db_idx_long_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_long_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_long_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_long_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_long_double_find_primary* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_find_primary::kCodeFieldNumber;
const int db_idx_long_double_find_primary::kScopeFieldNumber;
const int db_idx_long_double_find_primary::kTableFieldNumber;
const int db_idx_long_double_find_primary::kSecondaryFieldNumber;
const int db_idx_long_double_find_primary::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_find_primary::db_idx_long_double_find_primary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_find_primary)
}
db_idx_long_double_find_primary::db_idx_long_double_find_primary(const db_idx_long_double_find_primary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_find_primary)
}

void db_idx_long_double_find_primary::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_long_double_find_primary_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_long_double_find_primary::~db_idx_long_double_find_primary() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_find_primary)
  SharedDtor();
}

void db_idx_long_double_find_primary::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_long_double_find_primary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_find_primary& db_idx_long_double_find_primary::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_find_primary_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_find_primary::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_find_primary::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_find_primary*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_find_primary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_find_primary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_find_primary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_find_primary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_find_primary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_find_primary)
}

::google::protobuf::uint8* db_idx_long_double_find_primary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_find_primary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_find_primary)
  return target;
}

size_t db_idx_long_double_find_primary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_find_primary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_find_primary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_find_primary* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_find_primary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_find_primary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_find_primary)
    MergeFrom(*source);
  }
}

void db_idx_long_double_find_primary::MergeFrom(const db_idx_long_double_find_primary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_find_primary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_find_primary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_find_primary::CopyFrom(const db_idx_long_double_find_primary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_find_primary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_find_primary::IsInitialized() const {
  return true;
}

void db_idx_long_double_find_primary::Swap(db_idx_long_double_find_primary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_find_primary::InternalSwap(db_idx_long_double_find_primary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_long_double_find_primary::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_lowerbound::InitAsDefaultInstance() {
}
class db_idx_long_double_lowerbound::HasBitSetters {
 public:
  static void set_has_code(db_idx_long_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_long_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_long_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_long_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_long_double_lowerbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_lowerbound::kCodeFieldNumber;
const int db_idx_long_double_lowerbound::kScopeFieldNumber;
const int db_idx_long_double_lowerbound::kTableFieldNumber;
const int db_idx_long_double_lowerbound::kSecondaryFieldNumber;
const int db_idx_long_double_lowerbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_lowerbound::db_idx_long_double_lowerbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_lowerbound)
}
db_idx_long_double_lowerbound::db_idx_long_double_lowerbound(const db_idx_long_double_lowerbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_lowerbound)
}

void db_idx_long_double_lowerbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_long_double_lowerbound_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_long_double_lowerbound::~db_idx_long_double_lowerbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_lowerbound)
  SharedDtor();
}

void db_idx_long_double_lowerbound::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_long_double_lowerbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_lowerbound& db_idx_long_double_lowerbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_lowerbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_lowerbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_lowerbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_lowerbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_lowerbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_lowerbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_lowerbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_lowerbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_lowerbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_lowerbound)
}

::google::protobuf::uint8* db_idx_long_double_lowerbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_lowerbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_lowerbound)
  return target;
}

size_t db_idx_long_double_lowerbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_lowerbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_lowerbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_lowerbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_lowerbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_lowerbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_lowerbound)
    MergeFrom(*source);
  }
}

void db_idx_long_double_lowerbound::MergeFrom(const db_idx_long_double_lowerbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_lowerbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_lowerbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_lowerbound::CopyFrom(const db_idx_long_double_lowerbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_lowerbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_lowerbound::IsInitialized() const {
  return true;
}

void db_idx_long_double_lowerbound::Swap(db_idx_long_double_lowerbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_lowerbound::InternalSwap(db_idx_long_double_lowerbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_long_double_lowerbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_upperbound::InitAsDefaultInstance() {
}
class db_idx_long_double_upperbound::HasBitSetters {
 public:
  static void set_has_code(db_idx_long_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_scope(db_idx_long_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_table(db_idx_long_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_secondary(db_idx_long_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_primary(db_idx_long_double_upperbound* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_upperbound::kCodeFieldNumber;
const int db_idx_long_double_upperbound::kScopeFieldNumber;
const int db_idx_long_double_upperbound::kTableFieldNumber;
const int db_idx_long_double_upperbound::kSecondaryFieldNumber;
const int db_idx_long_double_upperbound::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_upperbound::db_idx_long_double_upperbound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_upperbound)
}
db_idx_long_double_upperbound::db_idx_long_double_upperbound(const db_idx_long_double_upperbound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secondary()) {
    secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_) -
    reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_upperbound)
}

void db_idx_long_double_upperbound::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_db_idx_long_double_upperbound_message_2eproto.base);
  secondary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&primary_) -
      reinterpret_cast<char*>(&code_)) + sizeof(primary_));
}

db_idx_long_double_upperbound::~db_idx_long_double_upperbound() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_upperbound)
  SharedDtor();
}

void db_idx_long_double_upperbound::SharedDtor() {
  secondary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void db_idx_long_double_upperbound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_upperbound& db_idx_long_double_upperbound::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_upperbound_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_upperbound::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    secondary_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_) -
        reinterpret_cast<char*>(&code_)) + sizeof(primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_upperbound::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_upperbound*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      // optional bytes secondary = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_secondary();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 primary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_upperbound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_upperbound)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes secondary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_upperbound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_upperbound)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_upperbound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secondary(), output);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_upperbound)
}

::google::protobuf::uint8* db_idx_long_double_upperbound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_upperbound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  // optional bytes secondary = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->secondary(), target);
  }

  // optional uint64 primary = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_upperbound)
  return target;
}

size_t db_idx_long_double_upperbound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_upperbound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes secondary = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondary());
    }

    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

    // optional uint64 primary = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_upperbound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_upperbound* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_upperbound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_upperbound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_upperbound)
    MergeFrom(*source);
  }
}

void db_idx_long_double_upperbound::MergeFrom(const db_idx_long_double_upperbound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_upperbound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      secondary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secondary_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000008u) {
      table_ = from.table_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_ = from.primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_upperbound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_upperbound::CopyFrom(const db_idx_long_double_upperbound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_upperbound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_upperbound::IsInitialized() const {
  return true;
}

void db_idx_long_double_upperbound::Swap(db_idx_long_double_upperbound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_upperbound::InternalSwap(db_idx_long_double_upperbound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  secondary_.Swap(&other->secondary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
  swap(primary_, other->primary_);
}

::google::protobuf::Metadata db_idx_long_double_upperbound::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_end::InitAsDefaultInstance() {
}
class db_idx_long_double_end::HasBitSetters {
 public:
  static void set_has_code(db_idx_long_double_end* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scope(db_idx_long_double_end* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_table(db_idx_long_double_end* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_end::kCodeFieldNumber;
const int db_idx_long_double_end::kScopeFieldNumber;
const int db_idx_long_double_end::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_end::db_idx_long_double_end()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_end)
}
db_idx_long_double_end::db_idx_long_double_end(const db_idx_long_double_end& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_) -
    reinterpret_cast<char*>(&code_)) + sizeof(table_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_end)
}

void db_idx_long_double_end::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&code_)) + sizeof(table_));
}

db_idx_long_double_end::~db_idx_long_double_end() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_end)
  SharedDtor();
}

void db_idx_long_double_end::SharedDtor() {
}

void db_idx_long_double_end::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_end& db_idx_long_double_end::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_end_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_end::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_) -
        reinterpret_cast<char*>(&code_)) + sizeof(table_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_end::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_end*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_code(value);
        break;
      }
      // optional uint64 scope = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_scope(value);
        break;
      }
      // optional uint64 table = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_table(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_end)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 scope = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_scope(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_table(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &table_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_end)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_end)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->code(), output);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scope(), output);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_end)
}

::google::protobuf::uint8* db_idx_long_double_end::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_end)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->code(), target);
  }

  // optional uint64 scope = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scope(), target);
  }

  // optional uint64 table = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_end)
  return target;
}

size_t db_idx_long_double_end::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_end)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->code());
    }

    // optional uint64 scope = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scope());
    }

    // optional uint64 table = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->table());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_end::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_end)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_end* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_end>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_end)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_end)
    MergeFrom(*source);
  }
}

void db_idx_long_double_end::MergeFrom(const db_idx_long_double_end& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_end)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      scope_ = from.scope_;
    }
    if (cached_has_bits & 0x00000004u) {
      table_ = from.table_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_end::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_end::CopyFrom(const db_idx_long_double_end& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_end)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_end::IsInitialized() const {
  return true;
}

void db_idx_long_double_end::Swap(db_idx_long_double_end* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_end::InternalSwap(db_idx_long_double_end* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(code_, other->code_);
  swap(scope_, other->scope_);
  swap(table_, other->table_);
}

::google::protobuf::Metadata db_idx_long_double_end::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_next::InitAsDefaultInstance() {
}
class db_idx_long_double_next::HasBitSetters {
 public:
  static void set_has_itr(db_idx_long_double_next* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx_long_double_next* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_next::kItrFieldNumber;
const int db_idx_long_double_next::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_next::db_idx_long_double_next()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_next)
}
db_idx_long_double_next::db_idx_long_double_next(const db_idx_long_double_next& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_next)
}

void db_idx_long_double_next::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx_long_double_next::~db_idx_long_double_next() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_next)
  SharedDtor();
}

void db_idx_long_double_next::SharedDtor() {
}

void db_idx_long_double_next::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_next& db_idx_long_double_next::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_next_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_next::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_next::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_next*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_next::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_next)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_next)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_next)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_next::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_next)
}

::google::protobuf::uint8* db_idx_long_double_next::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_next)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_next)
  return target;
}

size_t db_idx_long_double_next::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_next)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_next::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_next)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_next* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_next>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_next)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_next)
    MergeFrom(*source);
  }
}

void db_idx_long_double_next::MergeFrom(const db_idx_long_double_next& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_next)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_next::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_next::CopyFrom(const db_idx_long_double_next& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_next)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_next::IsInitialized() const {
  return true;
}

void db_idx_long_double_next::Swap(db_idx_long_double_next* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_next::InternalSwap(db_idx_long_double_next* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_long_double_next::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void db_idx_long_double_previous::InitAsDefaultInstance() {
}
class db_idx_long_double_previous::HasBitSetters {
 public:
  static void set_has_itr(db_idx_long_double_previous* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_primary(db_idx_long_double_previous* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int db_idx_long_double_previous::kItrFieldNumber;
const int db_idx_long_double_previous::kPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

db_idx_long_double_previous::db_idx_long_double_previous()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.db_idx_long_double_previous)
}
db_idx_long_double_previous::db_idx_long_double_previous(const db_idx_long_double_previous& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&primary_, &from.primary_,
    static_cast<size_t>(reinterpret_cast<char*>(&itr_) -
    reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  // @@protoc_insertion_point(copy_constructor:action_message.db_idx_long_double_previous)
}

void db_idx_long_double_previous::SharedCtor() {
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itr_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
}

db_idx_long_double_previous::~db_idx_long_double_previous() {
  // @@protoc_insertion_point(destructor:action_message.db_idx_long_double_previous)
  SharedDtor();
}

void db_idx_long_double_previous::SharedDtor() {
}

void db_idx_long_double_previous::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const db_idx_long_double_previous& db_idx_long_double_previous::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_db_idx_long_double_previous_message_2eproto.base);
  return *internal_default_instance();
}


void db_idx_long_double_previous::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.db_idx_long_double_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&primary_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itr_) -
        reinterpret_cast<char*>(&primary_)) + sizeof(itr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* db_idx_long_double_previous::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<db_idx_long_double_previous*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_itr(value);
        break;
      }
      // optional uint64 primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_primary(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool db_idx_long_double_previous::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.db_idx_long_double_previous)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_itr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.db_idx_long_double_previous)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.db_idx_long_double_previous)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void db_idx_long_double_previous::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.db_idx_long_double_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itr(), output);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.db_idx_long_double_previous)
}

::google::protobuf::uint8* db_idx_long_double_previous::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.db_idx_long_double_previous)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 itr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itr(), target);
  }

  // optional uint64 primary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.db_idx_long_double_previous)
  return target;
}

size_t db_idx_long_double_previous::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.db_idx_long_double_previous)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 primary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->primary());
    }

    // optional uint32 itr = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void db_idx_long_double_previous::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.db_idx_long_double_previous)
  GOOGLE_DCHECK_NE(&from, this);
  const db_idx_long_double_previous* source =
      ::google::protobuf::DynamicCastToGenerated<db_idx_long_double_previous>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.db_idx_long_double_previous)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.db_idx_long_double_previous)
    MergeFrom(*source);
  }
}

void db_idx_long_double_previous::MergeFrom(const db_idx_long_double_previous& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.db_idx_long_double_previous)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      primary_ = from.primary_;
    }
    if (cached_has_bits & 0x00000002u) {
      itr_ = from.itr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void db_idx_long_double_previous::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.db_idx_long_double_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void db_idx_long_double_previous::CopyFrom(const db_idx_long_double_previous& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.db_idx_long_double_previous)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool db_idx_long_double_previous::IsInitialized() const {
  return true;
}

void db_idx_long_double_previous::Swap(db_idx_long_double_previous* other) {
  if (other == this) return;
  InternalSwap(other);
}
void db_idx_long_double_previous::InternalSwap(db_idx_long_double_previous* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(primary_, other->primary_);
  swap(itr_, other->itr_);
}

::google::protobuf::Metadata db_idx_long_double_previous::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void check_transaction_authorization::InitAsDefaultInstance() {
}
class check_transaction_authorization::HasBitSetters {
 public:
  static void set_has_trx_data(check_transaction_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pubkeys_data(check_transaction_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_perms_data(check_transaction_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int check_transaction_authorization::kTrxDataFieldNumber;
const int check_transaction_authorization::kPubkeysDataFieldNumber;
const int check_transaction_authorization::kPermsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

check_transaction_authorization::check_transaction_authorization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.check_transaction_authorization)
}
check_transaction_authorization::check_transaction_authorization(const check_transaction_authorization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_trx_data()) {
    trx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trx_data_);
  }
  pubkeys_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkeys_data()) {
    pubkeys_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkeys_data_);
  }
  perms_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_perms_data()) {
    perms_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perms_data_);
  }
  // @@protoc_insertion_point(copy_constructor:action_message.check_transaction_authorization)
}

void check_transaction_authorization::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_check_transaction_authorization_message_2eproto.base);
  trx_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkeys_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perms_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

check_transaction_authorization::~check_transaction_authorization() {
  // @@protoc_insertion_point(destructor:action_message.check_transaction_authorization)
  SharedDtor();
}

void check_transaction_authorization::SharedDtor() {
  trx_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkeys_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perms_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void check_transaction_authorization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const check_transaction_authorization& check_transaction_authorization::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_check_transaction_authorization_message_2eproto.base);
  return *internal_default_instance();
}


void check_transaction_authorization::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.check_transaction_authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      trx_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pubkeys_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      perms_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* check_transaction_authorization::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<check_transaction_authorization*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes trx_data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_trx_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes pubkeys_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_pubkeys_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes perms_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_perms_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool check_transaction_authorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.check_transaction_authorization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes trx_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trx_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkeys_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkeys_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes perms_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_perms_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.check_transaction_authorization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.check_transaction_authorization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void check_transaction_authorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.check_transaction_authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes trx_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->trx_data(), output);
  }

  // optional bytes pubkeys_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pubkeys_data(), output);
  }

  // optional bytes perms_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->perms_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.check_transaction_authorization)
}

::google::protobuf::uint8* check_transaction_authorization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.check_transaction_authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes trx_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->trx_data(), target);
  }

  // optional bytes pubkeys_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pubkeys_data(), target);
  }

  // optional bytes perms_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->perms_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.check_transaction_authorization)
  return target;
}

size_t check_transaction_authorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.check_transaction_authorization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes trx_data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trx_data());
    }

    // optional bytes pubkeys_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkeys_data());
    }

    // optional bytes perms_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->perms_data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void check_transaction_authorization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.check_transaction_authorization)
  GOOGLE_DCHECK_NE(&from, this);
  const check_transaction_authorization* source =
      ::google::protobuf::DynamicCastToGenerated<check_transaction_authorization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.check_transaction_authorization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.check_transaction_authorization)
    MergeFrom(*source);
  }
}

void check_transaction_authorization::MergeFrom(const check_transaction_authorization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.check_transaction_authorization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      trx_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trx_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pubkeys_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkeys_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      perms_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perms_data_);
    }
  }
}

void check_transaction_authorization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.check_transaction_authorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_transaction_authorization::CopyFrom(const check_transaction_authorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.check_transaction_authorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_transaction_authorization::IsInitialized() const {
  return true;
}

void check_transaction_authorization::Swap(check_transaction_authorization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void check_transaction_authorization::InternalSwap(check_transaction_authorization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trx_data_.Swap(&other->trx_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkeys_data_.Swap(&other->pubkeys_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  perms_data_.Swap(&other->perms_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata check_transaction_authorization::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void check_permission_authorization::InitAsDefaultInstance() {
}
class check_permission_authorization::HasBitSetters {
 public:
  static void set_has_account(check_permission_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_permission(check_permission_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_pubkeys_data(check_permission_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_perms_data(check_permission_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_delay_us(check_permission_authorization* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int check_permission_authorization::kAccountFieldNumber;
const int check_permission_authorization::kPermissionFieldNumber;
const int check_permission_authorization::kPubkeysDataFieldNumber;
const int check_permission_authorization::kPermsDataFieldNumber;
const int check_permission_authorization::kDelayUsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

check_permission_authorization::check_permission_authorization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.check_permission_authorization)
}
check_permission_authorization::check_permission_authorization(const check_permission_authorization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  permission_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_permission()) {
    permission_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_);
  }
  pubkeys_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkeys_data()) {
    pubkeys_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkeys_data_);
  }
  perms_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_perms_data()) {
    perms_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perms_data_);
  }
  delay_us_ = from.delay_us_;
  // @@protoc_insertion_point(copy_constructor:action_message.check_permission_authorization)
}

void check_permission_authorization::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_check_permission_authorization_message_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkeys_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perms_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delay_us_ = PROTOBUF_ULONGLONG(0);
}

check_permission_authorization::~check_permission_authorization() {
  // @@protoc_insertion_point(destructor:action_message.check_permission_authorization)
  SharedDtor();
}

void check_permission_authorization::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkeys_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perms_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void check_permission_authorization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const check_permission_authorization& check_permission_authorization::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_check_permission_authorization_message_2eproto.base);
  return *internal_default_instance();
}


void check_permission_authorization::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.check_permission_authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      permission_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      pubkeys_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      perms_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  delay_us_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* check_permission_authorization::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<check_permission_authorization*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_account();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes permission = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_permission();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes pubkeys_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_pubkeys_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes perms_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_perms_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional uint64 delay_us = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint64 value = val;
        msg->set_delay_us(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool check_permission_authorization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.check_permission_authorization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_permission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkeys_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkeys_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes perms_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_perms_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 delay_us = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_delay_us(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delay_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.check_permission_authorization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.check_permission_authorization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void check_permission_authorization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.check_permission_authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // optional bytes permission = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->permission(), output);
  }

  // optional bytes pubkeys_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pubkeys_data(), output);
  }

  // optional bytes perms_data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->perms_data(), output);
  }

  // optional uint64 delay_us = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->delay_us(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.check_permission_authorization)
}

::google::protobuf::uint8* check_permission_authorization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.check_permission_authorization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes permission = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->permission(), target);
  }

  // optional bytes pubkeys_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubkeys_data(), target);
  }

  // optional bytes perms_data = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->perms_data(), target);
  }

  // optional uint64 delay_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->delay_us(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.check_permission_authorization)
  return target;
}

size_t check_permission_authorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.check_permission_authorization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes permission = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->permission());
    }

    // optional bytes pubkeys_data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkeys_data());
    }

    // optional bytes perms_data = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->perms_data());
    }

    // optional uint64 delay_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delay_us());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void check_permission_authorization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.check_permission_authorization)
  GOOGLE_DCHECK_NE(&from, this);
  const check_permission_authorization* source =
      ::google::protobuf::DynamicCastToGenerated<check_permission_authorization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.check_permission_authorization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.check_permission_authorization)
    MergeFrom(*source);
  }
}

void check_permission_authorization::MergeFrom(const check_permission_authorization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.check_permission_authorization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      permission_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      pubkeys_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkeys_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      perms_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.perms_data_);
    }
    if (cached_has_bits & 0x00000010u) {
      delay_us_ = from.delay_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void check_permission_authorization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.check_permission_authorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_permission_authorization::CopyFrom(const check_permission_authorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.check_permission_authorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_permission_authorization::IsInitialized() const {
  return true;
}

void check_permission_authorization::Swap(check_permission_authorization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void check_permission_authorization::InternalSwap(check_permission_authorization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  permission_.Swap(&other->permission_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkeys_data_.Swap(&other->pubkeys_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  perms_data_.Swap(&other->perms_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delay_us_, other->delay_us_);
}

::google::protobuf::Metadata check_permission_authorization::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void get_permission_last_used::InitAsDefaultInstance() {
}
class get_permission_last_used::HasBitSetters {
 public:
  static void set_has_account(get_permission_last_used* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_permission(get_permission_last_used* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_permission_last_used::kAccountFieldNumber;
const int get_permission_last_used::kPermissionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_permission_last_used::get_permission_last_used()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.get_permission_last_used)
}
get_permission_last_used::get_permission_last_used(const get_permission_last_used& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  permission_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_permission()) {
    permission_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_);
  }
  // @@protoc_insertion_point(copy_constructor:action_message.get_permission_last_used)
}

void get_permission_last_used::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_get_permission_last_used_message_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

get_permission_last_used::~get_permission_last_used() {
  // @@protoc_insertion_point(destructor:action_message.get_permission_last_used)
  SharedDtor();
}

void get_permission_last_used::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void get_permission_last_used::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_permission_last_used& get_permission_last_used::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_get_permission_last_used_message_2eproto.base);
  return *internal_default_instance();
}


void get_permission_last_used::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.get_permission_last_used)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      permission_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* get_permission_last_used::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<get_permission_last_used*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_account();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes permission = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_permission();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool get_permission_last_used::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.get_permission_last_used)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes permission = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_permission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.get_permission_last_used)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.get_permission_last_used)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void get_permission_last_used::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.get_permission_last_used)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // optional bytes permission = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->permission(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.get_permission_last_used)
}

::google::protobuf::uint8* get_permission_last_used::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.get_permission_last_used)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // optional bytes permission = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->permission(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.get_permission_last_used)
  return target;
}

size_t get_permission_last_used::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.get_permission_last_used)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes account = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }

    // optional bytes permission = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->permission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_permission_last_used::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.get_permission_last_used)
  GOOGLE_DCHECK_NE(&from, this);
  const get_permission_last_used* source =
      ::google::protobuf::DynamicCastToGenerated<get_permission_last_used>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.get_permission_last_used)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.get_permission_last_used)
    MergeFrom(*source);
  }
}

void get_permission_last_used::MergeFrom(const get_permission_last_used& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.get_permission_last_used)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      permission_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.permission_);
    }
  }
}

void get_permission_last_used::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.get_permission_last_used)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_permission_last_used::CopyFrom(const get_permission_last_used& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.get_permission_last_used)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_permission_last_used::IsInitialized() const {
  return true;
}

void get_permission_last_used::Swap(get_permission_last_used* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_permission_last_used::InternalSwap(get_permission_last_used* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  permission_.Swap(&other->permission_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata get_permission_last_used::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void get_account_creation_time::InitAsDefaultInstance() {
}
class get_account_creation_time::HasBitSetters {
 public:
  static void set_has_account(get_account_creation_time* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int get_account_creation_time::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

get_account_creation_time::get_account_creation_time()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.get_account_creation_time)
}
get_account_creation_time::get_account_creation_time(const get_account_creation_time& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_account()) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:action_message.get_account_creation_time)
}

void get_account_creation_time::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_get_account_creation_time_message_2eproto.base);
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

get_account_creation_time::~get_account_creation_time() {
  // @@protoc_insertion_point(destructor:action_message.get_account_creation_time)
  SharedDtor();
}

void get_account_creation_time::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void get_account_creation_time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_account_creation_time& get_account_creation_time::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_get_account_creation_time_message_2eproto.base);
  return *internal_default_instance();
}


void get_account_creation_time::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.get_account_creation_time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    account_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* get_account_creation_time::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<get_account_creation_time*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_account();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool get_account_creation_time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.get_account_creation_time)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes account = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.get_account_creation_time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.get_account_creation_time)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void get_account_creation_time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.get_account_creation_time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.get_account_creation_time)
}

::google::protobuf::uint8* get_account_creation_time::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.get_account_creation_time)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes account = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.get_account_creation_time)
  return target;
}

size_t get_account_creation_time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.get_account_creation_time)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes account = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_account_creation_time::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.get_account_creation_time)
  GOOGLE_DCHECK_NE(&from, this);
  const get_account_creation_time* source =
      ::google::protobuf::DynamicCastToGenerated<get_account_creation_time>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.get_account_creation_time)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.get_account_creation_time)
    MergeFrom(*source);
  }
}

void get_account_creation_time::MergeFrom(const get_account_creation_time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.get_account_creation_time)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account()) {
    _has_bits_[0] |= 0x00000001u;
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void get_account_creation_time::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.get_account_creation_time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_account_creation_time::CopyFrom(const get_account_creation_time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.get_account_creation_time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_account_creation_time::IsInitialized() const {
  return true;
}

void get_account_creation_time::Swap(get_account_creation_time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void get_account_creation_time::InternalSwap(get_account_creation_time* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata get_account_creation_time::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void rpc_request::InitAsDefaultInstance() {
}
class rpc_request::HasBitSetters {
 public:
  static void set_has_msg_id(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_request::kMsgIdFieldNumber;
const int rpc_request::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_request::rpc_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.rpc_request)
}
rpc_request::rpc_request(const rpc_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:action_message.rpc_request)
}

void rpc_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_rpc_request_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 1000;
}

rpc_request::~rpc_request() {
  // @@protoc_insertion_point(destructor:action_message.rpc_request)
  SharedDtor();
}

void rpc_request::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void rpc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_request& rpc_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_rpc_request_message_2eproto.base);
  return *internal_default_instance();
}


void rpc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    msg_id_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* rpc_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<rpc_request*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .action_message.message_id msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::action_message::message_id_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        ::action_message::message_id value = static_cast<::action_message::message_id>(val);
        msg->set_msg_id(value);
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool rpc_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.rpc_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .action_message.message_id msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::action_message::message_id_IsValid(value)) {
            set_msg_id(static_cast< ::action_message::message_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.rpc_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.rpc_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void rpc_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.rpc_request)
}

::google::protobuf::uint8* rpc_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.rpc_request)
  return target;
}

size_t rpc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.rpc_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .action_message.message_id msg_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_request* source =
      ::google::protobuf::DynamicCastToGenerated<rpc_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.rpc_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.rpc_request)
    MergeFrom(*source);
  }
}

void rpc_request::MergeFrom(const rpc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_request::CopyFrom(const rpc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_request::IsInitialized() const {
  return true;
}

void rpc_request::Swap(rpc_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_request::InternalSwap(rpc_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata rpc_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void rpc_response::InitAsDefaultInstance() {
  ::action_message::_rpc_response_default_instance_._instance.get_mutable()->err_ = const_cast< ::action_message::error*>(
      ::action_message::error::internal_default_instance());
}
class rpc_response::HasBitSetters {
 public:
  static void set_has_msg_id(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::action_message::error& err(const rpc_response* msg);
  static void set_has_err(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::action_message::error&
rpc_response::HasBitSetters::err(const rpc_response* msg) {
  return *msg->err_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_response::kMsgIdFieldNumber;
const int rpc_response::kErrFieldNumber;
const int rpc_response::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_response::rpc_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.rpc_response)
}
rpc_response::rpc_response(const rpc_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_err()) {
    err_ = new ::action_message::error(*from.err_);
  } else {
    err_ = NULL;
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:action_message.rpc_response)
}

void rpc_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_rpc_response_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  err_ = NULL;
  msg_id_ = 1000;
}

rpc_response::~rpc_response() {
  // @@protoc_insertion_point(destructor:action_message.rpc_response)
  SharedDtor();
}

void rpc_response::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_;
}

void rpc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_response& rpc_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_rpc_response_message_2eproto.base);
  return *internal_default_instance();
}


void rpc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(err_ != NULL);
      err_->Clear();
    }
    msg_id_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* rpc_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<rpc_response*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .action_message.message_id msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::action_message::message_id_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        ::action_message::message_id value = static_cast<::action_message::message_id>(val);
        msg->set_msg_id(value);
        break;
      }
      // optional .action_message.error err = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::action_message::error::_InternalParse;
        object = msg->mutable_err();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool rpc_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.rpc_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .action_message.message_id msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::action_message::message_id_IsValid(value)) {
            set_msg_id(static_cast< ::action_message::message_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .action_message.error err = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.rpc_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.rpc_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void rpc_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional .action_message.error err = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::err(this), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.rpc_response)
}

::google::protobuf::uint8* rpc_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional .action_message.error err = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::err(this), deterministic, target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.rpc_response)
  return target;
}

size_t rpc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.rpc_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .action_message.error err = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *err_);
    }

    // optional .action_message.message_id msg_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_response* source =
      ::google::protobuf::DynamicCastToGenerated<rpc_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.rpc_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.rpc_response)
    MergeFrom(*source);
  }
}

void rpc_response::MergeFrom(const rpc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_err()->::action_message::error::MergeFrom(from.err());
    }
    if (cached_has_bits & 0x00000004u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_response::CopyFrom(const rpc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_response::IsInitialized() const {
  return true;
}

void rpc_response::Swap(rpc_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_response::InternalSwap(rpc_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(err_, other->err_);
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata rpc_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace action_message
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::action_message::error* Arena::CreateMaybeMessage< ::action_message::error >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::error >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::meta* Arena::CreateMaybeMessage< ::action_message::meta >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::meta >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_store_i64* Arena::CreateMaybeMessage< ::action_message::db_store_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_store_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_update_i64* Arena::CreateMaybeMessage< ::action_message::db_update_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_update_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_remove_i64* Arena::CreateMaybeMessage< ::action_message::db_remove_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_remove_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_get_i64* Arena::CreateMaybeMessage< ::action_message::db_get_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_get_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_next_64* Arena::CreateMaybeMessage< ::action_message::db_next_64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_next_64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_previous_i64* Arena::CreateMaybeMessage< ::action_message::db_previous_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_previous_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_find_i64* Arena::CreateMaybeMessage< ::action_message::db_find_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_find_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_lowerbound_i64* Arena::CreateMaybeMessage< ::action_message::db_lowerbound_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_lowerbound_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_upperbound_i64* Arena::CreateMaybeMessage< ::action_message::db_upperbound_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_upperbound_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_end_i64* Arena::CreateMaybeMessage< ::action_message::db_end_i64 >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_end_i64 >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_store* Arena::CreateMaybeMessage< ::action_message::db_idx64_store >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_store >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_update* Arena::CreateMaybeMessage< ::action_message::db_idx64_update >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_update >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_remove* Arena::CreateMaybeMessage< ::action_message::db_idx64_remove >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_find_secondary* Arena::CreateMaybeMessage< ::action_message::db_idx64_find_secondary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_find_secondary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_find_primary* Arena::CreateMaybeMessage< ::action_message::db_idx64_find_primary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_find_primary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_lowerbound* Arena::CreateMaybeMessage< ::action_message::db_idx64_lowerbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_lowerbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_upperbound* Arena::CreateMaybeMessage< ::action_message::db_idx64_upperbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_upperbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_end* Arena::CreateMaybeMessage< ::action_message::db_idx64_end >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_end >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_next* Arena::CreateMaybeMessage< ::action_message::db_idx64_next >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_next >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx64_previous* Arena::CreateMaybeMessage< ::action_message::db_idx64_previous >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx64_previous >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_store* Arena::CreateMaybeMessage< ::action_message::db_idx128_store >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_store >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_update* Arena::CreateMaybeMessage< ::action_message::db_idx128_update >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_update >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_remove* Arena::CreateMaybeMessage< ::action_message::db_idx128_remove >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_find_secondary* Arena::CreateMaybeMessage< ::action_message::db_idx128_find_secondary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_find_secondary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_find_primary* Arena::CreateMaybeMessage< ::action_message::db_idx128_find_primary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_find_primary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_lowerbound* Arena::CreateMaybeMessage< ::action_message::db_idx128_lowerbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_lowerbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_upperbound* Arena::CreateMaybeMessage< ::action_message::db_idx128_upperbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_upperbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_end* Arena::CreateMaybeMessage< ::action_message::db_idx128_end >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_end >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_next* Arena::CreateMaybeMessage< ::action_message::db_idx128_next >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_next >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx128_previous* Arena::CreateMaybeMessage< ::action_message::db_idx128_previous >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx128_previous >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_store* Arena::CreateMaybeMessage< ::action_message::db_idx256_store >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_store >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_update* Arena::CreateMaybeMessage< ::action_message::db_idx256_update >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_update >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_remove* Arena::CreateMaybeMessage< ::action_message::db_idx256_remove >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_find_secondary* Arena::CreateMaybeMessage< ::action_message::db_idx256_find_secondary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_find_secondary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_find_primary* Arena::CreateMaybeMessage< ::action_message::db_idx256_find_primary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_find_primary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_lowerbound* Arena::CreateMaybeMessage< ::action_message::db_idx256_lowerbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_lowerbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_upperbound* Arena::CreateMaybeMessage< ::action_message::db_idx256_upperbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_upperbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_end* Arena::CreateMaybeMessage< ::action_message::db_idx256_end >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_end >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_next* Arena::CreateMaybeMessage< ::action_message::db_idx256_next >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_next >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx256_previous* Arena::CreateMaybeMessage< ::action_message::db_idx256_previous >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx256_previous >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_store* Arena::CreateMaybeMessage< ::action_message::db_idx_double_store >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_store >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_update* Arena::CreateMaybeMessage< ::action_message::db_idx_double_update >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_update >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_remove* Arena::CreateMaybeMessage< ::action_message::db_idx_double_remove >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_find_secondary* Arena::CreateMaybeMessage< ::action_message::db_idx_double_find_secondary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_find_secondary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_find_primary* Arena::CreateMaybeMessage< ::action_message::db_idx_double_find_primary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_find_primary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_lowerbound* Arena::CreateMaybeMessage< ::action_message::db_idx_double_lowerbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_lowerbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_upperbound* Arena::CreateMaybeMessage< ::action_message::db_idx_double_upperbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_upperbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_end* Arena::CreateMaybeMessage< ::action_message::db_idx_double_end >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_end >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_next* Arena::CreateMaybeMessage< ::action_message::db_idx_double_next >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_next >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_double_previous* Arena::CreateMaybeMessage< ::action_message::db_idx_double_previous >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_double_previous >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_store* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_store >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_store >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_update* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_update >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_update >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_remove* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_remove >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_remove >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_find_secondary* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_find_secondary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_find_secondary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_find_primary* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_find_primary >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_find_primary >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_lowerbound* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_lowerbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_lowerbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_upperbound* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_upperbound >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_upperbound >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_end* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_end >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_end >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_next* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_next >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_next >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::db_idx_long_double_previous* Arena::CreateMaybeMessage< ::action_message::db_idx_long_double_previous >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::db_idx_long_double_previous >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::check_transaction_authorization* Arena::CreateMaybeMessage< ::action_message::check_transaction_authorization >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::check_transaction_authorization >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::check_permission_authorization* Arena::CreateMaybeMessage< ::action_message::check_permission_authorization >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::check_permission_authorization >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::get_permission_last_used* Arena::CreateMaybeMessage< ::action_message::get_permission_last_used >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::get_permission_last_used >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::get_account_creation_time* Arena::CreateMaybeMessage< ::action_message::get_account_creation_time >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::get_account_creation_time >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::rpc_request* Arena::CreateMaybeMessage< ::action_message::rpc_request >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::rpc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::rpc_response* Arena::CreateMaybeMessage< ::action_message::rpc_response >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::rpc_response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
