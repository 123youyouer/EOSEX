// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fork_database_service.proto

#include "fork_database_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_fork_5fdatabase_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_branch_t_fork_5fdatabase_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fork_5fdatabase_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_error_fork_5fdatabase_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fork_5fdatabase_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_meta_fork_5fdatabase_5fservice_2eproto;
namespace fork_db_message {
class errorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<error> _instance;
} _error_default_instance_;
class metaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<meta> _instance;
} _meta_default_instance_;
class branch_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<branch_t> _instance;
} _branch_t_default_instance_;
class rpc_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rpc_request> _instance;
} _rpc_request_default_instance_;
class rpc_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rpc_response> _instance;
} _rpc_response_default_instance_;
}  // namespace fork_db_message
static void InitDefaultserror_fork_5fdatabase_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fork_db_message::_error_default_instance_;
    new (ptr) ::fork_db_message::error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fork_db_message::error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_error_fork_5fdatabase_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultserror_fork_5fdatabase_5fservice_2eproto}, {}};

static void InitDefaultsmeta_fork_5fdatabase_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fork_db_message::_meta_default_instance_;
    new (ptr) ::fork_db_message::meta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fork_db_message::meta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_meta_fork_5fdatabase_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmeta_fork_5fdatabase_5fservice_2eproto}, {}};

static void InitDefaultsbranch_t_fork_5fdatabase_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fork_db_message::_branch_t_default_instance_;
    new (ptr) ::fork_db_message::branch_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fork_db_message::branch_t::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_branch_t_fork_5fdatabase_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsbranch_t_fork_5fdatabase_5fservice_2eproto}, {}};

static void InitDefaultsrpc_request_fork_5fdatabase_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fork_db_message::_rpc_request_default_instance_;
    new (ptr) ::fork_db_message::rpc_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fork_db_message::rpc_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rpc_request_fork_5fdatabase_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrpc_request_fork_5fdatabase_5fservice_2eproto}, {
      &scc_info_meta_fork_5fdatabase_5fservice_2eproto.base,}};

static void InitDefaultsrpc_response_fork_5fdatabase_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fork_db_message::_rpc_response_default_instance_;
    new (ptr) ::fork_db_message::rpc_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fork_db_message::rpc_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_rpc_response_fork_5fdatabase_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsrpc_response_fork_5fdatabase_5fservice_2eproto}, {
      &scc_info_error_fork_5fdatabase_5fservice_2eproto.base,
      &scc_info_branch_t_fork_5fdatabase_5fservice_2eproto.base,}};

void InitDefaults_fork_5fdatabase_5fservice_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_error_fork_5fdatabase_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_meta_fork_5fdatabase_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_branch_t_fork_5fdatabase_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rpc_request_fork_5fdatabase_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rpc_response_fork_5fdatabase_5fservice_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_fork_5fdatabase_5fservice_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_fork_5fdatabase_5fservice_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_fork_5fdatabase_5fservice_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_fork_5fdatabase_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fork_db_message::error, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fork_db_message::error, code_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::error, msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fork_db_message::meta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fork_db_message::meta, id_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::meta, service_id_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::meta, method_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fork_db_message::branch_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::branch_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fork_db_message::branch_t, first_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::branch_t, second_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, head_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, msg_id_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, data_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, trust_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, first_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_request, second_),
  3,
  5,
  0,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_response, msg_id_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_response, err_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_response, data_),
  PROTOBUF_FIELD_OFFSET(::fork_db_message::rpc_response, branch_),
  3,
  1,
  0,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::fork_db_message::error)},
  { 9, 17, sizeof(::fork_db_message::meta)},
  { 20, 27, sizeof(::fork_db_message::branch_t)},
  { 29, 40, sizeof(::fork_db_message::rpc_request)},
  { 46, 55, sizeof(::fork_db_message::rpc_response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fork_db_message::_error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fork_db_message::_meta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fork_db_message::_branch_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fork_db_message::_rpc_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fork_db_message::_rpc_response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_fork_5fdatabase_5fservice_2eproto = {
  {}, AddDescriptors_fork_5fdatabase_5fservice_2eproto, "fork_database_service.proto", schemas,
  file_default_instances, TableStruct_fork_5fdatabase_5fservice_2eproto::offsets,
  file_level_metadata_fork_5fdatabase_5fservice_2eproto, 5, file_level_enum_descriptors_fork_5fdatabase_5fservice_2eproto, file_level_service_descriptors_fork_5fdatabase_5fservice_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_fork_5fdatabase_5fservice_2eproto = {
  false, InitDefaults_fork_5fdatabase_5fservice_2eproto, 
  "\n\033fork_database_service.proto\022\017fork_db_m"
  "essage\"\"\n\005error\022\014\n\004code\030\001 \001(\r\022\013\n\003msg\030\002 \001"
  "(\t\"9\n\004meta\022\n\n\002id\030\001 \001(\r\022\022\n\nservice_id\030\002 \001"
  "(\r\022\021\n\tmethod_id\030\003 \001(\r\")\n\010branch_t\022\r\n\005fir"
  "st\030\001 \003(\014\022\016\n\006second\030\002 \003(\014\"\233\001\n\013rpc_request"
  "\022#\n\004head\030\001 \001(\0132\025.fork_db_message.meta\022+\n"
  "\006msg_id\030\002 \001(\0162\033.fork_db_message.message_"
  "id\022\014\n\004data\030\003 \001(\014\022\r\n\005trust\030\004 \001(\010\022\r\n\005first"
  "\030\005 \001(\014\022\016\n\006second\030\006 \001(\014\"\231\001\n\014rpc_response\022"
  "+\n\006msg_id\030\001 \001(\0162\033.fork_db_message.messag"
  "e_id\022#\n\003err\030\002 \001(\0132\026.fork_db_message.erro"
  "r\022\014\n\004data\030\003 \001(\014\022)\n\006branch\030\004 \001(\0132\031.fork_d"
  "b_message.branch_t*\375\006\n\nmessage_id\022\026\n\021blo"
  "ck_get_request\020\270\027\022\027\n\022block_get_response\020"
  "\271\027\022\035\n\030block_get_by_num_request\020\272\027\022\036\n\031blo"
  "ck_get_by_num_response\020\273\027\022\026\n\021block_set_r"
  "equest\020\274\027\022\027\n\022block_set_response\020\275\027\022&\n!bl"
  "ock_add_by_signed_block_request\020\276\027\022\'\n\"bl"
  "ock_add_by_signed_block_response\020\277\027\022%\n b"
  "lock_add_by_block_state_request\020\300\027\022&\n!bl"
  "ock_add_by_block_state_response\020\301\027\022\037\n\032bl"
  "ock_remove_by_id_request\020\302\027\022 \n\033block_rem"
  "ove_by_id_response\020\303\027\022-\n(block_add_by_he"
  "ader_confirmation_request\020\304\027\022.\n)block_ad"
  "d_by_header_confirmation_response\020\305\027\022\033\n\026"
  "block_get_head_request\020\306\027\022\034\n\027block_get_h"
  "ead_response\020\307\027\022\037\n\032block_fetch_branch_re"
  "quest\020\310\027\022 \n\033block_fetch_branch_response\020"
  "\311\027\022\037\n\032block_set_validity_request\020\312\027\022 \n\033b"
  "lock_set_validity_response\020\313\027\022(\n#block_m"
  "ark_in_current_chain_request\020\314\027\022)\n$block"
  "_mark_in_current_chain_response\020\315\027\022\030\n\023bl"
  "ock_prune_request\020\316\027\022\031\n\024block_prune_resp"
  "onse\020\317\027\022!\n\034block_irreversible_broadcast\020"
  "\240\037\022\036\n\031block_irreversible_notify\020\241\037"
,
  "fork_database_service.proto", &assign_descriptors_table_fork_5fdatabase_5fservice_2eproto, 1394,
};

void AddDescriptors_fork_5fdatabase_5fservice_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_fork_5fdatabase_5fservice_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fork_5fdatabase_5fservice_2eproto = []() { AddDescriptors_fork_5fdatabase_5fservice_2eproto(); return true; }();
namespace fork_db_message {
const ::google::protobuf::EnumDescriptor* message_id_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_fork_5fdatabase_5fservice_2eproto);
  return file_level_enum_descriptors_fork_5fdatabase_5fservice_2eproto[0];
}
bool message_id_IsValid(int value) {
  switch (value) {
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
    case 3010:
    case 3011:
    case 3012:
    case 3013:
    case 3014:
    case 3015:
    case 3016:
    case 3017:
    case 3018:
    case 3019:
    case 3020:
    case 3021:
    case 3022:
    case 3023:
    case 4000:
    case 4001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void error::InitAsDefaultInstance() {
}
class error::HasBitSetters {
 public:
  static void set_has_code(error* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msg(error* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error::kCodeFieldNumber;
const int error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error::error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fork_db_message.error)
}
error::error(const error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:fork_db_message.error)
}

void error::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_error_fork_5fdatabase_5fservice_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
}

error::~error() {
  // @@protoc_insertion_point(destructor:fork_db_message.error)
  SharedDtor();
}

void error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const error& error::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_error_fork_5fdatabase_5fservice_2eproto.base);
  return *internal_default_instance();
}


void error::Clear() {
// @@protoc_insertion_point(message_clear_start:fork_db_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* error::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<error*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_code(value);
        break;
      }
      // optional string msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("fork_db_message.error.msg");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8Verify;
        ::std::string* str = msg->mutable_msg();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fork_db_message.error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fork_db_message.error.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fork_db_message.error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fork_db_message.error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fork_db_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fork_db_message.error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fork_db_message.error)
}

::google::protobuf::uint8* error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fork_db_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fork_db_message.error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fork_db_message.error)
  return target;
}

size_t error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fork_db_message.error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint32 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fork_db_message.error)
  GOOGLE_DCHECK_NE(&from, this);
  const error* source =
      ::google::protobuf::DynamicCastToGenerated<error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fork_db_message.error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fork_db_message.error)
    MergeFrom(*source);
  }
}

void error::MergeFrom(const error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fork_db_message.error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fork_db_message.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error::CopyFrom(const error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fork_db_message.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error::IsInitialized() const {
  return true;
}

void error::Swap(error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error::InternalSwap(error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata error::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fork_5fdatabase_5fservice_2eproto);
  return ::file_level_metadata_fork_5fdatabase_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void meta::InitAsDefaultInstance() {
}
class meta::HasBitSetters {
 public:
  static void set_has_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_method_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta::kIdFieldNumber;
const int meta::kServiceIdFieldNumber;
const int meta::kMethodIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta::meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fork_db_message.meta)
}
meta::meta(const meta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  // @@protoc_insertion_point(copy_constructor:fork_db_message.meta)
}

void meta::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
}

meta::~meta() {
  // @@protoc_insertion_point(destructor:fork_db_message.meta)
  SharedDtor();
}

void meta::SharedDtor() {
}

void meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const meta& meta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_meta_fork_5fdatabase_5fservice_2eproto.base);
  return *internal_default_instance();
}


void meta::Clear() {
// @@protoc_insertion_point(message_clear_start:fork_db_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* meta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<meta*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_id(value);
        break;
      }
      // optional uint32 service_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_service_id(value);
        break;
      }
      // optional uint32 method_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_method_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fork_db_message.meta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 method_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_method_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fork_db_message.meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fork_db_message.meta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fork_db_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 service_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service_id(), output);
  }

  // optional uint32 method_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->method_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fork_db_message.meta)
}

::google::protobuf::uint8* meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fork_db_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 service_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_id(), target);
  }

  // optional uint32 method_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->method_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fork_db_message.meta)
  return target;
}

size_t meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fork_db_message.meta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 service_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 method_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->method_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fork_db_message.meta)
  GOOGLE_DCHECK_NE(&from, this);
  const meta* source =
      ::google::protobuf::DynamicCastToGenerated<meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fork_db_message.meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fork_db_message.meta)
    MergeFrom(*source);
  }
}

void meta::MergeFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fork_db_message.meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_id_ = from.method_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fork_db_message.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta::CopyFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fork_db_message.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta::IsInitialized() const {
  return true;
}

void meta::Swap(meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta::InternalSwap(meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(service_id_, other->service_id_);
  swap(method_id_, other->method_id_);
}

::google::protobuf::Metadata meta::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fork_5fdatabase_5fservice_2eproto);
  return ::file_level_metadata_fork_5fdatabase_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void branch_t::InitAsDefaultInstance() {
}
class branch_t::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int branch_t::kFirstFieldNumber;
const int branch_t::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

branch_t::branch_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fork_db_message.branch_t)
}
branch_t::branch_t(const branch_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      first_(from.first_),
      second_(from.second_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fork_db_message.branch_t)
}

void branch_t::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_branch_t_fork_5fdatabase_5fservice_2eproto.base);
}

branch_t::~branch_t() {
  // @@protoc_insertion_point(destructor:fork_db_message.branch_t)
  SharedDtor();
}

void branch_t::SharedDtor() {
}

void branch_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const branch_t& branch_t::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_branch_t_fork_5fdatabase_5fservice_2eproto.base);
  return *internal_default_instance();
}


void branch_t::Clear() {
// @@protoc_insertion_point(message_clear_start:fork_db_message.branch_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_.Clear();
  second_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* branch_t::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<branch_t*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated bytes first = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_first();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          str->append(ptr, size);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated bytes second = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::StringParser;
          ::std::string* str = msg->add_second();
          str->clear();
          object = str;
          if (size > end - ptr) goto len_delim_till_end;
          str->append(ptr, size);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool branch_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fork_db_message.branch_t)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fork_db_message.branch_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fork_db_message.branch_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void branch_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fork_db_message.branch_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes first = 1;
  for (int i = 0, n = this->first_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->first(i), output);
  }

  // repeated bytes second = 2;
  for (int i = 0, n = this->second_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->second(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fork_db_message.branch_t)
}

::google::protobuf::uint8* branch_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fork_db_message.branch_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes first = 1;
  for (int i = 0, n = this->first_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->first(i), target);
  }

  // repeated bytes second = 2;
  for (int i = 0, n = this->second_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->second(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fork_db_message.branch_t)
  return target;
}

size_t branch_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fork_db_message.branch_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes first = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->first_size());
  for (int i = 0, n = this->first_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->first(i));
  }

  // repeated bytes second = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->second_size());
  for (int i = 0, n = this->second_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->second(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void branch_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fork_db_message.branch_t)
  GOOGLE_DCHECK_NE(&from, this);
  const branch_t* source =
      ::google::protobuf::DynamicCastToGenerated<branch_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fork_db_message.branch_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fork_db_message.branch_t)
    MergeFrom(*source);
  }
}

void branch_t::MergeFrom(const branch_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fork_db_message.branch_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_.MergeFrom(from.first_);
  second_.MergeFrom(from.second_);
}

void branch_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fork_db_message.branch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void branch_t::CopyFrom(const branch_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fork_db_message.branch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool branch_t::IsInitialized() const {
  return true;
}

void branch_t::Swap(branch_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void branch_t::InternalSwap(branch_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  first_.InternalSwap(CastToBase(&other->first_));
  second_.InternalSwap(CastToBase(&other->second_));
}

::google::protobuf::Metadata branch_t::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fork_5fdatabase_5fservice_2eproto);
  return ::file_level_metadata_fork_5fdatabase_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void rpc_request::InitAsDefaultInstance() {
  ::fork_db_message::_rpc_request_default_instance_._instance.get_mutable()->head_ = const_cast< ::fork_db_message::meta*>(
      ::fork_db_message::meta::internal_default_instance());
}
class rpc_request::HasBitSetters {
 public:
  static const ::fork_db_message::meta& head(const rpc_request* msg);
  static void set_has_head(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_msg_id(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_data(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_trust(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_first(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_second(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::fork_db_message::meta&
rpc_request::HasBitSetters::head(const rpc_request* msg) {
  return *msg->head_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_request::kHeadFieldNumber;
const int rpc_request::kMsgIdFieldNumber;
const int rpc_request::kDataFieldNumber;
const int rpc_request::kTrustFieldNumber;
const int rpc_request::kFirstFieldNumber;
const int rpc_request::kSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_request::rpc_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fork_db_message.rpc_request)
}
rpc_request::rpc_request(const rpc_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_first()) {
    first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
  }
  second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_second()) {
    second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_);
  }
  if (from.has_head()) {
    head_ = new ::fork_db_message::meta(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&trust_, &from.trust_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&trust_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:fork_db_message.rpc_request)
}

void rpc_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_rpc_request_fork_5fdatabase_5fservice_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trust_) -
      reinterpret_cast<char*>(&head_)) + sizeof(trust_));
  msg_id_ = 3000;
}

rpc_request::~rpc_request() {
  // @@protoc_insertion_point(destructor:fork_db_message.rpc_request)
  SharedDtor();
}

void rpc_request::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  first_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void rpc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_request& rpc_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_rpc_request_fork_5fdatabase_5fservice_2eproto.base);
  return *internal_default_instance();
}


void rpc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:fork_db_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      first_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      second_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(head_ != NULL);
      head_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    trust_ = false;
    msg_id_ = 3000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* rpc_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<rpc_request*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .fork_db_message.meta head = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::fork_db_message::meta::_InternalParse;
        object = msg->mutable_head();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .fork_db_message.message_id msg_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::fork_db_message::message_id_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        ::fork_db_message::message_id value = static_cast<::fork_db_message::message_id>(val);
        msg->set_msg_id(value);
        break;
      }
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bool trust = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_trust(value);
        break;
      }
      // optional bytes first = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_first();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional bytes second = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_second();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool rpc_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fork_db_message.rpc_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fork_db_message.meta head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fork_db_message.message_id msg_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fork_db_message::message_id_IsValid(value)) {
            set_msg_id(static_cast< ::fork_db_message::message_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trust = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_trust(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trust_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes first = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes second = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_second()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fork_db_message.rpc_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fork_db_message.rpc_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void rpc_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fork_db_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fork_db_message.meta head = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::head(this), output);
  }

  // optional .fork_db_message.message_id msg_id = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_id(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional bool trust = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->trust(), output);
  }

  // optional bytes first = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->first(), output);
  }

  // optional bytes second = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fork_db_message.rpc_request)
}

::google::protobuf::uint8* rpc_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fork_db_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fork_db_message.meta head = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::head(this), deterministic, target);
  }

  // optional .fork_db_message.message_id msg_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_id(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional bool trust = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->trust(), target);
  }

  // optional bytes first = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->first(), target);
  }

  // optional bytes second = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fork_db_message.rpc_request)
  return target;
}

size_t rpc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fork_db_message.rpc_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes first = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->first());
    }

    // optional bytes second = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->second());
    }

    // optional .fork_db_message.meta head = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *head_);
    }

    // optional bool trust = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .fork_db_message.message_id msg_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fork_db_message.rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_request* source =
      ::google::protobuf::DynamicCastToGenerated<rpc_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fork_db_message.rpc_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fork_db_message.rpc_request)
    MergeFrom(*source);
  }
}

void rpc_request::MergeFrom(const rpc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fork_db_message.rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      first_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.first_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      second_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_head()->::fork_db_message::meta::MergeFrom(from.head());
    }
    if (cached_has_bits & 0x00000010u) {
      trust_ = from.trust_;
    }
    if (cached_has_bits & 0x00000020u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fork_db_message.rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_request::CopyFrom(const rpc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fork_db_message.rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_request::IsInitialized() const {
  return true;
}

void rpc_request::Swap(rpc_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_request::InternalSwap(rpc_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_.Swap(&other->first_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  second_.Swap(&other->second_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(head_, other->head_);
  swap(trust_, other->trust_);
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata rpc_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fork_5fdatabase_5fservice_2eproto);
  return ::file_level_metadata_fork_5fdatabase_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void rpc_response::InitAsDefaultInstance() {
  ::fork_db_message::_rpc_response_default_instance_._instance.get_mutable()->err_ = const_cast< ::fork_db_message::error*>(
      ::fork_db_message::error::internal_default_instance());
  ::fork_db_message::_rpc_response_default_instance_._instance.get_mutable()->branch_ = const_cast< ::fork_db_message::branch_t*>(
      ::fork_db_message::branch_t::internal_default_instance());
}
class rpc_response::HasBitSetters {
 public:
  static void set_has_msg_id(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::fork_db_message::error& err(const rpc_response* msg);
  static void set_has_err(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::fork_db_message::branch_t& branch(const rpc_response* msg);
  static void set_has_branch(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::fork_db_message::error&
rpc_response::HasBitSetters::err(const rpc_response* msg) {
  return *msg->err_;
}
const ::fork_db_message::branch_t&
rpc_response::HasBitSetters::branch(const rpc_response* msg) {
  return *msg->branch_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_response::kMsgIdFieldNumber;
const int rpc_response::kErrFieldNumber;
const int rpc_response::kDataFieldNumber;
const int rpc_response::kBranchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_response::rpc_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fork_db_message.rpc_response)
}
rpc_response::rpc_response(const rpc_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_err()) {
    err_ = new ::fork_db_message::error(*from.err_);
  } else {
    err_ = NULL;
  }
  if (from.has_branch()) {
    branch_ = new ::fork_db_message::branch_t(*from.branch_);
  } else {
    branch_ = NULL;
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:fork_db_message.rpc_response)
}

void rpc_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_rpc_response_fork_5fdatabase_5fservice_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&branch_) -
      reinterpret_cast<char*>(&err_)) + sizeof(branch_));
  msg_id_ = 3000;
}

rpc_response::~rpc_response() {
  // @@protoc_insertion_point(destructor:fork_db_message.rpc_response)
  SharedDtor();
}

void rpc_response::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_;
  if (this != internal_default_instance()) delete branch_;
}

void rpc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_response& rpc_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_rpc_response_fork_5fdatabase_5fservice_2eproto.base);
  return *internal_default_instance();
}


void rpc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:fork_db_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(err_ != NULL);
      err_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(branch_ != NULL);
      branch_->Clear();
    }
    msg_id_ = 3000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* rpc_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<rpc_response*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .fork_db_message.message_id msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::fork_db_message::message_id_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        ::fork_db_message::message_id value = static_cast<::fork_db_message::message_id>(val);
        msg->set_msg_id(value);
        break;
      }
      // optional .fork_db_message.error err = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::fork_db_message::error::_InternalParse;
        object = msg->mutable_err();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional bytes data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      // optional .fork_db_message.branch_t branch = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::fork_db_message::branch_t::_InternalParse;
        object = msg->mutable_branch();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool rpc_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fork_db_message.rpc_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fork_db_message.message_id msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fork_db_message::message_id_IsValid(value)) {
            set_msg_id(static_cast< ::fork_db_message::message_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fork_db_message.error err = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .fork_db_message.branch_t branch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_branch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fork_db_message.rpc_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fork_db_message.rpc_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void rpc_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fork_db_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fork_db_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional .fork_db_message.error err = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::err(this), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional .fork_db_message.branch_t branch = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::branch(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fork_db_message.rpc_response)
}

::google::protobuf::uint8* rpc_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fork_db_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .fork_db_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional .fork_db_message.error err = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::err(this), deterministic, target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional .fork_db_message.branch_t branch = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::branch(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fork_db_message.rpc_response)
  return target;
}

size_t rpc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fork_db_message.rpc_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .fork_db_message.error err = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *err_);
    }

    // optional .fork_db_message.branch_t branch = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *branch_);
    }

    // optional .fork_db_message.message_id msg_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fork_db_message.rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_response* source =
      ::google::protobuf::DynamicCastToGenerated<rpc_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fork_db_message.rpc_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fork_db_message.rpc_response)
    MergeFrom(*source);
  }
}

void rpc_response::MergeFrom(const rpc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fork_db_message.rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_err()->::fork_db_message::error::MergeFrom(from.err());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_branch()->::fork_db_message::branch_t::MergeFrom(from.branch());
    }
    if (cached_has_bits & 0x00000008u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fork_db_message.rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_response::CopyFrom(const rpc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fork_db_message.rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_response::IsInitialized() const {
  return true;
}

void rpc_response::Swap(rpc_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_response::InternalSwap(rpc_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(err_, other->err_);
  swap(branch_, other->branch_);
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata rpc_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_fork_5fdatabase_5fservice_2eproto);
  return ::file_level_metadata_fork_5fdatabase_5fservice_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fork_db_message
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::fork_db_message::error* Arena::CreateMaybeMessage< ::fork_db_message::error >(Arena* arena) {
  return Arena::CreateInternal< ::fork_db_message::error >(arena);
}
template<> PROTOBUF_NOINLINE ::fork_db_message::meta* Arena::CreateMaybeMessage< ::fork_db_message::meta >(Arena* arena) {
  return Arena::CreateInternal< ::fork_db_message::meta >(arena);
}
template<> PROTOBUF_NOINLINE ::fork_db_message::branch_t* Arena::CreateMaybeMessage< ::fork_db_message::branch_t >(Arena* arena) {
  return Arena::CreateInternal< ::fork_db_message::branch_t >(arena);
}
template<> PROTOBUF_NOINLINE ::fork_db_message::rpc_request* Arena::CreateMaybeMessage< ::fork_db_message::rpc_request >(Arena* arena) {
  return Arena::CreateInternal< ::fork_db_message::rpc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::fork_db_message::rpc_response* Arena::CreateMaybeMessage< ::fork_db_message::rpc_response >(Arena* arena) {
  return Arena::CreateInternal< ::fork_db_message::rpc_response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
