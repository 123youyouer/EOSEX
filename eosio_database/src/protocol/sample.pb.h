// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#ifndef PROTOBUF_INCLUDED_sample_2eproto
#define PROTOBUF_INCLUDED_sample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sample_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_sample_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_sample_2eproto();
namespace tutorial {
class address_book;
class address_bookDefaultTypeInternal;
extern address_bookDefaultTypeInternal _address_book_default_instance_;
class person;
class personDefaultTypeInternal;
extern personDefaultTypeInternal _person_default_instance_;
class person_phone_number;
class person_phone_numberDefaultTypeInternal;
extern person_phone_numberDefaultTypeInternal _person_phone_number_default_instance_;
class request_address_book;
class request_address_bookDefaultTypeInternal;
extern request_address_bookDefaultTypeInternal _request_address_book_default_instance_;
class request_person;
class request_personDefaultTypeInternal;
extern request_personDefaultTypeInternal _request_person_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::address_book* Arena::CreateMaybeMessage<::tutorial::address_book>(Arena*);
template<> ::tutorial::person* Arena::CreateMaybeMessage<::tutorial::person>(Arena*);
template<> ::tutorial::person_phone_number* Arena::CreateMaybeMessage<::tutorial::person_phone_number>(Arena*);
template<> ::tutorial::request_address_book* Arena::CreateMaybeMessage<::tutorial::request_address_book>(Arena*);
template<> ::tutorial::request_person* Arena::CreateMaybeMessage<::tutorial::request_person>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

enum person_phone_type {
  person_phone_type_MOBILE = 0,
  person_phone_type_HOME = 1,
  person_phone_type_WORK = 2
};
bool person_phone_type_IsValid(int value);
const person_phone_type person_phone_type_phone_type_MIN = person_phone_type_MOBILE;
const person_phone_type person_phone_type_phone_type_MAX = person_phone_type_WORK;
const int person_phone_type_phone_type_ARRAYSIZE = person_phone_type_phone_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* person_phone_type_descriptor();
inline const ::std::string& person_phone_type_Name(person_phone_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    person_phone_type_descriptor(), value);
}
inline bool person_phone_type_Parse(
    const ::std::string& name, person_phone_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<person_phone_type>(
    person_phone_type_descriptor(), name, value);
}
// ===================================================================

class person_phone_number : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.person.phone_number) */ {
 public:
  person_phone_number();
  virtual ~person_phone_number();

  person_phone_number(const person_phone_number& from);

  inline person_phone_number& operator=(const person_phone_number& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  person_phone_number(person_phone_number&& from) noexcept
    : person_phone_number() {
    *this = ::std::move(from);
  }

  inline person_phone_number& operator=(person_phone_number&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const person_phone_number& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const person_phone_number* internal_default_instance() {
    return reinterpret_cast<const person_phone_number*>(
               &_person_phone_number_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(person_phone_number* other);
  friend void swap(person_phone_number& a, person_phone_number& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline person_phone_number* New() const final {
    return CreateMaybeMessage<person_phone_number>(NULL);
  }

  person_phone_number* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<person_phone_number>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const person_phone_number& from);
  void MergeFrom(const person_phone_number& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(person_phone_number* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // optional .tutorial.person.phone_type type = 2 [default = HOME];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::tutorial::person_phone_type type() const;
  void set_type(::tutorial::person_phone_type value);

  // @@protoc_insertion_point(class_scope:tutorial.person.phone_number)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  int type_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.person) */ {
 public:
  person();
  virtual ~person();

  person(const person& from);

  inline person& operator=(const person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  person(person&& from) noexcept
    : person() {
    *this = ::std::move(from);
  }

  inline person& operator=(person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const person* internal_default_instance() {
    return reinterpret_cast<const person*>(
               &_person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(person* other);
  friend void swap(person& a, person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline person* New() const final {
    return CreateMaybeMessage<person>(NULL);
  }

  person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const person& from);
  void MergeFrom(const person& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef person_phone_number phone_number;

  typedef person_phone_type phone_type;
  static const phone_type MOBILE =
    person_phone_type_MOBILE;
  static const phone_type HOME =
    person_phone_type_HOME;
  static const phone_type WORK =
    person_phone_type_WORK;
  static inline bool phone_type_IsValid(int value) {
    return person_phone_type_IsValid(value);
  }
  static const phone_type phone_type_MIN =
    person_phone_type_phone_type_MIN;
  static const phone_type phone_type_MAX =
    person_phone_type_phone_type_MAX;
  static const int phone_type_ARRAYSIZE =
    person_phone_type_phone_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  phone_type_descriptor() {
    return person_phone_type_descriptor();
  }
  static inline const ::std::string& phone_type_Name(phone_type value) {
    return person_phone_type_Name(value);
  }
  static inline bool phone_type_Parse(const ::std::string& name,
      phone_type* value) {
    return person_phone_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tutorial.person.phone_number phones = 4;
  int phones_size() const;
  void clear_phones();
  static const int kPhonesFieldNumber = 4;
  ::tutorial::person_phone_number* mutable_phones(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::person_phone_number >*
      mutable_phones();
  const ::tutorial::person_phone_number& phones(int index) const;
  ::tutorial::person_phone_number* add_phones();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::person_phone_number >&
      phones() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // required int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.person)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::person_phone_number > phones_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class address_book : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.address_book) */ {
 public:
  address_book();
  virtual ~address_book();

  address_book(const address_book& from);

  inline address_book& operator=(const address_book& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  address_book(address_book&& from) noexcept
    : address_book() {
    *this = ::std::move(from);
  }

  inline address_book& operator=(address_book&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const address_book& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const address_book* internal_default_instance() {
    return reinterpret_cast<const address_book*>(
               &_address_book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(address_book* other);
  friend void swap(address_book& a, address_book& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline address_book* New() const final {
    return CreateMaybeMessage<address_book>(NULL);
  }

  address_book* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<address_book>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const address_book& from);
  void MergeFrom(const address_book& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(address_book* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tutorial.person people = 2;
  int people_size() const;
  void clear_people();
  static const int kPeopleFieldNumber = 2;
  ::tutorial::person* mutable_people(int index);
  ::google::protobuf::RepeatedPtrField< ::tutorial::person >*
      mutable_people();
  const ::tutorial::person& people(int index) const;
  ::tutorial::person* add_people();
  const ::google::protobuf::RepeatedPtrField< ::tutorial::person >&
      people() const;

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:tutorial.address_book)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::tutorial::person > people_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class request_person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.request_person) */ {
 public:
  request_person();
  virtual ~request_person();

  request_person(const request_person& from);

  inline request_person& operator=(const request_person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  request_person(request_person&& from) noexcept
    : request_person() {
    *this = ::std::move(from);
  }

  inline request_person& operator=(request_person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const request_person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request_person* internal_default_instance() {
    return reinterpret_cast<const request_person*>(
               &_request_person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(request_person* other);
  friend void swap(request_person& a, request_person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline request_person* New() const final {
    return CreateMaybeMessage<request_person>(NULL);
  }

  request_person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<request_person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const request_person& from);
  void MergeFrom(const request_person& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request_person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.request_person)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::TableStruct_sample_2eproto;
};
// -------------------------------------------------------------------

class request_address_book : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.request_address_book) */ {
 public:
  request_address_book();
  virtual ~request_address_book();

  request_address_book(const request_address_book& from);

  inline request_address_book& operator=(const request_address_book& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  request_address_book(request_address_book&& from) noexcept
    : request_address_book() {
    *this = ::std::move(from);
  }

  inline request_address_book& operator=(request_address_book&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const request_address_book& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request_address_book* internal_default_instance() {
    return reinterpret_cast<const request_address_book*>(
               &_request_address_book_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(request_address_book* other);
  friend void swap(request_address_book& a, request_address_book& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline request_address_book* New() const final {
    return CreateMaybeMessage<request_address_book>(NULL);
  }

  request_address_book* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<request_address_book>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const request_address_book& from);
  void MergeFrom(const request_address_book& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request_address_book* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:tutorial.request_address_book)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_sample_2eproto;
};
// ===================================================================

class address_book_service_Stub;

class address_book_service : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline address_book_service() {};
 public:
  virtual ~address_book_service();

  typedef address_book_service_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void get_person(::google::protobuf::RpcController* controller,
                       const ::tutorial::request_person* request,
                       ::tutorial::person* response,
                       ::google::protobuf::Closure* done);
  virtual void add_person(::google::protobuf::RpcController* controller,
                       const ::tutorial::person* request,
                       ::tutorial::person* response,
                       ::google::protobuf::Closure* done);
  virtual void get_address_book(::google::protobuf::RpcController* controller,
                       const ::tutorial::request_address_book* request,
                       ::tutorial::address_book* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(address_book_service);
};

class address_book_service_Stub : public address_book_service {
 public:
  address_book_service_Stub(::google::protobuf::RpcChannel* channel);
  address_book_service_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~address_book_service_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements address_book_service ------------------------------------------

  void get_person(::google::protobuf::RpcController* controller,
                       const ::tutorial::request_person* request,
                       ::tutorial::person* response,
                       ::google::protobuf::Closure* done);
  void add_person(::google::protobuf::RpcController* controller,
                       const ::tutorial::person* request,
                       ::tutorial::person* response,
                       ::google::protobuf::Closure* done);
  void get_address_book(::google::protobuf::RpcController* controller,
                       const ::tutorial::request_address_book* request,
                       ::tutorial::address_book* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(address_book_service_Stub);
};


// ===================================================================

static const int kGlobalServiceIdFieldNumber = 2000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::ServiceOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  global_service_id;
static const int kLocalMethodIdFieldNumber = 1000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::uint32 >, 13, false >
  local_method_id;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// person_phone_number

// required string number = 1;
inline bool person_phone_number::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void person_phone_number::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& person_phone_number::number() const {
  // @@protoc_insertion_point(field_get:tutorial.person.phone_number.number)
  return number_.GetNoArena();
}
inline void person_phone_number::set_number(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.person.phone_number.number)
}
#if LANG_CXX11
inline void person_phone_number::set_number(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.person.phone_number.number)
}
#endif
inline void person_phone_number::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.person.phone_number.number)
}
inline void person_phone_number::set_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.person.phone_number.number)
}
inline ::std::string* person_phone_number::mutable_number() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:tutorial.person.phone_number.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* person_phone_number::release_number() {
  // @@protoc_insertion_point(field_release:tutorial.person.phone_number.number)
  if (!has_number()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return number_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void person_phone_number::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:tutorial.person.phone_number.number)
}

// optional .tutorial.person.phone_type type = 2 [default = HOME];
inline bool person_phone_number::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void person_phone_number::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::tutorial::person_phone_type person_phone_number::type() const {
  // @@protoc_insertion_point(field_get:tutorial.person.phone_number.type)
  return static_cast< ::tutorial::person_phone_type >(type_);
}
inline void person_phone_number::set_type(::tutorial::person_phone_type value) {
  assert(::tutorial::person_phone_type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:tutorial.person.phone_number.type)
}

// -------------------------------------------------------------------

// person

// required string name = 1;
inline bool person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& person::name() const {
  // @@protoc_insertion_point(field_get:tutorial.person.name)
  return name_.GetNoArena();
}
inline void person::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.person.name)
}
#if LANG_CXX11
inline void person::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.person.name)
}
#endif
inline void person::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.person.name)
}
inline void person::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.person.name)
}
inline ::std::string* person::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:tutorial.person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* person::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.person.name)
  if (!has_name()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.person.name)
}

// required int32 id = 2;
inline bool person::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void person::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 person::id() const {
  // @@protoc_insertion_point(field_get:tutorial.person.id)
  return id_;
}
inline void person::set_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.person.id)
}

// optional string email = 3;
inline bool person::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& person::email() const {
  // @@protoc_insertion_point(field_get:tutorial.person.email)
  return email_.GetNoArena();
}
inline void person::set_email(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.person.email)
}
#if LANG_CXX11
inline void person::set_email(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.person.email)
}
#endif
inline void person::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000002u;
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.person.email)
}
inline void person::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.person.email)
}
inline ::std::string* person::mutable_email() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:tutorial.person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* person::release_email() {
  // @@protoc_insertion_point(field_release:tutorial.person.email)
  if (!has_email()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000002u;
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.person.email)
}

// repeated .tutorial.person.phone_number phones = 4;
inline int person::phones_size() const {
  return phones_.size();
}
inline void person::clear_phones() {
  phones_.Clear();
}
inline ::tutorial::person_phone_number* person::mutable_phones(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.person.phones)
  return phones_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::person_phone_number >*
person::mutable_phones() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.person.phones)
  return &phones_;
}
inline const ::tutorial::person_phone_number& person::phones(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.person.phones)
  return phones_.Get(index);
}
inline ::tutorial::person_phone_number* person::add_phones() {
  // @@protoc_insertion_point(field_add:tutorial.person.phones)
  return phones_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::person_phone_number >&
person::phones() const {
  // @@protoc_insertion_point(field_list:tutorial.person.phones)
  return phones_;
}

// -------------------------------------------------------------------

// address_book

// required string id = 1;
inline bool address_book::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void address_book::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& address_book::id() const {
  // @@protoc_insertion_point(field_get:tutorial.address_book.id)
  return id_.GetNoArena();
}
inline void address_book::set_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.address_book.id)
}
#if LANG_CXX11
inline void address_book::set_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.address_book.id)
}
#endif
inline void address_book::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.address_book.id)
}
inline void address_book::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.address_book.id)
}
inline ::std::string* address_book::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:tutorial.address_book.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* address_book::release_id() {
  // @@protoc_insertion_point(field_release:tutorial.address_book.id)
  if (!has_id()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void address_book::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tutorial.address_book.id)
}

// repeated .tutorial.person people = 2;
inline int address_book::people_size() const {
  return people_.size();
}
inline void address_book::clear_people() {
  people_.Clear();
}
inline ::tutorial::person* address_book::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.address_book.people)
  return people_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::tutorial::person >*
address_book::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.address_book.people)
  return &people_;
}
inline const ::tutorial::person& address_book::people(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.address_book.people)
  return people_.Get(index);
}
inline ::tutorial::person* address_book::add_people() {
  // @@protoc_insertion_point(field_add:tutorial.address_book.people)
  return people_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tutorial::person >&
address_book::people() const {
  // @@protoc_insertion_point(field_list:tutorial.address_book.people)
  return people_;
}

// -------------------------------------------------------------------

// request_person

// required int32 id = 1;
inline bool request_person::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_person::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 request_person::id() const {
  // @@protoc_insertion_point(field_get:tutorial.request_person.id)
  return id_;
}
inline void request_person::set_id(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.request_person.id)
}

// -------------------------------------------------------------------

// request_address_book

// optional string id = 1;
inline bool request_address_book::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_address_book::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& request_address_book::id() const {
  // @@protoc_insertion_point(field_get:tutorial.request_address_book.id)
  return id_.GetNoArena();
}
inline void request_address_book::set_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.request_address_book.id)
}
#if LANG_CXX11
inline void request_address_book::set_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.request_address_book.id)
}
#endif
inline void request_address_book::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.request_address_book.id)
}
inline void request_address_book::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.request_address_book.id)
}
inline ::std::string* request_address_book::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:tutorial.request_address_book.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* request_address_book::release_id() {
  // @@protoc_insertion_point(field_release:tutorial.request_address_book.id)
  if (!has_id()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void request_address_book::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tutorial.request_address_book.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tutorial::person_phone_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::person_phone_type>() {
  return ::tutorial::person_phone_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_sample_2eproto
