syntax = "proto2";



package fork_db_message;

enum message_id{
    block_get_request                                        = 3000;
    block_get_response                                       = 3001;
    block_get_by_num_request                                 = 3002;
    block_get_by_num_response                                = 3003;
    block_set_request                                        = 3004;
    block_set_response                                       = 3005;
    block_add_by_signed_block_request                        = 3006;
    block_add_by_signed_block_response                       = 3007;
    block_add_by_block_state_request                         = 3008;
    block_add_by_block_state_response                        = 3009;
    block_remove_by_id_request                               = 3010;
    block_remove_by_id_response                              = 3011;
    block_add_by_header_confirmation_request                 = 3012;
    block_add_by_header_confirmation_response                = 3013;
    block_get_head_request                                   = 3014;
    block_get_head_response                                  = 3015;
    block_fetch_branch_request                               = 3016;
    block_fetch_branch_response                              = 3017;
    block_set_validity_request                               = 3018;
    block_set_validity_response                              = 3019;
    block_mark_in_current_chain_request                      = 3020;
    block_mark_in_current_chain_response                     = 3021;
    block_prune_request                                      = 3022;
    block_prune_response                                     = 3023;


    block_irreversible_broadcast                             = 4000;
    block_irreversible_notify                                = 4001;
}

message error {
    optional uint32 code = 1;
    optional string msg  = 2;
}

message meta {
    optional uint32 id          = 1;
    optional uint32 service_id  = 2;
    optional uint32 method_id   = 3;
}

message branch_data {
    optional bytes data       = 1;
    optional uint32 data_len  = 2;
}

message branch_t {
    repeated branch_data first  = 1;
    repeated branch_data second = 2;
}

message rpc_request {
    optional meta        head     = 1;
    optional message_id  msg_id   = 2;
    optional bytes       data     = 3;
    optional uint32      data_len = 4;
}

message rpc_response {
    optional message_id msg_id = 1;
    optional error      err    = 2;
    optional bytes      data   = 3;
    optional branch_t   branch = 4;
}