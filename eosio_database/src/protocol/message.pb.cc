// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_error_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_meta_message_2eproto;
namespace action_message {
class errorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<error> _instance;
} _error_default_instance_;
class metaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<meta> _instance;
} _meta_default_instance_;
class rpc_requestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rpc_request> _instance;
} _rpc_request_default_instance_;
class rpc_responseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<rpc_response> _instance;
} _rpc_response_default_instance_;
}  // namespace action_message
static void InitDefaultserror_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_error_default_instance_;
    new (ptr) ::action_message::error();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::error::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_error_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultserror_message_2eproto}, {}};

static void InitDefaultsmeta_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_meta_default_instance_;
    new (ptr) ::action_message::meta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::meta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_meta_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsmeta_message_2eproto}, {}};

static void InitDefaultsrpc_request_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_rpc_request_default_instance_;
    new (ptr) ::action_message::rpc_request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::rpc_request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rpc_request_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrpc_request_message_2eproto}, {
      &scc_info_meta_message_2eproto.base,}};

static void InitDefaultsrpc_response_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::action_message::_rpc_response_default_instance_;
    new (ptr) ::action_message::rpc_response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::action_message::rpc_response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_rpc_response_message_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsrpc_response_message_2eproto}, {
      &scc_info_error_message_2eproto.base,}};

void InitDefaults_message_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_error_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_meta_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rpc_request_message_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_rpc_response_message_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_message_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_message_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::action_message::error, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::error, code_),
  PROTOBUF_FIELD_OFFSET(::action_message::error, msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::meta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::meta, id_),
  PROTOBUF_FIELD_OFFSET(::action_message::meta, service_id_),
  PROTOBUF_FIELD_OFFSET(::action_message::meta, method_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, head_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, type_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, msg_id_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_request, data_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, msg_id_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, type_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, err_),
  PROTOBUF_FIELD_OFFSET(::action_message::rpc_response, data_),
  3,
  2,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::action_message::error)},
  { 9, 17, sizeof(::action_message::meta)},
  { 20, 29, sizeof(::action_message::rpc_request)},
  { 33, 42, sizeof(::action_message::rpc_response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_meta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_rpc_request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::action_message::_rpc_response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_message_2eproto = {
  {}, AddDescriptors_message_2eproto, "message.proto", schemas,
  file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 4, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, InitDefaults_message_2eproto, 
  "\n\rmessage.proto\022\016action_message\"\"\n\005error"
  "\022\014\n\004code\030\001 \001(\r\022\013\n\003msg\030\002 \001(\t\"9\n\004meta\022\n\n\002i"
  "d\030\001 \001(\r\022\022\n\nservice_id\030\002 \001(\r\022\021\n\tmethod_id"
  "\030\003 \001(\r\"\226\001\n\013rpc_request\022\"\n\004head\030\001 \001(\0132\024.a"
  "ction_message.meta\022)\n\004type\030\002 \001(\0162\033.actio"
  "n_message.object_type\022*\n\006msg_id\030\003 \001(\0162\032."
  "action_message.message_id\022\014\n\004data\030\004 \001(\014\""
  "\227\001\n\014rpc_response\022*\n\006msg_id\030\001 \001(\0162\032.actio"
  "n_message.message_id\022)\n\004type\030\002 \001(\0162\033.act"
  "ion_message.object_type\022\"\n\003err\030\003 \001(\0132\025.a"
  "ction_message.error\022\014\n\004data\030\004 \001(\014*\317\n\n\013ob"
  "ject_type\022\024\n\020null_object_type\020\000\022\027\n\023accou"
  "nt_object_type\020\001\022 \n\034account_sequence_obj"
  "ect_type\020\002\022\032\n\026permission_object_type\020\003\022 "
  "\n\034permission_usage_object_type\020\004\022\037\n\033perm"
  "ission_link_object_type\020\005\022\"\n\036UNUSED_acti"
  "on_code_object_type\020\006\022\031\n\025key_value_objec"
  "t_type\020\007\022\027\n\023index64_object_type\020\010\022\030\n\024ind"
  "ex128_object_type\020\t\022\030\n\024index256_object_t"
  "ype\020\n\022\034\n\030index_double_object_type\020\013\022!\n\035i"
  "ndex_long_double_object_type\020\014\022\037\n\033global"
  "_property_object_type\020\r\022\'\n#dynamic_globa"
  "l_property_object_type\020\016\022\035\n\031block_summar"
  "y_object_type\020\017\022\033\n\027transaction_object_ty"
  "pe\020\020\022%\n!generated_transaction_object_typ"
  "e\020\021\022\030\n\024producer_object_type\020\022\022%\n!UNUSED_"
  "chain_property_object_type\020\023\022\'\n#account_"
  "control_history_object_type\020\024\0222\n.UNUSED_"
  "account_transaction_history_object_type\020"
  "\025\022*\n&UNUSED_transaction_history_object_t"
  "ype\020\026\022\"\n\036public_key_history_object_type\020"
  "\027\022\036\n\032UNUSED_balance_object_type\020\030\022%\n!UNU"
  "SED_staked_balance_object_type\020\031\022%\n!UNUS"
  "ED_producer_votes_object_type\020\032\022(\n$UNUSE"
  "D_producer_schedule_object_type\020\033\022!\n\035UNU"
  "SED_proxy_vote_object_type\020\034\022%\n!UNUSED_s"
  "cope_sequence_object_type\020\035\022\030\n\024table_id_"
  "object_type\020\036\022\037\n\033resource_limits_object_"
  "type\020\037\022\036\n\032resource_usage_object_type\020 \022%"
  "\n!resource_limits_state_object_type\020!\022&\n"
  "\"resource_limits_config_object_type\020\"\022\037\n"
  "\033account_history_object_type\020#\022\036\n\032action"
  "_history_object_type\020$\022 \n\034reversible_blo"
  "ck_object_type\020%\022\034\n\030signed_block_object_"
  "type\020(\022\033\n\027block_state_object_type\020)*\215>\n\n"
  "message_id\022\033\n\026account_create_request\020\350\007\022"
  "\034\n\027account_create_response\020\351\007\022\032\n\025account"
  "_guery_request\020\352\007\022\033\n\026account_query_respo"
  "nse\020\353\007\022\033\n\026account_update_request\020\354\007\022\034\n\027a"
  "ccount_update_response\020\355\007\022\033\n\026account_rem"
  "ove_request\020\356\007\022\034\n\027account_remove_respons"
  "e\020\357\007\022$\n\037account_sequence_create_request\020"
  "\360\007\022%\n account_sequence_create_response\020\361"
  "\007\022#\n\036account_sequence_query_request\020\362\007\022$"
  "\n\037account_sequence_query_response\020\363\007\022$\n\037"
  "account_sequence_update_request\020\364\007\022%\n ac"
  "count_sequence_update_response\020\365\007\022$\n\037acc"
  "ount_sequence_remove_request\020\366\007\022%\n accou"
  "nt_sequence_remove_response\020\367\007\022\036\n\031permis"
  "sion_create_request\020\370\007\022\037\n\032permission_cre"
  "ate_response\020\371\007\022\035\n\030permission_query_requ"
  "est\020\372\007\022\036\n\031permission_query_response\020\373\007\022\036"
  "\n\031permission_update_request\020\374\007\022\037\n\032permis"
  "sion_update_response\020\375\007\022\036\n\031permission_re"
  "move_request\020\376\007\022\037\n\032permission_remove_res"
  "ponse\020\377\007\022$\n\037permission_usage_create_requ"
  "est\020\200\010\022%\n permission_usage_create_respon"
  "se\020\201\010\022#\n\036permission_usage_query_request\020"
  "\202\010\022$\n\037permission_usage_query_response\020\203\010"
  "\022$\n\037permission_usage_update_request\020\204\010\022%"
  "\n permission_usage_update_response\020\205\010\022$\n"
  "\037permission_usage_remove_request\020\206\010\022%\n p"
  "ermission_usage_remove_response\020\207\010\022#\n\036pe"
  "rmission_link_create_request\020\210\010\022$\n\037permi"
  "ssion_link_create_response\020\211\010\022\"\n\035permiss"
  "ion_link_query_request\020\212\010\022#\n\036permission_"
  "link_query_response\020\213\010\022#\n\036permission_lin"
  "k_update_request\020\214\010\022$\n\037permission_link_u"
  "pdate_response\020\215\010\022#\n\036permission_link_rem"
  "ove_request\020\216\010\022$\n\037permission_link_remove"
  "_response\020\220\010\022\035\n\030key_value_create_request"
  "\020\221\010\022\036\n\031key_value_create_response\020\222\010\022\034\n\027k"
  "ey_value_query_request\020\223\010\022\035\n\030key_value_q"
  "uery_response\020\224\010\022\035\n\030key_value_update_req"
  "uest\020\225\010\022\036\n\031key_value_update_response\020\226\010\022"
  "\035\n\030key_value_remove_request\020\227\010\022\036\n\031key_va"
  "lue_remove_response\020\230\010\022\033\n\026index64_create"
  "_request\020\231\010\022\034\n\027index64_create_response\020\232"
  "\010\022\032\n\025index64_query_request\020\233\010\022\033\n\026index64"
  "_query_response\020\234\010\022\033\n\026index64_update_req"
  "uest\020\235\010\022\034\n\027index64_update_response\020\236\010\022\033\n"
  "\026index64_remove_request\020\237\010\022\034\n\027index64_re"
  "move_response\020\240\010\022\034\n\027index128_create_requ"
  "est\020\241\010\022\035\n\030index128_create_response\020\242\010\022\033\n"
  "\026index128_query_request\020\244\010\022\034\n\027index128_q"
  "uery_response\020\245\010\022\034\n\027index128_update_requ"
  "est\020\246\010\022\035\n\030index128_update_response\020\247\010\022\034\n"
  "\027index128_remove_request\020\250\010\022\035\n\030index128_"
  "remove_response\020\251\010\022\034\n\027index256_create_re"
  "quest\020\252\010\022\035\n\030index256_create_response\020\253\010\022"
  "\033\n\026index256_query_request\020\254\010\022\034\n\027index256"
  "_query_response\020\255\010\022\034\n\027index256_update_re"
  "quest\020\256\010\022\035\n\030index256_update_response\020\257\010\022"
  "\034\n\027index256_remove_request\020\260\010\022\035\n\030index25"
  "6_remove_response\020\261\010\022 \n\033index_double_cre"
  "ate_request\020\262\010\022!\n\034index_double_create_re"
  "sponse\020\263\010\022\037\n\032index_double_query_request\020"
  "\264\010\022 \n\033index_double_query_response\020\265\010\022 \n\033"
  "index_double_update_request\020\266\010\022!\n\034index_"
  "double_update_response\020\267\010\022 \n\033index_doubl"
  "e_remove_request\020\270\010\022!\n\034index_double_remo"
  "ve_response\020\271\010\022%\n index_long_double_crea"
  "te_request\020\272\010\022&\n!index_long_double_creat"
  "e_response\020\273\010\022$\n\037index_long_double_query"
  "_request\020\274\010\022%\n index_long_double_query_r"
  "esponse\020\275\010\022%\n index_long_double_update_r"
  "equest\020\276\010\022&\n!index_long_double_update_re"
  "sponse\020\277\010\022%\n index_long_double_remove_re"
  "quest\020\300\010\022&\n!index_long_double_remove_res"
  "ponse\020\301\010\022#\n\036global_property_create_reque"
  "st\020\302\010\022$\n\037global_property_create_response"
  "\020\303\010\022\"\n\035global_property_query_request\020\304\010\022"
  "#\n\036global_property_query_response\020\305\010\022#\n\036"
  "global_property_update_request\020\306\010\022$\n\037glo"
  "bal_property_update_response\020\307\010\022#\n\036globa"
  "l_property_remove_request\020\310\010\022$\n\037global_p"
  "roperty_remove_response\020\311\010\022+\n&dynamic_gl"
  "obal_property_create_request\020\312\010\022,\n\'dynam"
  "ic_global_property_create_response\020\313\010\022*\n"
  "%dynamic_global_property_query_request\020\314"
  "\010\022+\n&dynamic_global_property_query_respo"
  "nse\020\315\010\022+\n&dynamic_global_property_update"
  "_request\020\316\010\022,\n\'dynamic_global_property_u"
  "pdate_response\020\317\010\022+\n&dynamic_global_prop"
  "erty_remove_request\020\320\010\022,\n\'dynamic_global"
  "_property_remove_response\020\321\010\022!\n\034block_su"
  "mmary_create_request\020\322\010\022\"\n\035block_summary"
  "_create_response\020\323\010\022 \n\033block_summary_que"
  "ry_request\020\324\010\022!\n\034block_summary_query_res"
  "ponse\020\325\010\022!\n\034block_summary_update_request"
  "\020\326\010\022\"\n\035block_summary_update_response\020\327\010\022"
  "!\n\034block_summary_remove_request\020\330\010\022\"\n\035bl"
  "ock_summary_remove_response\020\331\010\022\037\n\032transa"
  "ction_create_request\020\332\010\022 \n\033transaction_c"
  "reate_response\020\333\010\022\036\n\031transaction_query_r"
  "equest\020\334\010\022\037\n\032transaction_query_response\020"
  "\335\010\022\037\n\032transaction_update_request\020\336\010\022 \n\033t"
  "ransaction_update_response\020\337\010\022\037\n\032transac"
  "tion_remove_request\020\340\010\022 \n\033transaction_re"
  "move_response\020\341\010\022)\n$generated_transactio"
  "n_create_request\020\342\010\022*\n%generated_transac"
  "tion_create_response\020\343\010\022(\n#generated_tra"
  "nsaction_query_request\020\344\010\022)\n$generated_t"
  "ransaction_query_response\020\345\010\022)\n$generate"
  "d_transaction_update_request\020\346\010\022*\n%gener"
  "ated_transaction_update_response\020\347\010\022)\n$g"
  "enerated_transaction_remove_request\020\350\010\022*"
  "\n%generated_transaction_remove_response\020"
  "\351\010\022\034\n\027producer_create_request\020\352\010\022\035\n\030prod"
  "ucer_create_response\020\353\010\022\033\n\026producer_quer"
  "y_request\020\354\010\022\034\n\027producer_query_response\020"
  "\355\010\022\034\n\027producer_update_request\020\356\010\022\035\n\030prod"
  "ucer_update_response\020\357\010\022\034\n\027producer_remo"
  "ve_request\020\360\010\022\035\n\030producer_remove_respons"
  "e\020\361\010\022+\n&account_control_history_create_r"
  "equest\020\362\010\022,\n\'account_control_history_cre"
  "ate_response\020\363\010\022*\n%account_control_histo"
  "ry_query_request\020\364\010\022+\n&account_control_h"
  "istory_query_response\020\365\010\022+\n&account_cont"
  "rol_history_update_request\020\366\010\022,\n\'account"
  "_control_history_update_response\020\367\010\022+\n&a"
  "ccount_control_history_remove_request\020\370\010"
  "\022,\n\'account_control_history_remove_respo"
  "nse\020\371\010\022&\n!public_key_history_create_requ"
  "est\020\372\010\022\'\n\"public_key_history_create_resp"
  "onse\020\373\010\022%\n public_key_history_query_requ"
  "est\020\374\010\022&\n!public_key_history_query_respo"
  "nse\020\375\010\022&\n!public_key_history_update_requ"
  "est\020\376\010\022\'\n\"public_key_history_update_resp"
  "onse\020\377\010\022&\n!public_key_history_remove_req"
  "uest\020\200\t\022\'\n\"public_key_history_remove_res"
  "ponse\020\201\t\022\034\n\027table_id_create_request\020\202\t\022\035"
  "\n\030table_id_create_response\020\203\t\022\033\n\026table_i"
  "d_query_request\020\204\t\022\034\n\027table_id_query_res"
  "ponse\020\205\t\022\034\n\027table_id_update_request\020\206\t\022\035"
  "\n\030table_id_update_response\020\207\t\022\034\n\027table_i"
  "d_remove_request\020\210\t\022\035\n\030table_id_remove_r"
  "esponse\020\211\t\022#\n\036resource_limits_create_req"
  "uest\020\212\t\022$\n\037resource_limits_create_respon"
  "se\020\213\t\022\"\n\035resource_limits_query_request\020\214"
  "\t\022#\n\036resource_limits_query_response\020\215\t\022#"
  "\n\036resource_limits_update_request\020\216\t\022$\n\037r"
  "esource_limits_update_response\020\217\t\022#\n\036res"
  "ource_limits_remove_request\020\220\t\022$\n\037resour"
  "ce_limits_remove_response\020\221\t\022\"\n\035resource"
  "_usage_create_request\020\222\t\022#\n\036resource_usa"
  "ge_create_response\020\223\t\022!\n\034resource_usage_"
  "query_request\020\224\t\022\"\n\035resource_usage_query"
  "_response\020\225\t\022\"\n\035resource_usage_update_re"
  "quest\020\226\t\022#\n\036resource_usage_update_respon"
  "se\020\227\t\022\"\n\035resource_usage_remove_request\020\230"
  "\t\022#\n\036resource_usage_remove_response\020\231\t\022)"
  "\n$resource_limits_state_create_request\020\232"
  "\t\022*\n%resource_limits_state_create_respon"
  "se\020\233\t\022(\n#resource_limits_state_query_req"
  "uest\020\234\t\022)\n$resource_limits_state_query_r"
  "esponse\020\235\t\022)\n$resource_limits_state_upda"
  "te_request\020\236\t\022*\n%resource_limits_state_u"
  "pdate_response\020\237\t\022)\n$resource_limits_sta"
  "te_remove_request\020\240\t\022*\n%resource_limits_"
  "state_remove_response\020\241\t\022*\n%resource_lim"
  "its_config_create_request\020\242\t\022+\n&resource"
  "_limits_config_create_response\020\243\t\022)\n$res"
  "ource_limits_config_query_request\020\244\t\022*\n%"
  "resource_limits_config_query_response\020\245\t"
  "\022*\n%resource_limits_config_update_reques"
  "t\020\246\t\022+\n&resource_limits_config_update_re"
  "sponse\020\247\t\022*\n%resource_limits_config_remo"
  "ve_request\020\250\t\022+\n&resource_limits_config_"
  "remove_response\020\251\t\022#\n\036account_history_cr"
  "eate_request\020\252\t\022$\n\037account_history_creat"
  "e_response\020\253\t\022\"\n\035account_history_query_r"
  "equest\020\254\t\022#\n\036account_history_query_respo"
  "nse\020\255\t\022#\n\036account_history_update_request"
  "\020\256\t\022$\n\037account_history_update_response\020\257"
  "\t\022#\n\036account_history_remove_request\020\260\t\022$"
  "\n\037account_history_remove_response\020\261\t\022\"\n\035"
  "action_history_create_request\020\262\t\022#\n\036acti"
  "on_history_create_response\020\263\t\022!\n\034action_"
  "history_query_request\020\264\t\022\"\n\035action_histo"
  "ry_query_response\020\265\t\022\"\n\035action_history_u"
  "pdate_request\020\266\t\022#\n\036action_history_updat"
  "e_response\020\267\t\022\"\n\035action_history_remove_r"
  "equest\020\270\t\022#\n\036action_history_remove_respo"
  "nse\020\271\t\022$\n\037reversible_block_create_reques"
  "t\020\272\t\022%\n reversible_block_create_response"
  "\020\273\t\022#\n\036reversible_block_query_request\020\274\t"
  "\022$\n\037reversible_block_query_response\020\275\t\022$"
  "\n\037reversible_block_update_request\020\276\t\022%\n "
  "reversible_block_update_response\020\277\t\022$\n\037r"
  "eversible_block_remove_request\020\300\t\022%\n rev"
  "ersible_block_remove_response\020\301\t\022#\n\036perm"
  "ission_level_check_request\020\320\017\022$\n\037permiss"
  "ion_level_check_response\020\321\017"
,
  "message.proto", &assign_descriptors_table_message_2eproto, 9747,
};

void AddDescriptors_message_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_message_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = []() { AddDescriptors_message_2eproto(); return true; }();
namespace action_message {
const ::google::protobuf::EnumDescriptor* object_type_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool object_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* message_id_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool message_id_IsValid(int value) {
  switch (value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1082:
    case 1083:
    case 1084:
    case 1085:
    case 1086:
    case 1087:
    case 1088:
    case 1089:
    case 1090:
    case 1091:
    case 1092:
    case 1093:
    case 1094:
    case 1095:
    case 1096:
    case 1097:
    case 1098:
    case 1099:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
    case 1118:
    case 1119:
    case 1120:
    case 1121:
    case 1122:
    case 1123:
    case 1124:
    case 1125:
    case 1126:
    case 1127:
    case 1128:
    case 1129:
    case 1130:
    case 1131:
    case 1132:
    case 1133:
    case 1134:
    case 1135:
    case 1136:
    case 1137:
    case 1138:
    case 1139:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1145:
    case 1146:
    case 1147:
    case 1148:
    case 1149:
    case 1150:
    case 1151:
    case 1152:
    case 1153:
    case 1154:
    case 1155:
    case 1156:
    case 1157:
    case 1158:
    case 1159:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1167:
    case 1168:
    case 1169:
    case 1170:
    case 1171:
    case 1172:
    case 1173:
    case 1174:
    case 1175:
    case 1176:
    case 1177:
    case 1178:
    case 1179:
    case 1180:
    case 1181:
    case 1182:
    case 1183:
    case 1184:
    case 1185:
    case 1186:
    case 1187:
    case 1188:
    case 1189:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
    case 1207:
    case 1208:
    case 1209:
    case 1210:
    case 1211:
    case 1212:
    case 1213:
    case 1214:
    case 1215:
    case 1216:
    case 1217:
    case 2000:
    case 2001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void error::InitAsDefaultInstance() {
}
class error::HasBitSetters {
 public:
  static void set_has_code(error* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msg(error* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int error::kCodeFieldNumber;
const int error::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

error::error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.error)
}
error::error(const error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:action_message.error)
}

void error::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_error_message_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0u;
}

error::~error() {
  // @@protoc_insertion_point(destructor:action_message.error)
  SharedDtor();
}

void error::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void error::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const error& error::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_error_message_2eproto.base);
  return *internal_default_instance();
}


void error::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    msg_.ClearNonDefaultToEmptyNoArena();
  }
  code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* error::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<error*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_code(value);
        break;
      }
      // optional string msg = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("action_message.error.msg");
        parser_till_end = ::google::protobuf::internal::StringParserUTF8Verify;
        ::std::string* str = msg->mutable_msg();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.error)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "action_message.error.msg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.error)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action_message.error.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.error)
}

::google::protobuf::uint8* error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "action_message.error.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.error)
  return target;
}

size_t error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint32 code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.error)
  GOOGLE_DCHECK_NE(&from, this);
  const error* source =
      ::google::protobuf::DynamicCastToGenerated<error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.error)
    MergeFrom(*source);
  }
}

void error::MergeFrom(const error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void error::CopyFrom(const error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool error::IsInitialized() const {
  return true;
}

void error::Swap(error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void error::InternalSwap(error* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::google::protobuf::Metadata error::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void meta::InitAsDefaultInstance() {
}
class meta::HasBitSetters {
 public:
  static void set_has_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_service_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_method_id(meta* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int meta::kIdFieldNumber;
const int meta::kServiceIdFieldNumber;
const int meta::kMethodIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

meta::meta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.meta)
}
meta::meta(const meta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  // @@protoc_insertion_point(copy_constructor:action_message.meta)
}

void meta::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
}

meta::~meta() {
  // @@protoc_insertion_point(destructor:action_message.meta)
  SharedDtor();
}

void meta::SharedDtor() {
}

void meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const meta& meta::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_meta_message_2eproto.base);
  return *internal_default_instance();
}


void meta::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(method_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* meta::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<meta*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_id(value);
        break;
      }
      // optional uint32 service_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_service_id(value);
        break;
      }
      // optional uint32 method_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_method_id(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.meta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 service_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_service_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 method_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_method_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &method_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.meta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.meta)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 service_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->service_id(), output);
  }

  // optional uint32 method_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->method_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.meta)
}

::google::protobuf::uint8* meta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.meta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 service_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->service_id(), target);
  }

  // optional uint32 method_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->method_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.meta)
  return target;
}

size_t meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.meta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 service_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->service_id());
    }

    // optional uint32 method_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->method_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void meta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.meta)
  GOOGLE_DCHECK_NE(&from, this);
  const meta* source =
      ::google::protobuf::DynamicCastToGenerated<meta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.meta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.meta)
    MergeFrom(*source);
  }
}

void meta::MergeFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.meta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      service_id_ = from.service_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_id_ = from.method_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void meta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void meta::CopyFrom(const meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool meta::IsInitialized() const {
  return true;
}

void meta::Swap(meta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void meta::InternalSwap(meta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(service_id_, other->service_id_);
  swap(method_id_, other->method_id_);
}

::google::protobuf::Metadata meta::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void rpc_request::InitAsDefaultInstance() {
  ::action_message::_rpc_request_default_instance_._instance.get_mutable()->head_ = const_cast< ::action_message::meta*>(
      ::action_message::meta::internal_default_instance());
}
class rpc_request::HasBitSetters {
 public:
  static const ::action_message::meta& head(const rpc_request* msg);
  static void set_has_head(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_type(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_msg_id(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(rpc_request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::action_message::meta&
rpc_request::HasBitSetters::head(const rpc_request* msg) {
  return *msg->head_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_request::kHeadFieldNumber;
const int rpc_request::kTypeFieldNumber;
const int rpc_request::kMsgIdFieldNumber;
const int rpc_request::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_request::rpc_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.rpc_request)
}
rpc_request::rpc_request(const rpc_request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_head()) {
    head_ = new ::action_message::meta(*from.head_);
  } else {
    head_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:action_message.rpc_request)
}

void rpc_request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_rpc_request_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&head_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&head_)) + sizeof(type_));
  msg_id_ = 1000;
}

rpc_request::~rpc_request() {
  // @@protoc_insertion_point(destructor:action_message.rpc_request)
  SharedDtor();
}

void rpc_request::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete head_;
}

void rpc_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_request& rpc_request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_rpc_request_message_2eproto.base);
  return *internal_default_instance();
}


void rpc_request::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(head_ != NULL);
      head_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    type_ = 0;
    msg_id_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* rpc_request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<rpc_request*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .action_message.meta head = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::action_message::meta::_InternalParse;
        object = msg->mutable_head();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional .action_message.object_type type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::action_message::object_type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        ::action_message::object_type value = static_cast<::action_message::object_type>(val);
        msg->set_type(value);
        break;
      }
      // optional .action_message.message_id msg_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::action_message::message_id_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        ::action_message::message_id value = static_cast<::action_message::message_id>(val);
        msg->set_msg_id(value);
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool rpc_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.rpc_request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .action_message.meta head = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .action_message.object_type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::action_message::object_type_IsValid(value)) {
            set_type(static_cast< ::action_message::object_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .action_message.message_id msg_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::action_message::message_id_IsValid(value)) {
            set_msg_id(static_cast< ::action_message::message_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.rpc_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.rpc_request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void rpc_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.meta head = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::head(this), output);
  }

  // optional .action_message.object_type type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .action_message.message_id msg_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->msg_id(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.rpc_request)
}

::google::protobuf::uint8* rpc_request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.rpc_request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.meta head = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::head(this), deterministic, target);
  }

  // optional .action_message.object_type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .action_message.message_id msg_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->msg_id(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.rpc_request)
  return target;
}

size_t rpc_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.rpc_request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .action_message.meta head = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *head_);
    }

    // optional .action_message.object_type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .action_message.message_id msg_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_request* source =
      ::google::protobuf::DynamicCastToGenerated<rpc_request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.rpc_request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.rpc_request)
    MergeFrom(*source);
  }
}

void rpc_request::MergeFrom(const rpc_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.rpc_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_head()->::action_message::meta::MergeFrom(from.head());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_request::CopyFrom(const rpc_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.rpc_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_request::IsInitialized() const {
  return true;
}

void rpc_request::Swap(rpc_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_request::InternalSwap(rpc_request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(head_, other->head_);
  swap(type_, other->type_);
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata rpc_request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// ===================================================================

void rpc_response::InitAsDefaultInstance() {
  ::action_message::_rpc_response_default_instance_._instance.get_mutable()->err_ = const_cast< ::action_message::error*>(
      ::action_message::error::internal_default_instance());
}
class rpc_response::HasBitSetters {
 public:
  static void set_has_msg_id(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_type(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::action_message::error& err(const rpc_response* msg);
  static void set_has_err(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(rpc_response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::action_message::error&
rpc_response::HasBitSetters::err(const rpc_response* msg) {
  return *msg->err_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rpc_response::kMsgIdFieldNumber;
const int rpc_response::kTypeFieldNumber;
const int rpc_response::kErrFieldNumber;
const int rpc_response::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rpc_response::rpc_response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:action_message.rpc_response)
}
rpc_response::rpc_response(const rpc_response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_err()) {
    err_ = new ::action_message::error(*from.err_);
  } else {
    err_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:action_message.rpc_response)
}

void rpc_response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_rpc_response_message_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&err_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&err_)) + sizeof(type_));
  msg_id_ = 1000;
}

rpc_response::~rpc_response() {
  // @@protoc_insertion_point(destructor:action_message.rpc_response)
  SharedDtor();
}

void rpc_response::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete err_;
}

void rpc_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rpc_response& rpc_response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_rpc_response_message_2eproto.base);
  return *internal_default_instance();
}


void rpc_response::Clear() {
// @@protoc_insertion_point(message_clear_start:action_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(err_ != NULL);
      err_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    type_ = 0;
    msg_id_ = 1000;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* rpc_response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<rpc_response*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .action_message.message_id msg_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::action_message::message_id_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        ::action_message::message_id value = static_cast<::action_message::message_id>(val);
        msg->set_msg_id(value);
        break;
      }
      // optional .action_message.object_type type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        if (!::action_message::object_type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        ::action_message::object_type value = static_cast<::action_message::object_type>(val);
        msg->set_type(value);
        break;
      }
      // optional .action_message.error err = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::action_message::error::_InternalParse;
        object = msg->mutable_err();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // optional bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::StringParser;
        ::std::string* str = msg->mutable_data();
        str->clear();
        object = str;
        if (size > end - ptr) goto len_delim_till_end;
        str->append(ptr, size);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool rpc_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:action_message.rpc_response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .action_message.message_id msg_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::action_message::message_id_IsValid(value)) {
            set_msg_id(static_cast< ::action_message::message_id >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .action_message.object_type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::action_message::object_type_IsValid(value)) {
            set_type(static_cast< ::action_message::object_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .action_message.error err = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_err()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:action_message.rpc_response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:action_message.rpc_response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void rpc_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:action_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_id(), output);
  }

  // optional .action_message.object_type type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .action_message.error err = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::err(this), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:action_message.rpc_response)
}

::google::protobuf::uint8* rpc_response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:action_message.rpc_response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .action_message.message_id msg_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_id(), target);
  }

  // optional .action_message.object_type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .action_message.error err = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::err(this), deterministic, target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:action_message.rpc_response)
  return target;
}

size_t rpc_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:action_message.rpc_response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .action_message.error err = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *err_);
    }

    // optional .action_message.object_type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .action_message.message_id msg_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rpc_response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:action_message.rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  const rpc_response* source =
      ::google::protobuf::DynamicCastToGenerated<rpc_response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:action_message.rpc_response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:action_message.rpc_response)
    MergeFrom(*source);
  }
}

void rpc_response::MergeFrom(const rpc_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:action_message.rpc_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_err()->::action_message::error::MergeFrom(from.err());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_id_ = from.msg_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void rpc_response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:action_message.rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rpc_response::CopyFrom(const rpc_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:action_message.rpc_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rpc_response::IsInitialized() const {
  return true;
}

void rpc_response::Swap(rpc_response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rpc_response::InternalSwap(rpc_response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(err_, other->err_);
  swap(type_, other->type_);
  swap(msg_id_, other->msg_id_);
}

::google::protobuf::Metadata rpc_response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_message_2eproto);
  return ::file_level_metadata_message_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace action_message
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::action_message::error* Arena::CreateMaybeMessage< ::action_message::error >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::error >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::meta* Arena::CreateMaybeMessage< ::action_message::meta >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::meta >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::rpc_request* Arena::CreateMaybeMessage< ::action_message::rpc_request >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::rpc_request >(arena);
}
template<> PROTOBUF_NOINLINE ::action_message::rpc_response* Arena::CreateMaybeMessage< ::action_message::rpc_response >(Arena* arena) {
  return Arena::CreateInternal< ::action_message::rpc_response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
