// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fork_database_service.proto

#ifndef PROTOBUF_INCLUDED_fork_5fdatabase_5fservice_2eproto
#define PROTOBUF_INCLUDED_fork_5fdatabase_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fork_5fdatabase_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_fork_5fdatabase_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_fork_5fdatabase_5fservice_2eproto();
namespace fork_db_message {
class branch_t;
class branch_tDefaultTypeInternal;
extern branch_tDefaultTypeInternal _branch_t_default_instance_;
class error;
class errorDefaultTypeInternal;
extern errorDefaultTypeInternal _error_default_instance_;
class meta;
class metaDefaultTypeInternal;
extern metaDefaultTypeInternal _meta_default_instance_;
class rpc_request;
class rpc_requestDefaultTypeInternal;
extern rpc_requestDefaultTypeInternal _rpc_request_default_instance_;
class rpc_response;
class rpc_responseDefaultTypeInternal;
extern rpc_responseDefaultTypeInternal _rpc_response_default_instance_;
}  // namespace fork_db_message
namespace google {
namespace protobuf {
template<> ::fork_db_message::branch_t* Arena::CreateMaybeMessage<::fork_db_message::branch_t>(Arena*);
template<> ::fork_db_message::error* Arena::CreateMaybeMessage<::fork_db_message::error>(Arena*);
template<> ::fork_db_message::meta* Arena::CreateMaybeMessage<::fork_db_message::meta>(Arena*);
template<> ::fork_db_message::rpc_request* Arena::CreateMaybeMessage<::fork_db_message::rpc_request>(Arena*);
template<> ::fork_db_message::rpc_response* Arena::CreateMaybeMessage<::fork_db_message::rpc_response>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fork_db_message {

enum message_id {
  block_get_request = 3000,
  block_get_response = 3001,
  block_get_by_num_request = 3002,
  block_get_by_num_response = 3003,
  block_set_request = 3004,
  block_set_response = 3005,
  block_add_by_signed_block_request = 3006,
  block_add_by_signed_block_response = 3007,
  block_add_by_block_state_request = 3008,
  block_add_by_block_state_response = 3009,
  block_remove_by_id_request = 3010,
  block_remove_by_id_response = 3011,
  block_add_by_header_confirmation_request = 3012,
  block_add_by_header_confirmation_response = 3013,
  block_get_head_request = 3014,
  block_get_head_response = 3015,
  block_fetch_branch_request = 3016,
  block_fetch_branch_response = 3017,
  block_set_validity_request = 3018,
  block_set_validity_response = 3019,
  block_mark_in_current_chain_request = 3020,
  block_mark_in_current_chain_response = 3021,
  block_prune_request = 3022,
  block_prune_response = 3023,
  block_irreversible_broadcast = 4000,
  block_irreversible_notify = 4001
};
bool message_id_IsValid(int value);
const message_id message_id_MIN = block_get_request;
const message_id message_id_MAX = block_irreversible_notify;
const int message_id_ARRAYSIZE = message_id_MAX + 1;

const ::google::protobuf::EnumDescriptor* message_id_descriptor();
inline const ::std::string& message_id_Name(message_id value) {
  return ::google::protobuf::internal::NameOfEnum(
    message_id_descriptor(), value);
}
inline bool message_id_Parse(
    const ::std::string& name, message_id* value) {
  return ::google::protobuf::internal::ParseNamedEnum<message_id>(
    message_id_descriptor(), name, value);
}
// ===================================================================

class error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fork_db_message.error) */ {
 public:
  error();
  virtual ~error();

  error(const error& from);

  inline error& operator=(const error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  error(error&& from) noexcept
    : error() {
    *this = ::std::move(from);
  }

  inline error& operator=(error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const error* internal_default_instance() {
    return reinterpret_cast<const error*>(
               &_error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(error* other);
  friend void swap(error& a, error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline error* New() const final {
    return CreateMaybeMessage<error>(NULL);
  }

  error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const error& from);
  void MergeFrom(const error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional uint32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint32 code() const;
  void set_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fork_db_message.error)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 code_;
  friend struct ::TableStruct_fork_5fdatabase_5fservice_2eproto;
};
// -------------------------------------------------------------------

class meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fork_db_message.meta) */ {
 public:
  meta();
  virtual ~meta();

  meta(const meta& from);

  inline meta& operator=(const meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  meta(meta&& from) noexcept
    : meta() {
    *this = ::std::move(from);
  }

  inline meta& operator=(meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const meta* internal_default_instance() {
    return reinterpret_cast<const meta*>(
               &_meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(meta* other);
  friend void swap(meta& a, meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline meta* New() const final {
    return CreateMaybeMessage<meta>(NULL);
  }

  meta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<meta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const meta& from);
  void MergeFrom(const meta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 service_id = 2;
  bool has_service_id() const;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 2;
  ::google::protobuf::uint32 service_id() const;
  void set_service_id(::google::protobuf::uint32 value);

  // optional uint32 method_id = 3;
  bool has_method_id() const;
  void clear_method_id();
  static const int kMethodIdFieldNumber = 3;
  ::google::protobuf::uint32 method_id() const;
  void set_method_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fork_db_message.meta)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 service_id_;
  ::google::protobuf::uint32 method_id_;
  friend struct ::TableStruct_fork_5fdatabase_5fservice_2eproto;
};
// -------------------------------------------------------------------

class branch_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fork_db_message.branch_t) */ {
 public:
  branch_t();
  virtual ~branch_t();

  branch_t(const branch_t& from);

  inline branch_t& operator=(const branch_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  branch_t(branch_t&& from) noexcept
    : branch_t() {
    *this = ::std::move(from);
  }

  inline branch_t& operator=(branch_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const branch_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const branch_t* internal_default_instance() {
    return reinterpret_cast<const branch_t*>(
               &_branch_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(branch_t* other);
  friend void swap(branch_t& a, branch_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline branch_t* New() const final {
    return CreateMaybeMessage<branch_t>(NULL);
  }

  branch_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<branch_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const branch_t& from);
  void MergeFrom(const branch_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(branch_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes first = 1;
  int first_size() const;
  void clear_first();
  static const int kFirstFieldNumber = 1;
  const ::std::string& first(int index) const;
  ::std::string* mutable_first(int index);
  void set_first(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_first(int index, ::std::string&& value);
  #endif
  void set_first(int index, const char* value);
  void set_first(int index, const void* value, size_t size);
  ::std::string* add_first();
  void add_first(const ::std::string& value);
  #if LANG_CXX11
  void add_first(::std::string&& value);
  #endif
  void add_first(const char* value);
  void add_first(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& first() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_first();

  // repeated bytes second = 2;
  int second_size() const;
  void clear_second();
  static const int kSecondFieldNumber = 2;
  const ::std::string& second(int index) const;
  ::std::string* mutable_second(int index);
  void set_second(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_second(int index, ::std::string&& value);
  #endif
  void set_second(int index, const char* value);
  void set_second(int index, const void* value, size_t size);
  ::std::string* add_second();
  void add_second(const ::std::string& value);
  #if LANG_CXX11
  void add_second(::std::string&& value);
  #endif
  void add_second(const char* value);
  void add_second(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& second() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_second();

  // @@protoc_insertion_point(class_scope:fork_db_message.branch_t)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> first_;
  ::google::protobuf::RepeatedPtrField<::std::string> second_;
  friend struct ::TableStruct_fork_5fdatabase_5fservice_2eproto;
};
// -------------------------------------------------------------------

class rpc_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fork_db_message.rpc_request) */ {
 public:
  rpc_request();
  virtual ~rpc_request();

  rpc_request(const rpc_request& from);

  inline rpc_request& operator=(const rpc_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rpc_request(rpc_request&& from) noexcept
    : rpc_request() {
    *this = ::std::move(from);
  }

  inline rpc_request& operator=(rpc_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const rpc_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpc_request* internal_default_instance() {
    return reinterpret_cast<const rpc_request*>(
               &_rpc_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(rpc_request* other);
  friend void swap(rpc_request& a, rpc_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rpc_request* New() const final {
    return CreateMaybeMessage<rpc_request>(NULL);
  }

  rpc_request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rpc_request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rpc_request& from);
  void MergeFrom(const rpc_request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpc_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes first = 5;
  bool has_first() const;
  void clear_first();
  static const int kFirstFieldNumber = 5;
  const ::std::string& first() const;
  void set_first(const ::std::string& value);
  #if LANG_CXX11
  void set_first(::std::string&& value);
  #endif
  void set_first(const char* value);
  void set_first(const void* value, size_t size);
  ::std::string* mutable_first();
  ::std::string* release_first();
  void set_allocated_first(::std::string* first);

  // optional bytes second = 6;
  bool has_second() const;
  void clear_second();
  static const int kSecondFieldNumber = 6;
  const ::std::string& second() const;
  void set_second(const ::std::string& value);
  #if LANG_CXX11
  void set_second(::std::string&& value);
  #endif
  void set_second(const char* value);
  void set_second(const void* value, size_t size);
  ::std::string* mutable_second();
  ::std::string* release_second();
  void set_allocated_second(::std::string* second);

  // optional .fork_db_message.meta head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::fork_db_message::meta& head() const;
  ::fork_db_message::meta* release_head();
  ::fork_db_message::meta* mutable_head();
  void set_allocated_head(::fork_db_message::meta* head);

  // optional bool trust = 4;
  bool has_trust() const;
  void clear_trust();
  static const int kTrustFieldNumber = 4;
  bool trust() const;
  void set_trust(bool value);

  // optional .fork_db_message.message_id msg_id = 2;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 2;
  ::fork_db_message::message_id msg_id() const;
  void set_msg_id(::fork_db_message::message_id value);

  // @@protoc_insertion_point(class_scope:fork_db_message.rpc_request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr first_;
  ::google::protobuf::internal::ArenaStringPtr second_;
  ::fork_db_message::meta* head_;
  bool trust_;
  int msg_id_;
  friend struct ::TableStruct_fork_5fdatabase_5fservice_2eproto;
};
// -------------------------------------------------------------------

class rpc_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fork_db_message.rpc_response) */ {
 public:
  rpc_response();
  virtual ~rpc_response();

  rpc_response(const rpc_response& from);

  inline rpc_response& operator=(const rpc_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  rpc_response(rpc_response&& from) noexcept
    : rpc_response() {
    *this = ::std::move(from);
  }

  inline rpc_response& operator=(rpc_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const rpc_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rpc_response* internal_default_instance() {
    return reinterpret_cast<const rpc_response*>(
               &_rpc_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(rpc_response* other);
  friend void swap(rpc_response& a, rpc_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline rpc_response* New() const final {
    return CreateMaybeMessage<rpc_response>(NULL);
  }

  rpc_response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<rpc_response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const rpc_response& from);
  void MergeFrom(const rpc_response& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rpc_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .fork_db_message.error err = 2;
  bool has_err() const;
  void clear_err();
  static const int kErrFieldNumber = 2;
  const ::fork_db_message::error& err() const;
  ::fork_db_message::error* release_err();
  ::fork_db_message::error* mutable_err();
  void set_allocated_err(::fork_db_message::error* err);

  // optional .fork_db_message.branch_t branch = 4;
  bool has_branch() const;
  void clear_branch();
  static const int kBranchFieldNumber = 4;
  const ::fork_db_message::branch_t& branch() const;
  ::fork_db_message::branch_t* release_branch();
  ::fork_db_message::branch_t* mutable_branch();
  void set_allocated_branch(::fork_db_message::branch_t* branch);

  // optional .fork_db_message.message_id msg_id = 1;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::fork_db_message::message_id msg_id() const;
  void set_msg_id(::fork_db_message::message_id value);

  // @@protoc_insertion_point(class_scope:fork_db_message.rpc_response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::fork_db_message::error* err_;
  ::fork_db_message::branch_t* branch_;
  int msg_id_;
  friend struct ::TableStruct_fork_5fdatabase_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// error

// optional uint32 code = 1;
inline bool error::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void error::clear_code() {
  code_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 error::code() const {
  // @@protoc_insertion_point(field_get:fork_db_message.error.code)
  return code_;
}
inline void error::set_code(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.error.code)
}

// optional string msg = 2;
inline bool error::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void error::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& error::msg() const {
  // @@protoc_insertion_point(field_get:fork_db_message.error.msg)
  return msg_.GetNoArena();
}
inline void error::set_msg(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fork_db_message.error.msg)
}
#if LANG_CXX11
inline void error::set_msg(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fork_db_message.error.msg)
}
#endif
inline void error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fork_db_message.error.msg)
}
inline void error::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.error.msg)
}
inline ::std::string* error::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:fork_db_message.error.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* error::release_msg() {
  // @@protoc_insertion_point(field_release:fork_db_message.error.msg)
  if (!has_msg()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void error::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.error.msg)
}

// -------------------------------------------------------------------

// meta

// optional uint32 id = 1;
inline bool meta::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void meta::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 meta::id() const {
  // @@protoc_insertion_point(field_get:fork_db_message.meta.id)
  return id_;
}
inline void meta::set_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.meta.id)
}

// optional uint32 service_id = 2;
inline bool meta::has_service_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void meta::clear_service_id() {
  service_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 meta::service_id() const {
  // @@protoc_insertion_point(field_get:fork_db_message.meta.service_id)
  return service_id_;
}
inline void meta::set_service_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  service_id_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.meta.service_id)
}

// optional uint32 method_id = 3;
inline bool meta::has_method_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void meta::clear_method_id() {
  method_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 meta::method_id() const {
  // @@protoc_insertion_point(field_get:fork_db_message.meta.method_id)
  return method_id_;
}
inline void meta::set_method_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  method_id_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.meta.method_id)
}

// -------------------------------------------------------------------

// branch_t

// repeated bytes first = 1;
inline int branch_t::first_size() const {
  return first_.size();
}
inline void branch_t::clear_first() {
  first_.Clear();
}
inline const ::std::string& branch_t::first(int index) const {
  // @@protoc_insertion_point(field_get:fork_db_message.branch_t.first)
  return first_.Get(index);
}
inline ::std::string* branch_t::mutable_first(int index) {
  // @@protoc_insertion_point(field_mutable:fork_db_message.branch_t.first)
  return first_.Mutable(index);
}
inline void branch_t::set_first(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fork_db_message.branch_t.first)
  first_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void branch_t::set_first(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fork_db_message.branch_t.first)
  first_.Mutable(index)->assign(std::move(value));
}
#endif
inline void branch_t::set_first(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  first_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fork_db_message.branch_t.first)
}
inline void branch_t::set_first(int index, const void* value, size_t size) {
  first_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.branch_t.first)
}
inline ::std::string* branch_t::add_first() {
  // @@protoc_insertion_point(field_add_mutable:fork_db_message.branch_t.first)
  return first_.Add();
}
inline void branch_t::add_first(const ::std::string& value) {
  first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fork_db_message.branch_t.first)
}
#if LANG_CXX11
inline void branch_t::add_first(::std::string&& value) {
  first_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fork_db_message.branch_t.first)
}
#endif
inline void branch_t::add_first(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  first_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fork_db_message.branch_t.first)
}
inline void branch_t::add_first(const void* value, size_t size) {
  first_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fork_db_message.branch_t.first)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
branch_t::first() const {
  // @@protoc_insertion_point(field_list:fork_db_message.branch_t.first)
  return first_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
branch_t::mutable_first() {
  // @@protoc_insertion_point(field_mutable_list:fork_db_message.branch_t.first)
  return &first_;
}

// repeated bytes second = 2;
inline int branch_t::second_size() const {
  return second_.size();
}
inline void branch_t::clear_second() {
  second_.Clear();
}
inline const ::std::string& branch_t::second(int index) const {
  // @@protoc_insertion_point(field_get:fork_db_message.branch_t.second)
  return second_.Get(index);
}
inline ::std::string* branch_t::mutable_second(int index) {
  // @@protoc_insertion_point(field_mutable:fork_db_message.branch_t.second)
  return second_.Mutable(index);
}
inline void branch_t::set_second(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:fork_db_message.branch_t.second)
  second_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void branch_t::set_second(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:fork_db_message.branch_t.second)
  second_.Mutable(index)->assign(std::move(value));
}
#endif
inline void branch_t::set_second(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  second_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fork_db_message.branch_t.second)
}
inline void branch_t::set_second(int index, const void* value, size_t size) {
  second_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.branch_t.second)
}
inline ::std::string* branch_t::add_second() {
  // @@protoc_insertion_point(field_add_mutable:fork_db_message.branch_t.second)
  return second_.Add();
}
inline void branch_t::add_second(const ::std::string& value) {
  second_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:fork_db_message.branch_t.second)
}
#if LANG_CXX11
inline void branch_t::add_second(::std::string&& value) {
  second_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:fork_db_message.branch_t.second)
}
#endif
inline void branch_t::add_second(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  second_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fork_db_message.branch_t.second)
}
inline void branch_t::add_second(const void* value, size_t size) {
  second_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fork_db_message.branch_t.second)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
branch_t::second() const {
  // @@protoc_insertion_point(field_list:fork_db_message.branch_t.second)
  return second_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
branch_t::mutable_second() {
  // @@protoc_insertion_point(field_mutable_list:fork_db_message.branch_t.second)
  return &second_;
}

// -------------------------------------------------------------------

// rpc_request

// optional .fork_db_message.meta head = 1;
inline bool rpc_request::has_head() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rpc_request::clear_head() {
  if (head_ != NULL) head_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::fork_db_message::meta& rpc_request::head() const {
  const ::fork_db_message::meta* p = head_;
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_request.head)
  return p != NULL ? *p : *reinterpret_cast<const ::fork_db_message::meta*>(
      &::fork_db_message::_meta_default_instance_);
}
inline ::fork_db_message::meta* rpc_request::release_head() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_request.head)
  _has_bits_[0] &= ~0x00000008u;
  ::fork_db_message::meta* temp = head_;
  head_ = NULL;
  return temp;
}
inline ::fork_db_message::meta* rpc_request::mutable_head() {
  _has_bits_[0] |= 0x00000008u;
  if (head_ == NULL) {
    auto* p = CreateMaybeMessage<::fork_db_message::meta>(GetArenaNoVirtual());
    head_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_request.head)
  return head_;
}
inline void rpc_request::set_allocated_head(::fork_db_message::meta* head) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete head_;
  }
  if (head) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      head = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  head_ = head;
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_request.head)
}

// optional .fork_db_message.message_id msg_id = 2;
inline bool rpc_request::has_msg_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rpc_request::clear_msg_id() {
  msg_id_ = 3000;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::fork_db_message::message_id rpc_request::msg_id() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_request.msg_id)
  return static_cast< ::fork_db_message::message_id >(msg_id_);
}
inline void rpc_request::set_msg_id(::fork_db_message::message_id value) {
  assert(::fork_db_message::message_id_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_request.msg_id)
}

// optional bytes data = 3;
inline bool rpc_request::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rpc_request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& rpc_request::data() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_request.data)
  return data_.GetNoArena();
}
inline void rpc_request::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_request.data)
}
#if LANG_CXX11
inline void rpc_request::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fork_db_message.rpc_request.data)
}
#endif
inline void rpc_request::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fork_db_message.rpc_request.data)
}
inline void rpc_request::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.rpc_request.data)
}
inline ::std::string* rpc_request::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_request::release_data() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_request.data)
  if (!has_data()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_request.data)
}

// optional bool trust = 4;
inline bool rpc_request::has_trust() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rpc_request::clear_trust() {
  trust_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool rpc_request::trust() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_request.trust)
  return trust_;
}
inline void rpc_request::set_trust(bool value) {
  _has_bits_[0] |= 0x00000010u;
  trust_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_request.trust)
}

// optional bytes first = 5;
inline bool rpc_request::has_first() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rpc_request::clear_first() {
  first_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& rpc_request::first() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_request.first)
  return first_.GetNoArena();
}
inline void rpc_request::set_first(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_request.first)
}
#if LANG_CXX11
inline void rpc_request::set_first(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  first_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fork_db_message.rpc_request.first)
}
#endif
inline void rpc_request::set_first(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000002u;
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fork_db_message.rpc_request.first)
}
inline void rpc_request::set_first(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  first_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.rpc_request.first)
}
inline ::std::string* rpc_request::mutable_first() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_request.first)
  return first_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_request::release_first() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_request.first)
  if (!has_first()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000002u;
  return first_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request::set_allocated_first(::std::string* first) {
  if (first != NULL) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  first_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), first);
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_request.first)
}

// optional bytes second = 6;
inline bool rpc_request::has_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rpc_request::clear_second() {
  second_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& rpc_request::second() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_request.second)
  return second_.GetNoArena();
}
inline void rpc_request::set_second(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_request.second)
}
#if LANG_CXX11
inline void rpc_request::set_second(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  second_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fork_db_message.rpc_request.second)
}
#endif
inline void rpc_request::set_second(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000004u;
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fork_db_message.rpc_request.second)
}
inline void rpc_request::set_second(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  second_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.rpc_request.second)
}
inline ::std::string* rpc_request::mutable_second() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_request.second)
  return second_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_request::release_second() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_request.second)
  if (!has_second()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000004u;
  return second_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_request::set_allocated_second(::std::string* second) {
  if (second != NULL) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  second_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), second);
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_request.second)
}

// -------------------------------------------------------------------

// rpc_response

// optional .fork_db_message.message_id msg_id = 1;
inline bool rpc_response::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rpc_response::clear_msg_id() {
  msg_id_ = 3000;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::fork_db_message::message_id rpc_response::msg_id() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_response.msg_id)
  return static_cast< ::fork_db_message::message_id >(msg_id_);
}
inline void rpc_response::set_msg_id(::fork_db_message::message_id value) {
  assert(::fork_db_message::message_id_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_response.msg_id)
}

// optional .fork_db_message.error err = 2;
inline bool rpc_response::has_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rpc_response::clear_err() {
  if (err_ != NULL) err_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::fork_db_message::error& rpc_response::err() const {
  const ::fork_db_message::error* p = err_;
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_response.err)
  return p != NULL ? *p : *reinterpret_cast<const ::fork_db_message::error*>(
      &::fork_db_message::_error_default_instance_);
}
inline ::fork_db_message::error* rpc_response::release_err() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_response.err)
  _has_bits_[0] &= ~0x00000002u;
  ::fork_db_message::error* temp = err_;
  err_ = NULL;
  return temp;
}
inline ::fork_db_message::error* rpc_response::mutable_err() {
  _has_bits_[0] |= 0x00000002u;
  if (err_ == NULL) {
    auto* p = CreateMaybeMessage<::fork_db_message::error>(GetArenaNoVirtual());
    err_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_response.err)
  return err_;
}
inline void rpc_response::set_allocated_err(::fork_db_message::error* err) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete err_;
  }
  if (err) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      err = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  err_ = err;
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_response.err)
}

// optional bytes data = 3;
inline bool rpc_response::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rpc_response::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& rpc_response::data() const {
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_response.data)
  return data_.GetNoArena();
}
inline void rpc_response::set_data(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fork_db_message.rpc_response.data)
}
#if LANG_CXX11
inline void rpc_response::set_data(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fork_db_message.rpc_response.data)
}
#endif
inline void rpc_response::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fork_db_message.rpc_response.data)
}
inline void rpc_response::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fork_db_message.rpc_response.data)
}
inline ::std::string* rpc_response::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_response.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* rpc_response::release_data() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_response.data)
  if (!has_data()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void rpc_response::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_response.data)
}

// optional .fork_db_message.branch_t branch = 4;
inline bool rpc_response::has_branch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rpc_response::clear_branch() {
  if (branch_ != NULL) branch_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::fork_db_message::branch_t& rpc_response::branch() const {
  const ::fork_db_message::branch_t* p = branch_;
  // @@protoc_insertion_point(field_get:fork_db_message.rpc_response.branch)
  return p != NULL ? *p : *reinterpret_cast<const ::fork_db_message::branch_t*>(
      &::fork_db_message::_branch_t_default_instance_);
}
inline ::fork_db_message::branch_t* rpc_response::release_branch() {
  // @@protoc_insertion_point(field_release:fork_db_message.rpc_response.branch)
  _has_bits_[0] &= ~0x00000004u;
  ::fork_db_message::branch_t* temp = branch_;
  branch_ = NULL;
  return temp;
}
inline ::fork_db_message::branch_t* rpc_response::mutable_branch() {
  _has_bits_[0] |= 0x00000004u;
  if (branch_ == NULL) {
    auto* p = CreateMaybeMessage<::fork_db_message::branch_t>(GetArenaNoVirtual());
    branch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fork_db_message.rpc_response.branch)
  return branch_;
}
inline void rpc_response::set_allocated_branch(::fork_db_message::branch_t* branch) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete branch_;
  }
  if (branch) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      branch = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, branch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  branch_ = branch;
  // @@protoc_insertion_point(field_set_allocated:fork_db_message.rpc_response.branch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fork_db_message

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fork_db_message::message_id> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fork_db_message::message_id>() {
  return ::fork_db_message::message_id_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_fork_5fdatabase_5fservice_2eproto
